{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/maupassant/source/css/donate.css","path":"css/donate.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/donate/index.html","path":"donate/index.html","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/BTCQR.png","path":"img/BTCQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/AliPayQR.png","path":"img/AliPayQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/WeChatQR.png","path":"img/WeChatQR.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/default.css","path":"css/default.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/alipay.svg","path":"img/alipay.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/github.svg","path":"img/github.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/wechat.svg","path":"img/wechat.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/paypal.svg","path":"img/paypal.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/bitcoin.svg","path":"img/bitcoin.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/donate.js","path":"js/donate.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/img/like.svg","path":"img/like.svg","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/gitment.browser.js","path":"js/gitment.browser.js","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/favicon2.ico","path":"favicon2.ico","modified":0,"renderable":0},{"_id":"source/images/four.jpg","path":"images/four.jpg","modified":0,"renderable":0},{"_id":"source/images/regex.jpg","path":"images/regex.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"themes/maupassant/.travis.yml","hash":"f8da426b97088e4caa5226cff219a5d95087961f","modified":1509979772039},{"_id":"themes/maupassant/LICENSE","hash":"0663fd3a7ea9fc4f4c634b4d73e2da426b536f86","modified":1509979772054},{"_id":"themes/maupassant/_config.yml","hash":"65a2187d347a186078707a9e89a8a3122668154d","modified":1519924644010},{"_id":"themes/maupassant/package.json","hash":"04ca87ea475f37841d3610fe5806feb8022416c3","modified":1509979772070},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"fc32c57220ecc58cb1920623105ed8901bc4cbcf","modified":1509979772054},{"_id":"themes/maupassant/languages/en.yml","hash":"8574e8c36f4c72118f27f7ff7353b2a9ceda2a9b","modified":1509979772054},{"_id":"themes/maupassant/layout/base.jade","hash":"513c2b66a327fc281917f4a5c567f93a39ecb96e","modified":1509979772070},{"_id":"themes/maupassant/layout/base-without-sidebar.jade","hash":"5901de9f23358158079a02c6470a491cf36ffbf2","modified":1509979772070},{"_id":"themes/maupassant/README.md","hash":"135bb50ff9359ce06b83dec1269cd56cb73415da","modified":1509979772054},{"_id":"themes/maupassant/layout/archive.jade","hash":"d70d1ed241b1a431a2434768d02bb2de03070f70","modified":1509979772070},{"_id":"themes/maupassant/layout/index.jade","hash":"2d59ecea118ff377f03bc4f86066bea062496b78","modified":1509979772070},{"_id":"themes/maupassant/layout/post.jade","hash":"1c0de9f78f0bef8fc9fa22246b880662f505e4f5","modified":1509979772070},{"_id":"themes/maupassant/layout/timeline.jade","hash":"31f2826d86201c9a86e00d42690f26473ab14363","modified":1509979772070},{"_id":"themes/maupassant/layout/page.jade","hash":"bdbfec167326a6a7ff1db1f01511d252cfe6cccb","modified":1509979772070},{"_id":"themes/maupassant/layout/single-column.jade","hash":"4be14ac93c154216e174fe0c4c05608c26f59c42","modified":1509979772070},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1525420355447},{"_id":"themes/maupassant/layout/_partial/comments.jade","hash":"ee00e257d4986ee831ca6f39910b664a875cfede","modified":1509979772054},{"_id":"themes/maupassant/layout/_partial/after_footer.jade","hash":"b32c74a4d032b085500373b8306a9224918d3cbb","modified":1509979772054},{"_id":"themes/maupassant/layout/_partial/footer.jade","hash":"92aa15e813bfb411803cc54218feb5410469a9c2","modified":1509979772054},{"_id":"themes/maupassant/layout/_partial/mathjax.jade","hash":"ac6e3a92bf18ab6bbd0e041b6796b295bae963ee","modified":1509979772054},{"_id":"themes/maupassant/layout/_partial/paginator.jade","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1509979772054},{"_id":"themes/maupassant/layout/_partial/mathjax2.jade","hash":"234a792e64ba208fa97d2f99772ece23056a53ec","modified":1509979772054},{"_id":"themes/maupassant/layout/_partial/post_nav.jade","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1509979772054},{"_id":"themes/maupassant/layout/_partial/tag.jade","hash":"6145b483b271bba05ad1db7c039fe352a768215b","modified":1509979772054},{"_id":"themes/maupassant/layout/_partial/totop.jade","hash":"eb91a3baf9411188c7c8130f63a674f541ca9c81","modified":1509979772054},{"_id":"themes/maupassant/layout/_widget/category.jade","hash":"7707b4c718a935882ee986d0bb0078e50cdbea64","modified":1509979772054},{"_id":"themes/maupassant/layout/_widget/recent_comments.jade","hash":"0b9e78e7f20bc69690e05f2e0c956bded9058a84","modified":1509979772070},{"_id":"themes/maupassant/layout/_widget/links.jade","hash":"2a1dd6a0e2befd073e3347347994d8dcd2047879","modified":1509979772070},{"_id":"themes/maupassant/layout/_partial/head.jade","hash":"caa793dbc74d885bbdcaab42952c15e249f890a2","modified":1509979772054},{"_id":"themes/maupassant/layout/_widget/recent_posts.jade","hash":"770b6c41cbf7969ed33adf87eec3be6f50a0911b","modified":1509979772070},{"_id":"themes/maupassant/layout/_widget/tag.jade","hash":"37f236365b153fc40324391e5a602d6d50014e18","modified":1509979772070},{"_id":"themes/maupassant/layout/_widget/search.jade","hash":"c5301ca7f2ec24d790fd7f35f69f8fd8acbdb725","modified":1509979772070},{"_id":"themes/maupassant/source/css/donate.css","hash":"b41342b45a1fabd35c84001f82bc7caf6583152a","modified":1509979772086},{"_id":"themes/maupassant/source/donate/index.html","hash":"b5fe5a2f2b9fde5e52fd2046007148f85dba8ef1","modified":1509979772086},{"_id":"themes/maupassant/layout/_partial/helpers.jade","hash":"9e44f6d32f2449b4109c33118f8285fa2fc7b023","modified":1509979772054},{"_id":"themes/maupassant/source/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1509979772086},{"_id":"themes/maupassant/source/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1509979772086},{"_id":"themes/maupassant/source/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1509979772086},{"_id":"themes/maupassant/source/css/default.css","hash":"b41d95120f9e64fd4530ae00ceaef09c7ea20818","modified":1509979772070},{"_id":"themes/maupassant/source/img/alipay.svg","hash":"292ea040e865c1d0be259703ff850570b3bdfc97","modified":1509979772086},{"_id":"themes/maupassant/source/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1509979772086},{"_id":"themes/maupassant/source/img/wechat.svg","hash":"30418295bed44bcc4b29076eb7deed49cf4d6c1c","modified":1509979772086},{"_id":"themes/maupassant/source/img/paypal.svg","hash":"e916dea1c1bba1bc935510310f65b2c9328a401a","modified":1509979772086},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"c77270e684a60babc1abb7353e700ecdc5a66d30","modified":1509979772086},{"_id":"themes/maupassant/source/css/style.scss","hash":"90d7f6663b032f84ebe6a0cb172b7d1144b692e1","modified":1509979772086},{"_id":"themes/maupassant/source/img/bitcoin.svg","hash":"eeb2ee8cf44ba5c298baeed84bb90866f4814955","modified":1509979772086},{"_id":"themes/maupassant/source/js/donate.js","hash":"a9ff8d20f00ba6c216e6a55865c0b47ce6b28f2c","modified":1509979772086},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"8a993c1c4ad40789d2960b682cb2130382a0f26a","modified":1509979772086},{"_id":"themes/maupassant/source/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1509979772086},{"_id":"themes/maupassant/source/js/share.js","hash":"514e726c1efae9f6566600fa0e945b4b9e620f2e","modified":1509979772101},{"_id":"themes/maupassant/source/js/search.js","hash":"dbda07a03e6edc73f1dc28a068c24a6037b97b56","modified":1509979772101},{"_id":"themes/maupassant/source/js/totop.js","hash":"15de186b089c245fe60766d509b587919f05ff23","modified":1509979772101},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"150ab1cad40d7ae081b0896b13f7d7cbac4e6338","modified":1509979772101},{"_id":"themes/maupassant/source/js/gitment.browser.js","hash":"b15998a45d5f386d30905cfbfbb1658336acbb5b","modified":1509979772086},{"_id":"source/_posts/1.Two Sum.md","hash":"453ab2840a4bc9c5bc8a7a0d7c03b0685598cf77","modified":1519924847753},{"_id":"source/_posts/AppRegistryNotReady错误解决办法.md","hash":"eee6d56f3e58c1223137961fb9475c53e2a59b57","modified":1520350958088},{"_id":"source/_posts/C++中全局作用域符号.md","hash":"1eb3c474b37c5a556376a69a85890468f69ab23a","modified":1520868992681},{"_id":"source/_posts/CentOs7离线安装JDK8.md","hash":"f14ce90d158d81e0798e62674ea535e0039300fa","modified":1520873126698},{"_id":"source/_posts/CentOs7离线安装MySql.md","hash":"cd3711c67d69e76050b6b032afec5d05dbae767d","modified":1520871562688},{"_id":"source/_posts/CentOs7离线安装Python3-5.md","hash":"bded1c888a86e10cd7331bc0435c13df3335cb54","modified":1520871826815},{"_id":"source/_posts/CentOs7离线安装nginx.md","hash":"951e7c09ef23509ff3c686ec69d86ee9fae0da1c","modified":1520873110066},{"_id":"source/_posts/Django简单登陆如何创建用户密码.md","hash":"0d144243eb2fb5d8aa555d842dddc2735ada731c","modified":1520178812937},{"_id":"source/_posts/Html标签的英文原称.md","hash":"c857bf2173a5bc4e41362c91555b243e27db668d","modified":1520868709931},{"_id":"source/_posts/KeyErrorSQLALCHEMY_TRACK-MODIFICATIONS错误解决.md","hash":"e9210eec2c33075bca778e2578286c1e36dd208b","modified":1520872899400},{"_id":"source/_posts/Linux上安装Django的几种方法.md","hash":"706caaa5c2e1cc8ff6071422467cc29f55e2c17c","modified":1520349678006},{"_id":"source/_posts/Linux下如何安装neo4j数据库.md","hash":"87ad3a06b7a71e73e9857d28edcefbd8f3994cfc","modified":1520873190025},{"_id":"source/_posts/Linux下如何导出MySQL数据库.md","hash":"6c6d782b2b61aab546a59398dc2f9a0f0b2f93ee","modified":1520349879751},{"_id":"source/_posts/Linux下安装JDK8.md","hash":"09d8e8d6247733b98b261c88722b7221d89cfe42","modified":1520349887949},{"_id":"source/_posts/Median of Two Sorted Arrays题解.md","hash":"0b2797620e449c3282f547c1f97e12ab42d435e7","modified":1519924847853},{"_id":"source/_posts/PowerShell禁止执行脚本问题.md","hash":"02be8a1722ba7f4d87652d5c46bcadcdbd6fa737","modified":1521466649048},{"_id":"source/_posts/PyCharm中各个调试按钮含义.md","hash":"0271d1bab876b49465e4d29887248bb5dec8c361","modified":1522252775686},{"_id":"source/_posts/Python中+和+=的异同.md","hash":"071188d89af1a546a2636d86f65261b796f88d29","modified":1519924847869},{"_id":"source/_posts/Python中is和==的区别.md","hash":"79376adc78577e5fc0e2804e850cb08ce67f650c","modified":1519924847884},{"_id":"source/_posts/Python中元组和列表的异同.md","hash":"a2a951070beb7f9a14e894c089db607367542bc1","modified":1520868655443},{"_id":"source/_posts/Python中参数-args和-args的含义.md","hash":"1f41824cb93aa296f2ec370ecdf6cd6b387b791c","modified":1519924847902},{"_id":"source/_posts/Python中如何获取随机数.md","hash":"9f7cfb86184f886c1b788e659e0bf1e0e1e00acf","modified":1520181081061},{"_id":"source/_posts/Python中对元组的操作.md","hash":"f21f3afafe87481842f0e6380eeecc7a6e506516","modified":1519924847907},{"_id":"source/_posts/Python中的-property装饰器.md","hash":"388bcede72a3bbe36a8687c08256423adba7d99e","modified":1520868811493},{"_id":"source/_posts/Python中的-staticmethod和-classmethod实例解析.md","hash":"105a94aae8845331ca255c3197714ce59afaccec","modified":1520868824939},{"_id":"source/_posts/Python中的load-loads-dump-dumps函数区别.md","hash":"89dd26346cfdfaa6296e702ff24735b3fba4efc6","modified":1520181322065},{"_id":"source/_posts/Python中的右斜杠x含义.md","hash":"38c40a0c10cddc33e7f55c2dcfbefa0599999901","modified":1519924847938},{"_id":"source/_posts/Python中的编码与解码.md","hash":"7e75cc1ec153df5faa1ddf67b10d31be7f7191e1","modified":1519924847938},{"_id":"source/_posts/Python实现快排算法.md","hash":"8cb88acc908fab2a792f6ab0c4c43f7327f92f37","modified":1519924847938},{"_id":"source/_posts/Python计算斐波那契数列的两种方法.md","hash":"f34fd781121dc863b3dd138c4ca2d471650f8d83","modified":1519924847954},{"_id":"source/_posts/Rails中的MVC请求过程.md","hash":"aed50402668f8c3fa8f044ae0cc0e77398613cf6","modified":1520869908839},{"_id":"source/_posts/Ruby中字符串转数组.md","hash":"d57afeeeb867ed6a26b50e0efe968c8b9d67cfcd","modified":1519924847954},{"_id":"source/_posts/Ruby中的attr-accessor是什么.md","hash":"e21b05e9c55969a47e206188b7a08982cae9d351","modified":1521464736392},{"_id":"source/_posts/Ruby正则表达式中替换字符串的几种方法.md","hash":"3a2b5aaeec975925ae40d4c85d7cec25f439e487","modified":1522252397338},{"_id":"source/_posts/Ruby知识点.md","hash":"059812872c9083c16aae7cec84b82ef51c9229ff","modified":1520868861411},{"_id":"source/_posts/VPS设置SSH密钥登录.md","hash":"a4dc9f4fa3096b0b30fe501c6d104398f90e5c72","modified":1521469321244},{"_id":"source/_posts/centos下安装配置mysql步骤.md","hash":"a9873652e42f49eebc3a268f9e2d801a368f36ad","modified":1520864801271},{"_id":"source/_posts/hexo备份到github上.md","hash":"609b64ecde15e4d0ad19d5794f13e64beb633b03","modified":1519924847822},{"_id":"source/_posts/Windows下生成树状目录命令.md","hash":"4640029580bccf8911dd7053d1420bff7297eeed","modified":1521472308542},{"_id":"source/_posts/libcurlc错误.md","hash":"5b65292daab7d9b8a2998b6f1f9631866ec70a93","modified":1521468395247},{"_id":"source/_posts/mysql出现innodbCannot allocate memory for the buffer pool的解决办法.md","hash":"cfa47f93473b1f04a9f26e91111f9e166281e79e","modified":1520177394090},{"_id":"source/_posts/mysql忘记root密码解决办法.md","hash":"b8b1a5f1b8dcb1cc71d2c68dde8eb89543d85c16","modified":1520874225146},{"_id":"source/_posts/netSpeedMonitor使用指南.md","hash":"7d895e0762720095a22b4cae401763ada4317273","modified":1519924847853},{"_id":"source/_posts/nginx+uwsgi在centos上部署Django应用.md","hash":"75145ccff7069de4695617609674b1df25259c38","modified":1520873175082},{"_id":"source/_posts/putty及winscp保持自动连接设置.md","hash":"90e88fa25aef2bd5067ed9b766f65acd7d680f75","modified":1521365547490},{"_id":"source/_posts/python中格式化字符串的几种方法.md","hash":"6df17af52ee4d04bad4122ab050492baeba60b81","modified":1520180511932},{"_id":"source/_posts/ruby中1和$1的区别.md","hash":"12e91d39bd4a3f27228431fe26c41cb63e9e6b34","modified":1522251510590},{"_id":"source/_posts/shadowsocks多用户访问配置.md","hash":"09fece3a7113abd6c06ba8a487e63a21905bca1e","modified":1520868515444},{"_id":"source/_posts/windows下如何创建Django应用.md","hash":"1a6ab73def1fbecd34e24c15ef46f9454bc0b9e4","modified":1519924847985},{"_id":"source/_posts/systemctl中的ctl代表含义.md","hash":"d0acf45eae49f6d43ffbf0f087c1a8b60575baf5","modified":1520873094058},{"_id":"source/_posts/一个例子搞懂Pythonh中的public，protected和private.md","hash":"cee5da9af88a8fb0b19120898e80e373e9a93a01","modified":1519924848006},{"_id":"source/_posts/一行ruby代码新建并写入内容至文件.md","hash":"48c1778e5f20ea1d991f7f10f8e4027172fee7b3","modified":1521467990903},{"_id":"source/_posts/使用Python批量替换多个文件中的字符.md","hash":"bcf91c75081635ef9d4c7095ccd60351331883d0","modified":1519924848038},{"_id":"source/_posts/几个例子搞懂Python类里的self和-init.md","hash":"383d5a114e981b19a14726cd7db223376041bc4c","modified":1520868551110},{"_id":"source/_posts/关于Python中可变对象的赋值，浅拷贝和深拷贝.md","hash":"2c90defb6847ec2a43bbc3af61ab4799beb71892","modified":1519924848038},{"_id":"source/_posts/同步与异步阻塞与非阻塞.md","hash":"41b88ecadfdc45a9f9d729123f0055b0890b5e9e","modified":1523286994559},{"_id":"source/_posts/命令行运行Cpp文件.md","hash":"eff9e6c1d90783c6aa07eab1a5c8b73c6c3ab653","modified":1519924848069},{"_id":"source/_posts/a.sh","hash":"ba44f62e059648efe21d6667b975ddfa8c7103bf","modified":1519924847753},{"_id":"source/_posts/如何改变putty终端字体大小.md","hash":"478e8f43cb16399c6789ae6f3b2c63b97b1fe9e4","modified":1521365534856},{"_id":"source/_posts/如何理解Python中的蓝图.md","hash":"056123e4446fdcabdcc597450bb031466b696afb","modified":1521636482312},{"_id":"source/_posts/如何调试ruby程序.md","hash":"86378518a257e4d48a8ff2b1c4ac9b13343764de","modified":1521467850016},{"_id":"source/_posts/小记.md","hash":"6edf7d3d6547c86f5b86a5e1aa9f3035f5acb7fe","modified":1520868596913},{"_id":"source/_posts/常用的git命令.md","hash":"0be4db2fd131cbe3df172b2407a242179ed8bb68","modified":1521469108966},{"_id":"source/_posts/换新电脑更新hexo博客过程.md","hash":"175e18ded06bd6bbeb02843e81ded22b4c71c016","modified":1519924848104},{"_id":"source/_posts/欧拉计划第一题.md","hash":"0a189d5d487a0a485b30fb7a35238c306a3ca0eb","modified":1519924848107},{"_id":"source/_posts/欧拉计划第七题.md","hash":"284bd50ca9ba2778caaa71a5b72bcbcd976b338b","modified":1519924848107},{"_id":"source/_posts/欧拉计划第三题.md","hash":"de4bb6844f5b3f06daff141c75e07763b4a02eaf","modified":1519924848107},{"_id":"source/_posts/欧拉计划第九题.md","hash":"d744c73813ccbdc91d29c6c9d4372d97c5c7242c","modified":1519924848130},{"_id":"source/_posts/欧拉计划第二题.md","hash":"a95af02a053364593f14313cce87c09235a2fbb1","modified":1519924848137},{"_id":"source/_posts/欧拉计划第五题.md","hash":"fcd56bf58c21a61ccfd2ec58449c32ec04e0bfaf","modified":1519924848143},{"_id":"source/_posts/欧拉计划第六题.md","hash":"bfbb63fe867e4453772c3e6d11e2661077ef9e12","modified":1519924848152},{"_id":"source/_posts/欧拉计划第十一题.md","hash":"339187a50e7c72f42ff117e57fb3d69d043c9e3a","modified":1519924848168},{"_id":"source/_posts/欧拉计划第八题.md","hash":"4e8ccd8a1a1a28dd01c2cdecfca62e6a8563d4e4","modified":1519924848152},{"_id":"source/_posts/欧拉计划第十三题.md","hash":"70c5989855ea9f5f943ee0e6fba801d6161812b7","modified":1519924848183},{"_id":"source/_posts/欧拉计划第十二题.md","hash":"5bc0caf3e8710acd57006d0dece9f02b49e5a8a4","modified":1519924848204},{"_id":"source/_posts/欧拉计划第十题.md","hash":"a48538e671ffd5e5dca72a2fcf05970ea7a864e0","modified":1519924848207},{"_id":"source/_posts/欧拉计划第四题.md","hash":"13cb9f69cc86335620c62923993a8e94eec4e0f5","modified":1519924848207},{"_id":"source/_posts/正则表达式学习笔记.md","hash":"2d2277ae1eeced9ac64d6a78c47434034b2fb526","modified":1522253352848},{"_id":"source/_posts/雨天游眼睛湖.md","hash":"4ed57b4df554081792b56aa78ecbd96811b7e975","modified":1519924848238},{"_id":"source/_posts/科学上网配置shadowsocks.md","hash":"0eb8139b80c8c2364fd21ec81cdb99e5f35a89a9","modified":1521636688532},{"_id":"source/CNAME","hash":"2ad69c98d3f9d66d11dd147e11502be30ff74786","modified":1509979771883},{"_id":"source/favicon.ico","hash":"c0df44b5255474beeda5ed7dabc06a7565cb0f4e","modified":1509979771898},{"_id":"source/favicon2.ico","hash":"043d8ead3c992b1a1342cbb4a0f4246123d4a9ab","modified":1509979771898},{"_id":"source/about/index.md","hash":"9253f3beb96f248fb462e37f2658823d1628ca96","modified":1519924358296},{"_id":"source/images/four.jpg","hash":"ee76b457df5445966732bce18413a08f67bd8a6e","modified":1509979771898},{"_id":"source/images/regex.jpg","hash":"590ea0ca269043336759b700da6c255ecd50e4c9","modified":1522253880546},{"_id":"public/about/index.html","hash":"d5742deb2544426958496bf65c6989a7dd90fd0c","modified":1525427635314},{"_id":"public/2018/05/04/欧拉计划第二题/index.html","hash":"85db5473c5b86ea6177cd81150cbd8247c69f3dd","modified":1525427635314},{"_id":"public/2018/04/04/同步与异步阻塞与非阻塞/index.html","hash":"726c3daecfe44d8be3bb18762e2e3a265c9c4e31","modified":1525427635329},{"_id":"public/2018/03/28/PyCharm中各个调试按钮含义/index.html","hash":"a49532e03375fd9d7128adb06333b0898455901d","modified":1525427635329},{"_id":"public/2018/03/28/ruby中1和$1的区别/index.html","hash":"9f132939cf6df10e05873ac649039e560cf34595","modified":1525427635329},{"_id":"public/2018/03/25/Ruby正则表达式中替换字符串的几种方法/index.html","hash":"a21aa30c3a61ed4753f5b6a3f9d07fab3c79f8af","modified":1525427635329},{"_id":"public/2018/03/22/正则表达式学习笔记/index.html","hash":"5e9be900acb63f67f5755ad88c7ec6279e4419a6","modified":1525427635329},{"_id":"public/2018/03/21/如何理解Python中的蓝图/index.html","hash":"fd4b52cdbddac26ce2634363efe84df686e9a2d8","modified":1525427635329},{"_id":"public/2018/03/19/libcurlc错误/index.html","hash":"a913c1d039c5c2e0a3d4ce8f34fb5e302e685c8f","modified":1525427635329},{"_id":"public/2018/03/19/常用的git命令/index.html","hash":"aa7f3540da34f76f7d310a5ebd43d989970b1b9e","modified":1525427635329},{"_id":"public/2018/03/19/一行ruby代码新建并写入内容至文件/index.html","hash":"e63caddc5305226fd299aa87536cf659f328b38d","modified":1525427635329},{"_id":"public/2018/03/19/如何调试ruby程序/index.html","hash":"29eff543a7b93166c1c6475f2512ddd88c6836f0","modified":1525427635329},{"_id":"public/2018/03/19/Windows下生成树状目录命令/index.html","hash":"628dc1ab3b43a6859bbdcf98eb4ff8a7fe722a62","modified":1525427635329},{"_id":"public/2018/03/19/PowerShell禁止执行脚本问题/index.html","hash":"bae424d4cddabbbbfa12554eb31a5c96d80b9aa5","modified":1525427635329},{"_id":"public/2018/03/19/VPS设置SSH密钥登录/index.html","hash":"d1796357fd3163894f44ae5b5104ce49e6c15e8f","modified":1525427635329},{"_id":"public/2018/03/13/mysql忘记root密码解决办法/index.html","hash":"56f04eb6335f4135fd2067edebc5516e426747e2","modified":1525427635329},{"_id":"public/2018/03/13/KeyErrorSQLALCHEMY_TRACK-MODIFICATIONS错误解决/index.html","hash":"357448e0d77d91c5b3a3d55d307487f5d6b47ada","modified":1525427635329},{"_id":"public/2018/03/12/Rails中的MVC请求过程/index.html","hash":"83612c4b43545e736ad8712e484bd97f242186bf","modified":1525427635329},{"_id":"public/2018/03/12/CentOs7离线安装Python3-5/index.html","hash":"e4665bf565d6f09cf736b3d76c27b7c56bc32497","modified":1525427635329},{"_id":"public/2018/03/12/CentOs7离线安装JDK8/index.html","hash":"cd37aa666d02dac7d41c95e686ffe26eccc8e55d","modified":1525427635329},{"_id":"public/2018/03/12/CentOs7离线安装nginx/index.html","hash":"ea3edb2ab764297657fac23b5a7e1386ed9229c8","modified":1525427635329},{"_id":"public/2018/03/12/CentOs7离线安装MySql/index.html","hash":"957db44e512c94c17d7f711148df08e1728eccb1","modified":1525427635329},{"_id":"public/2018/03/12/systemctl中的ctl代表含义/index.html","hash":"aa5ae064fae7eb428df3308efcef950e299684fa","modified":1525427635329},{"_id":"public/2018/03/12/shadowsocks多用户访问配置/index.html","hash":"e4766af1bf2173589039bbc06c4e50cfc749c821","modified":1525427635329},{"_id":"public/2018/03/06/Linux上安装Django的几种方法/index.html","hash":"564e2dd7344f46b850d6bca79f8a4846221dd1ec","modified":1525427635329},{"_id":"public/2018/03/06/putty及winscp保持自动连接设置/index.html","hash":"eda1ff845a673ea5643f001ba5358ee4bbe30547","modified":1525427635329},{"_id":"public/2018/03/06/如何改变putty终端字体大小/index.html","hash":"c305e54ba4cdba61728a626d1e9af2a3316ae38e","modified":1525427635329},{"_id":"public/2018/03/05/Python中的load-loads-dump-dumps函数区别/index.html","hash":"cdf9d04df7a8210427c43155b9ee3406dec84515","modified":1525427635329},{"_id":"public/2018/03/05/Python中如何获取随机数/index.html","hash":"eb883f64ba46a020f0130d054bedde63904a21e7","modified":1525427635329},{"_id":"public/2018/03/05/Linux下安装JDK8/index.html","hash":"cf13f39acfce28dd05674950ac1b833f80f8cb8e","modified":1525427635329},{"_id":"public/2018/03/05/python中格式化字符串的几种方法/index.html","hash":"3915bba0d9dd47c5f56c4a017e7376c23dabce39","modified":1525427635329},{"_id":"public/2018/03/05/AppRegistryNotReady错误解决办法/index.html","hash":"108393ee1a9317c82a3ebfcd73d5cbfb17885eea","modified":1525427635329},{"_id":"public/2018/03/04/Linux下如何导出MySQL数据库/index.html","hash":"4c9e3f2e021c98d8c4bf0c33314a3b59293d8875","modified":1525427635329},{"_id":"public/2018/03/04/Django简单登陆如何创建用户密码/index.html","hash":"8d43d827ce97c3f162f8bc9b5b97999b3c0f4181","modified":1525427635329},{"_id":"public/2018/03/04/mysql出现innodbCannot allocate memory for the buffer pool的解决办法/index.html","hash":"002db36cc5457dd2850aac96978067bef764c0d3","modified":1525427635329},{"_id":"public/2018/03/02/使用Python批量替换多个文件中的字符/index.html","hash":"4b17f495899f80f4d56bdfc9ed8e3896926d12c0","modified":1525427635329},{"_id":"public/2018/03/01/windows下如何创建Django应用/index.html","hash":"cac71ebee84a103cb8b9a0ba65eb84ecc83bc53a","modified":1525427635329},{"_id":"public/2018/02/27/Python中is和==的区别/index.html","hash":"d7b3f4a6a0b4c7c00ed95c3c6acf02500eb0552b","modified":1525427635329},{"_id":"public/2018/02/25/Python中+和+=的异同/index.html","hash":"c40ed16fa85f9e50176dae54dffd898d556040ca","modified":1525427635329},{"_id":"public/2018/02/01/Median of Two Sorted Arrays题解/index.html","hash":"d57206b3b2495a5a4c283a1de7ee85a9d8216b29","modified":1525427635329},{"_id":"public/2018/01/30/Python实现快排算法/index.html","hash":"22ff8e0dedc9ff77c7bfc6ea1d227cc27649cafa","modified":1525427635329},{"_id":"public/2018/01/29/Python计算斐波那契数列的两种方法/index.html","hash":"76a792a40a730193e0a4a4bd615563296aa79489","modified":1525427635329},{"_id":"public/2018/01/29/Python中的-property装饰器/index.html","hash":"50ca7ce502c666f7a08ba627e8756654018287d1","modified":1525427635329},{"_id":"public/2018/01/29/Python中的右斜杠x含义/index.html","hash":"466b7ab1a9c6297e821fac539b361d95ed500412","modified":1525427635329},{"_id":"public/2018/01/29/Python中的编码与解码/index.html","hash":"4d9102088fcc343b1d3430380979e09338063bc4","modified":1525427635329},{"_id":"public/2018/01/29/关于Python中可变对象的赋值，浅拷贝和深拷贝/index.html","hash":"532dddbc2e679d5f1e33feb1f7a84a2c57c28190","modified":1525427635329},{"_id":"public/2018/01/27/centos下安装配置mysql步骤/index.html","hash":"2ebecc761231012a4af074a468bac0187775ea72","modified":1525427635329},{"_id":"public/2018/01/23/C++中全局作用域符号/index.html","hash":"bb516d9f07512d846400acd18bfc04f819fa8678","modified":1525427635329},{"_id":"public/2018/01/23/Ruby中字符串转数组/index.html","hash":"734de09e20ed54b2a94d898d79d484a529f3ae5d","modified":1525427635329},{"_id":"public/2018/01/23/Python中对元组的操作/index.html","hash":"f6e3c46df08fd7a4fb427dd9af6437b92f408199","modified":1525427635329},{"_id":"public/2018/01/23/Python中元组和列表的异同/index.html","hash":"e562ecaf64d5470a0c93a0c78e7b17d170da5690","modified":1525427635329},{"_id":"public/2018/01/23/Python中参数-args和-args的含义/index.html","hash":"50f8c8bdb6983a9ae13d5319349be0a5e9f8f037","modified":1525427635329},{"_id":"public/2018/01/23/命令行运行Cpp文件/index.html","hash":"81b34536d413d9595c37bbcef3308a1ec4cba053","modified":1525427635329},{"_id":"public/2018/01/16/Linux下如何安装neo4j数据库/index.html","hash":"1b9a1ccfbf67b684eb0c7bd0300f83216db84b15","modified":1525427635329},{"_id":"public/2017/12/19/科学上网配置shadowsocks/index.html","hash":"a2e620b51fb4c29eee90e6d204899bcd807849cf","modified":1525427635329},{"_id":"public/2017/12/19/Python中的-staticmethod和-classmethod实例解析/index.html","hash":"f10e19439d59de97f9c4916067dc20d253343d18","modified":1525427635329},{"_id":"public/2017/12/19/一个例子搞懂Pythonh中的public，protected和private/index.html","hash":"110d875bfb0e4c96afb18d22d8e10864062bcd34","modified":1525427635329},{"_id":"public/2017/11/24/欧拉计划第十二题/index.html","hash":"d1d76ba83fd354f7d4c00c3f9eec1cca181e2385","modified":1525427635329},{"_id":"public/2017/11/20/欧拉计划第十一题/index.html","hash":"2c2207caeb874350ce535189bebcbd4d9aabd34c","modified":1525427635329},{"_id":"public/2017/11/18/欧拉计划第九题/index.html","hash":"3bc60972ee9707ffe2aaecf3399acee89fc5f1e7","modified":1525427635329},{"_id":"public/2017/11/18/欧拉计划第六题/index.html","hash":"1e907e70038dd9af384be58926a7945c215d35a3","modified":1525427635329},{"_id":"public/2017/11/18/欧拉计划第八题/index.html","hash":"83d476e23045772ec7d18f848a521a1713afaa82","modified":1525427635329},{"_id":"public/2017/11/17/欧拉计划第七题/index.html","hash":"ad243f90e1aadc95eee7a40fe6a53d6efc836699","modified":1525427635329},{"_id":"public/2017/11/14/欧拉计划第五题/index.html","hash":"8a335de2ded082b07809cf17574ac8dea6893676","modified":1525427635329},{"_id":"public/2017/11/14/欧拉计划第四题/index.html","hash":"b4c0b0550714201ff366299d5262a9679d6db218","modified":1525427635329},{"_id":"public/2017/11/12/小记/index.html","hash":"4fcf7229774ea09a9fa7f4d8b3e36c13ab78172b","modified":1525427635329},{"_id":"public/2017/11/10/hexo备份到github上/index.html","hash":"66af726264e6669679e130987d950cda96ed17f3","modified":1525427635329},{"_id":"public/2017/11/08/换新电脑更新hexo博客过程/index.html","hash":"5d4ca9c2c456404f63e704b27fd5b8911d660027","modified":1525427635329},{"_id":"public/2017/11/08/netSpeedMonitor使用指南/index.html","hash":"4fac28eb68903f0779aafc0fd460102da983c009","modified":1525427635329},{"_id":"public/2017/09/17/1.Two Sum/index.html","hash":"49e2f79a71ae194d1fe376b9209361537102ca90","modified":1525427635329},{"_id":"public/2017/09/11/欧拉计划第三题/index.html","hash":"06b16d82ffdb19cf58fb87af2f9c40f769e4fce8","modified":1525427635329},{"_id":"public/2017/09/10/Ruby知识点/index.html","hash":"c0ba6eefbe13645c3d59eddaa611d2f5fe258178","modified":1525427635329},{"_id":"public/2017/09/10/欧拉计划第一题/index.html","hash":"610d7cde7baeb49fb08add2727361faa920bd175","modified":1525427635329},{"_id":"public/2016/09/30/Html标签的英文原称/index.html","hash":"ef5d394f5a69b9816f0b35ffef130e686e3270ac","modified":1525427635329},{"_id":"public/2016/09/26/雨天游眼睛湖/index.html","hash":"d4deba9b107ff45d0c17706292b133fcd66995e0","modified":1525427635329},{"_id":"public/tags/Django/index.html","hash":"a04eb599d3a367e6b96901b817878c524b0bf281","modified":1525427635329},{"_id":"public/tags/Leetcode/index.html","hash":"541f1dabd080b241b151d2be13fdf92cc42c66a4","modified":1525427635329},{"_id":"public/tags/Linux/index.html","hash":"270237a91d00948080ea18b8cb000fa49499fa55","modified":1525427635329},{"_id":"public/tags/Linux/page/2/index.html","hash":"8e456d78ed585aea8275ff7ac73b9a2f45feb6a5","modified":1525427635329},{"_id":"public/tags/html/index.html","hash":"607607695b33d30153561ae6838dea7b7bc8cff6","modified":1525427635329},{"_id":"public/tags/problems/index.html","hash":"cc1210b33ca2402935d7ba3ea9f55fbc3b39e44f","modified":1525427635329},{"_id":"public/tags/NEO4J/index.html","hash":"2a3c4d1b0d030c43752771576ebd2885c9c3b8ed","modified":1525427635329},{"_id":"public/tags/tools/index.html","hash":"efea0233f5dcd5124d2a55eae1af9d2d244c94d2","modified":1525427635329},{"_id":"public/tags/args/index.html","hash":"409b0323a136762faec3a47cff7c02b0c5a78ecd","modified":1525427635329},{"_id":"public/tags/Decorator/index.html","hash":"7833f0e18d9d53a1c1b4e0e3f7ee42da1ed67cf7","modified":1525427635329},{"_id":"public/tags/Fibonacci/index.html","hash":"6fee711945865b88ce725d909c41a611dd772a54","modified":1525427635329},{"_id":"public/tags/regex/index.html","hash":"2b3a6b16d35db86c0d2249f864f2d0f151ae75c7","modified":1525427635329},{"_id":"public/tags/shadowsocks/index.html","hash":"898134849f5e7e8cc70cac5931d5dd728f66effc","modified":1525427635329},{"_id":"public/tags/hexo/index.html","hash":"120d0d3c4c7fcccf6fd1e8d5d0e01749d9859d10","modified":1525427635329},{"_id":"public/tags/MySQL/index.html","hash":"4124bf891d13b5f5578644f94e213c9361b8ea24","modified":1525427635329},{"_id":"public/tags/netSpeedMonitor/index.html","hash":"131360cb4cf600ed2ca4234e0d49df7c4bf245a5","modified":1525427635329},{"_id":"public/tags/I-O/index.html","hash":"59825633ef44c06f4e57e1b0738ae3064c597184","modified":1525427635329},{"_id":"public/tags/Euler/index.html","hash":"54c2bf9d2bcb2d324246deacb7319f5ec76293ed","modified":1525427635329},{"_id":"public/tags/Euler/page/2/index.html","hash":"16a613c6e3a867ec4ad39b0f48d789b895d255ec","modified":1525427635329},{"_id":"public/tags/Euler/page/3/index.html","hash":"432ea048dc22453fc18f3412120c5b7e01ff6a19","modified":1525424426386},{"_id":"public/index.html","hash":"6f0fe72648945f891fe989209ffefcb81cbf67e4","modified":1525427635329},{"_id":"public/page/2/index.html","hash":"aad85877418b0613c9286232f690804cde592b22","modified":1525427635329},{"_id":"public/page/3/index.html","hash":"83fa77b327710a71bf1d847bd1a33300efa7799b","modified":1525427635329},{"_id":"public/page/4/index.html","hash":"90cfdafb30a26b269b98345a073d8a5a05241a08","modified":1525427635329},{"_id":"public/page/5/index.html","hash":"2f94cef914d92bf5e0f3ec34cf9b80dc1e7248c8","modified":1525427635329},{"_id":"public/page/6/index.html","hash":"ab636061dbec51efe0558e88cda1bad6c3b740f8","modified":1525427635329},{"_id":"public/page/7/index.html","hash":"e89c62ea1545b7b78d9f02f0d336702623b80ebb","modified":1525427635329},{"_id":"public/page/9/index.html","hash":"da00030274cdec6dec1570aa4e936a8a54774bda","modified":1525427635329},{"_id":"public/page/11/index.html","hash":"112dd5bbd1c8c38da9255cf5eb7af5208f636bd8","modified":1525424426386},{"_id":"public/page/12/index.html","hash":"2f0386d08a38a6d9c8aa2351b85ba059151af245","modified":1525424426386},{"_id":"public/page/13/index.html","hash":"62d35d7ed2cced3995f67fc915649868c6f396b2","modified":1525424426386},{"_id":"public/page/14/index.html","hash":"d72c41dc3fbbba69128007f9f28c02ffb1608dc7","modified":1525424426386},{"_id":"public/categories/problems/index.html","hash":"59eed8e0619ac4899013a989ab118c0fa9b6e6fb","modified":1525427635329},{"_id":"public/categories/problems/page/2/index.html","hash":"1e1c740553448850af5dbb9af6cebbea5857f165","modified":1525427635329},{"_id":"public/categories/problems/page/3/index.html","hash":"45691fefdfc0c2c0f9f7155a05e6a821515447f8","modified":1525424426386},{"_id":"public/categories/C/index.html","hash":"82ee1b331d7b7bc6baf89cd3cdda9f5c6670df40","modified":1525427635329},{"_id":"public/categories/数据库/index.html","hash":"4e1efe1d99015148b0f14384b255b9c5baee8a97","modified":1525427635329},{"_id":"public/categories/Python/index.html","hash":"af471ef27c56df65d756bddb9fafb6f70ea23aa5","modified":1525427635329},{"_id":"public/categories/Python/page/2/index.html","hash":"33621cf61dde03129358fc1d86c8e082d48e9e20","modified":1525427635329},{"_id":"public/categories/Python/page/3/index.html","hash":"772685a9dbe420c5427a676782f30a66fe313bab","modified":1525427635329},{"_id":"public/categories/Python/page/4/index.html","hash":"3f33498e2194f0e20eabe2c40cdd798a9a41a43d","modified":1525424426386},{"_id":"public/categories/前端/index.html","hash":"01f89c86a9212e62238f0d2c4b81d0728ae4efe9","modified":1525427635329},{"_id":"public/categories/tools/index.html","hash":"40d926212677a00ed25abdac6e493248394e8079","modified":1525427635329},{"_id":"public/categories/tools/page/2/index.html","hash":"25b28cf01187a3a99f8d19a34be2771d86a935e2","modified":1525424426386},{"_id":"public/categories/Ruby/index.html","hash":"7f82d5f6c151158af8f24b05c77787bb12c4218d","modified":1525427635329},{"_id":"public/categories/Ruby/page/2/index.html","hash":"c67cfdd14b7c5cebc0a8faeffb6125522a628e81","modified":1525427635329},{"_id":"public/categories/杂记/index.html","hash":"76cc9e9b42a468f00408b64296560d5155d01042","modified":1525427635329},{"_id":"public/archives/index.html","hash":"8a9ba1b33fd9ac71afaae5376103ecf80288cde0","modified":1525427635329},{"_id":"public/archives/page/2/index.html","hash":"feb4a7f7772cb71ea15f3668659bd60c2973215d","modified":1525427635329},{"_id":"public/archives/page/3/index.html","hash":"ab1e281ebd43abef14605cc0f3753dbec6e9ecad","modified":1525427635329},{"_id":"public/archives/page/4/index.html","hash":"487d977632cd8087abb8a9e266fa589733483357","modified":1525427635329},{"_id":"public/archives/page/5/index.html","hash":"c450379679a565c701d61d5c4d8b272e74f27e0b","modified":1525427635329},{"_id":"public/archives/page/6/index.html","hash":"891e4dd7cea3db9a1c1b0a81201f119572556e2e","modified":1525427635329},{"_id":"public/archives/page/7/index.html","hash":"951aaf35207a47b43ea2ba00c24696d0f0b2a31a","modified":1525427635329},{"_id":"public/archives/page/8/index.html","hash":"b5ed34937f13e691e79e761bb3f43fd1dac7941f","modified":1525427635329},{"_id":"public/archives/page/9/index.html","hash":"d5c7517bb1826fe78035f3da4a3c61c4483aaca9","modified":1525427635329},{"_id":"public/archives/page/10/index.html","hash":"55e3671dcf486d087232db4e587e884d1f4f9514","modified":1525427635329},{"_id":"public/archives/page/11/index.html","hash":"e70af202c3b3b8d9f5e444a65723e0b6927921d4","modified":1525424426386},{"_id":"public/archives/page/12/index.html","hash":"3223ea491f1765fc71da175427fab844492b1b0a","modified":1525424426386},{"_id":"public/archives/page/13/index.html","hash":"0fdc23e24e533771b568c4fc708b14538fe8daab","modified":1525424426386},{"_id":"public/archives/page/14/index.html","hash":"3472673f8d113facbfc2dbc457a5024847724a2e","modified":1525424426386},{"_id":"public/archives/2016/index.html","hash":"83809bebf3aa37adbf2c7a4938a44f347667a12e","modified":1525427635329},{"_id":"public/archives/2016/09/index.html","hash":"83809bebf3aa37adbf2c7a4938a44f347667a12e","modified":1525427635329},{"_id":"public/archives/2017/index.html","hash":"532d9f37766c86fffa3faedfa3e0e61f78d799e1","modified":1525427635329},{"_id":"public/archives/2017/page/2/index.html","hash":"bf4b10cb84e8184a59b88e9a8d07af2986bdc298","modified":1525427635329},{"_id":"public/archives/2017/page/3/index.html","hash":"970c4e1581cfd4a0bcab7ad15b6ed2dfd696caf0","modified":1525427635329},{"_id":"public/archives/2017/page/4/index.html","hash":"60fa2ef0bacc44ff3febb5db79038f02f1abd862","modified":1525424426386},{"_id":"public/archives/2017/09/index.html","hash":"d8ccd9cae182b188759dd7f45e851b50f8e2d24c","modified":1525427635329},{"_id":"public/archives/2017/11/index.html","hash":"0f80d4716a130025bb5d2e0565ce8ca702051aba","modified":1525427635329},{"_id":"public/archives/2017/11/page/2/index.html","hash":"a1f601b9871504f6067cfd99faf579272fd39e94","modified":1525427635329},{"_id":"public/archives/2017/11/page/3/index.html","hash":"a2d875cbd47811cc89e85ec272e0cf1d3d3e64bb","modified":1525424426386},{"_id":"public/archives/2017/12/index.html","hash":"a3fc6dc2905b438935f67de113c008a3ff4e999f","modified":1525427635329},{"_id":"public/archives/2018/index.html","hash":"45c4f92c61566fee2edbde25e95f36e37f4e7c2c","modified":1525427635329},{"_id":"public/archives/2018/page/2/index.html","hash":"9a25ad66faab817b6a5a839f5166f97970751b36","modified":1525427635329},{"_id":"public/archives/2018/page/3/index.html","hash":"d5618fddcb79c7af9ecfe07220d0920fc6022db8","modified":1525427635329},{"_id":"public/archives/2018/page/4/index.html","hash":"f8a9ddbc5fde48c64f71050fa1808b02344b47b7","modified":1525427635329},{"_id":"public/archives/2018/page/5/index.html","hash":"686beb32bbfa1766ced6d54c5ef5eaf637c4b41e","modified":1525427635329},{"_id":"public/archives/2018/page/6/index.html","hash":"506fd650025a9cd5397d1255363175da3eeebaef","modified":1525427635329},{"_id":"public/archives/2018/page/7/index.html","hash":"ad1a27fddf8bfb5d5c191b7bd0cba3d2532b7578","modified":1525427635329},{"_id":"public/archives/2018/page/8/index.html","hash":"93a3d88aaeeeedc0e413e6e5f5d0920acae92e46","modified":1525424426386},{"_id":"public/archives/2018/page/9/index.html","hash":"6308e2342780b7acafe7831f3c03affdc2fa63a4","modified":1525424426386},{"_id":"public/archives/2018/page/10/index.html","hash":"3a2060a27e8c10718213b08d1324f5e384bea61b","modified":1525424426386},{"_id":"public/archives/2018/01/index.html","hash":"ece27efcef3562ef38eea38fafb385e3bff47a5c","modified":1525427635329},{"_id":"public/archives/2018/01/page/2/index.html","hash":"634c8cdfda399e238f5a8eabdf6c0824a1425702","modified":1525427635329},{"_id":"public/archives/2018/01/page/3/index.html","hash":"42e128fad7904f45d34dc8fd0a71ba7189c7e8eb","modified":1525424426386},{"_id":"public/archives/2018/02/index.html","hash":"9b9d3155c0bac6847aec70826ed1ff3c716d97f4","modified":1525427635329},{"_id":"public/archives/2018/03/index.html","hash":"d9cbdefbba6c50ece138e318f5d6a4896ce5d406","modified":1525427635329},{"_id":"public/archives/2018/03/page/2/index.html","hash":"3f804068322da0b0b3bfab2a2570405eda9ae687","modified":1525427635329},{"_id":"public/archives/2018/03/page/3/index.html","hash":"34f9300c4a7556e3ef98823937044919e4006d8b","modified":1525427635329},{"_id":"public/archives/2018/03/page/4/index.html","hash":"ccfbf276c0ff2002df2f51daef0965f70185b10b","modified":1525427635329},{"_id":"public/archives/2018/03/page/5/index.html","hash":"3f90ae0cf3b8d1f5fda0cc6db3ab0a921b1abf2b","modified":1525427635329},{"_id":"public/archives/2018/03/page/6/index.html","hash":"fedcf1f876f8189fe944d0da43777af26d84414c","modified":1525424426386},{"_id":"public/archives/2018/04/index.html","hash":"2c893707163a5c2c7c9e0a8692e03f1fcdea26f0","modified":1525427635329},{"_id":"public/archives/2018/05/index.html","hash":"9bb6575fef8231374f467730294c81668357f2b0","modified":1525427635329},{"_id":"public/2018/03/19/Ruby中的attr-accessor是什么/index.html","hash":"70759d94759441f28cccf1feab8b99a2315d39da","modified":1525427635329},{"_id":"public/2018/03/05/nginx+uwsgi在centos上部署Django应用/index.html","hash":"b3138e3ce83cdc76874a27bb7725b9e8803f4d1d","modified":1525427635329},{"_id":"public/2017/12/19/几个例子搞懂Python类里的self和-init/index.html","hash":"cee52d7aa1ad464c11abbdf4dd86efbbbdb1eecb","modified":1525427635329},{"_id":"public/2017/11/26/欧拉计划第十三题/index.html","hash":"329de92d9ef61d6a75d733e45b74d29663b7ecc0","modified":1525427635329},{"_id":"public/2017/11/19/欧拉计划第十题/index.html","hash":"c15abef7447a272715797a50559bcbf100b7fa20","modified":1525427635329},{"_id":"public/page/8/index.html","hash":"2c37d47ca47c99271e6f84677fd31282131aba21","modified":1525427635329},{"_id":"public/page/10/index.html","hash":"93ee35f6e4080fdf7d4981a3cfd8eef5763b8354","modified":1525427635329},{"_id":"public/img/BTCQR.png","hash":"7d1c80f953bfb6f0a37d432b04c936ea165bfd97","modified":1525424426402},{"_id":"public/img/alipay.svg","hash":"292ea040e865c1d0be259703ff850570b3bdfc97","modified":1525424426402},{"_id":"public/img/WeChatQR.png","hash":"8c41aca7883e5ff714c56556f5fff8e7e7c38093","modified":1525424426402},{"_id":"public/img/AliPayQR.png","hash":"7787b5d91cbf0e19a1260df24f7d949771c7d45b","modified":1525424426402},{"_id":"public/img/wechat.svg","hash":"30418295bed44bcc4b29076eb7deed49cf4d6c1c","modified":1525424426402},{"_id":"public/img/github.svg","hash":"90ba9a3b0dc19e70e742a39b014194f801e00f97","modified":1525424426402},{"_id":"public/img/paypal.svg","hash":"e916dea1c1bba1bc935510310f65b2c9328a401a","modified":1525424426402},{"_id":"public/img/bitcoin.svg","hash":"eeb2ee8cf44ba5c298baeed84bb90866f4814955","modified":1525424426402},{"_id":"public/img/like.svg","hash":"22a2754dc454d7b0321b70914fb2936b8d2ea8ab","modified":1525424426402},{"_id":"public/CNAME","hash":"2ad69c98d3f9d66d11dd147e11502be30ff74786","modified":1525424426402},{"_id":"public/favicon2.ico","hash":"043d8ead3c992b1a1342cbb4a0f4246123d4a9ab","modified":1525424426402},{"_id":"public/images/four.jpg","hash":"ee76b457df5445966732bce18413a08f67bd8a6e","modified":1525424426402},{"_id":"public/favicon.ico","hash":"c0df44b5255474beeda5ed7dabc06a7565cb0f4e","modified":1525424426433},{"_id":"public/css/donate.css","hash":"d0079ba8202d925a93ab1cb44f2087b81f476755","modified":1525424426433},{"_id":"public/donate/index.html","hash":"58260d8d8b5cfa3f46705914e6df164d9f08d9dd","modified":1525424426433},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1525424426433},{"_id":"public/js/donate.js","hash":"89f0b9d9d0c4fce183161d29c2a44aef750efb27","modified":1525424426433},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1525424426433},{"_id":"public/js/search.js","hash":"0c0630e2ef213701d393b041f10572e951a27985","modified":1525424426433},{"_id":"public/js/share.js","hash":"a2f9de374523dc7f2ddb90ed5f24b668c20d9272","modified":1525424426433},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1525424426433},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1525424426433},{"_id":"public/css/default.css","hash":"7fbb18b73b44ed11193739c55fce53a6f173cf68","modified":1525424426433},{"_id":"public/css/style.css","hash":"245a505f54194df908f71c4911a6e24a5d151421","modified":1525424426433},{"_id":"public/js/gitment.browser.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1525424426433},{"_id":"public/images/regex.jpg","hash":"590ea0ca269043336759b700da6c255ecd50e4c9","modified":1525424426449}],"Category":[{"name":"problems","_id":"cjgrpzq390004bcus580tykmh"},{"name":"C++","_id":"cjgrpzq39000abcusraehmgah"},{"name":"数据库","_id":"cjgrpzq39000gbcusvg906t8b"},{"name":"Python","_id":"cjgrpzq3p000mbcus963lcrpr"},{"name":"前端","_id":"cjgrpzq3p000ybcus5lm8qj49"},{"name":"tools","_id":"cjgrpzq44001gbcusq71tq0ky"},{"name":"Ruby","_id":"cjgrpzq4k002fbcusmaen7984"},{"name":"杂记","_id":"cjgrpzq5q004nbcus78i33b6a"}],"Data":[],"Page":[{"title":"关于我","_content":"\n一个还没女朋友的人\n\nEmail: [1147274920@qq.com](mailto:1147274920@qq.com)\n\nGithub: [https://www.github.com/capsbon](https://www.github.com/capsbon)\n\n\n\n\n\n\n\n","source":"about/index.md","raw":"---\ntitle: 关于我\n\n---\n\n一个还没女朋友的人\n\nEmail: [1147274920@qq.com](mailto:1147274920@qq.com)\n\nGithub: [https://www.github.com/capsbon](https://www.github.com/capsbon)\n\n\n\n\n\n\n\n","date":"2018-03-01T17:12:38.296Z","updated":"2018-03-01T17:12:38.296Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjgrq6jw90000s4usdax1kcba","content":"<p>一个还没女朋友的人</p>\n<p>Email: <a href=\"mailto:1147274920@qq.com\" target=\"_blank\" rel=\"noopener\">1147274920@qq.com</a></p>\n<p>Github: <a href=\"https://www.github.com/capsbon\" target=\"_blank\" rel=\"noopener\">https://www.github.com/capsbon</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>一个还没女朋友的人</p>\n<p>Email: <a href=\"mailto:1147274920@qq.com\" target=\"_blank\" rel=\"noopener\">1147274920@qq.com</a></p>\n<p>Github: <a href=\"https://www.github.com/capsbon\" target=\"_blank\" rel=\"noopener\">https://www.github.com/capsbon</a></p>\n"}],"Post":[{"title":"AppRegistryNotReady错误解决办法","date":"2018-03-04T16:03:45.000Z","_content":"\n问题背景：\n\n这是我在单独运行Django中某文件导入库时出现的问题\n\n导入models.py里的库\n\n```\nfrom vacancy.models import Vacancies\n```\n\n运行该文件（此处为parse_data.py时就会出现以下错误）\n\ndjango.core.exceptions.AppRegistryNotReady: Models aren't loaded yet.\n\n解决办法：\n\n在该文件（此处为parse_data.py）最上方加上以下代码\n\nimport os,django\n\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"mysite.settings\")\ndjango.setup()\n\n即可","source":"_posts/AppRegistryNotReady错误解决办法.md","raw":"---\ntitle: AppRegistryNotReady错误解决办法\ndate: 2018-03-05 00:03:45\ntags: Django\ncategories: \n---\n\n问题背景：\n\n这是我在单独运行Django中某文件导入库时出现的问题\n\n导入models.py里的库\n\n```\nfrom vacancy.models import Vacancies\n```\n\n运行该文件（此处为parse_data.py时就会出现以下错误）\n\ndjango.core.exceptions.AppRegistryNotReady: Models aren't loaded yet.\n\n解决办法：\n\n在该文件（此处为parse_data.py）最上方加上以下代码\n\nimport os,django\n\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"mysite.settings\")\ndjango.setup()\n\n即可","slug":"AppRegistryNotReady错误解决办法","published":1,"updated":"2018-03-06T15:42:38.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq2t0000bcusknx4h3ea","content":"<p>问题背景：</p>\n<p>这是我在单独运行Django中某文件导入库时出现的问题</p>\n<p>导入models.py里的库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from vacancy.models import Vacancies</span><br></pre></td></tr></table></figure>\n<p>运行该文件（此处为parse_data.py时就会出现以下错误）</p>\n<p>django.core.exceptions.AppRegistryNotReady: Models aren’t loaded yet.</p>\n<p>解决办法：</p>\n<p>在该文件（此处为parse_data.py）最上方加上以下代码</p>\n<p>import os,django</p>\n<p>os.environ.setdefault(“DJANGO_SETTINGS_MODULE”, “mysite.settings”)<br>django.setup()</p>\n<p>即可</p>\n","site":{"data":{}},"excerpt":"","more":"<p>问题背景：</p>\n<p>这是我在单独运行Django中某文件导入库时出现的问题</p>\n<p>导入models.py里的库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from vacancy.models import Vacancies</span><br></pre></td></tr></table></figure>\n<p>运行该文件（此处为parse_data.py时就会出现以下错误）</p>\n<p>django.core.exceptions.AppRegistryNotReady: Models aren’t loaded yet.</p>\n<p>解决办法：</p>\n<p>在该文件（此处为parse_data.py）最上方加上以下代码</p>\n<p>import os,django</p>\n<p>os.environ.setdefault(“DJANGO_SETTINGS_MODULE”, “mysite.settings”)<br>django.setup()</p>\n<p>即可</p>\n"},{"title":"Two Sum","date":"2017-09-17T13:55:54.000Z","_content":"","source":"_posts/1.Two Sum.md","raw":"---\ntitle: Two Sum\ndate: 2017-09-17 21:55:54\ntags: Leetcode\ncategories: problems\n---\n","slug":"1.Two Sum","published":1,"updated":"2018-03-01T17:20:47.753Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq2t0001bcusy2gmd8fd","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"C++中全局作用域符号::","date":"2018-01-23T15:31:42.000Z","_content":"\nc++ 中::可表示全局作用域符号\n\n```c++\nint i=10;\nint main(){\n\tint i=20,j=7;\n\tcout<<i+::i%c;\n\treturn 0;\n}\n```\n输出结果是23","source":"_posts/C++中全局作用域符号.md","raw":"---\ntitle: 'C++中全局作用域符号::'\ndate: 2018-01-23 23:31:42\ntags: \ncategories: C++\n---\n\nc++ 中::可表示全局作用域符号\n\n```c++\nint i=10;\nint main(){\n\tint i=20,j=7;\n\tcout<<i+::i%c;\n\treturn 0;\n}\n```\n输出结果是23","slug":"C++中全局作用域符号","published":1,"updated":"2018-03-12T15:36:32.681Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq390003bcusvgyt0zst","content":"<p>c++ 中::可表示全局作用域符号</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i=<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i=<span class=\"number\">20</span>,j=<span class=\"number\">7</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;i+::i%c;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果是23</p>\n","site":{"data":{}},"excerpt":"","more":"<p>c++ 中::可表示全局作用域符号</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i=<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i=<span class=\"number\">20</span>,j=<span class=\"number\">7</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">cout</span>&lt;&lt;i+::i%c;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果是23</p>\n"},{"title":"CentOs7离线安装MySql","date":"2018-03-12T15:46:05.000Z","_content":"\n1.下载安装mysql\n下载安装包及其他依赖包：\nmysql安装包\n下载地址：http://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.18-1.el7.x86_64.rpm-bundle.tar\n解压：\ntar -zxf mysql-5.7.16-1.el7.x86_64.rpm-bundle.tar\n得到包含以下文件的文件夹\nmysql-community-client-5.7.18-1.el7.x86_64.rpm\nmysql-community-common-5.7.18-1.el7.x86_64.rpm\nmysql-community-libs-5.7.18-1.el7.x86_64.rpm\nmysql-community-server-5.7.18-1.el7.x86_64.rpm\n\n依赖包：\nnumactl 软件包：\nnumactl-2.0.9-4.el7_2.x86_64.rpm\nnumactl-devel-2.0.9-4.el7_2.x86_64.rpm\nnumactl-libs-2.0.9-4.el7_2.x86_64.rpm\n其他相关支持：\nperl-Data-Dumper-2.145-3.el7.x86_64.rpm\nlibaio-0.3.109-12.el7.x86_64.rpm\n\n2.查询并卸载系统自带的Mariadb\n在CentOS 7上已经有一个mariadb 而这个会与 MySQL的mariadb发生冲突。\n所以需要将系统自带的mariadb卸载掉，然后使用mysql自带的mariadb。\n\n```\nrpm -qa | grep mariadb\n\nrpm -e --nodeps mariadb-libs-5.5.37-1.el7_0.x86_64 \n```\n\n其中mariadb-libs-5.5.37-1.el7_0.x86_64 是我刚刚用rpm -qa | grep mariadb查询出的结果。不同版本可能会有所不同。\n\n3.安装提供的依赖包\n\n安装 libaio-0.3.109-13.el7.x86_64.rpm\n$ rpm -ivh libaio-0.3.109-13.el7.x86_64.rpm\n\n安装numactl相关\n$rpm -ivh numactl* \n\n安装perl相关\n$rpm -ivh --nodeps perl-5.16.3-285.el7.x86_64.rpm\n$rpm -ivh --nodeps perl-Getopt-Long-2.40-2.el7.noarch.rpm\n$rpm -ivh --nodeps perl-Data-Dumper-2.145-3.el7.x86_64.rpm\n$rpm -ivh --nodeps perl-DBD-MySQL-4.023-5.el7.x86_64.rpm\n\n安装mysql\n$rpm -ivh mysql-community-*\n\n4.启动mysql服务\n\n```\nsystemctl start mysqld\n```\n\n5.设置开机启动\n\n```\nsystemctl enable mysqld\n\nsystemctl daemon-reload\n```\n\n6.修改mysql root 密码\n\ncat /var/log/mysqld.log | grep password\n查询结果为临时密码\n\n[root@localhost ~]# mysql -u root -p\n\nEnter password:\n\n输入临时密码 进入mysql命令行；\n\n设置root新密码newpass\n\n```\nSET PASSWORD FOR ‘root’@’localhost’ = PASSWORD(‘newpass’);\n```\n\n7.创建新用户并开启远程登陆\n\n创建远程访问用户user02\n\n```\ncreate user user02@’%’ identified by ‘password’;\n```\n\n\n授予user01管理dbdata的全部权限\n\n```\ngrant all privileges on dbdata.* to user02;\n```\n\n开启3306端口\n\n```\n[root@localhost ~]#firewall-cmd --zone=public --add-port=3306/tcp --permanent\n```\n\n注意：在centos 7中，默认的防火墙由iptables改为Firewall，默认是没有安装iptables的，并且Firewall默认是启动状态。\n\n```\n[root@localhost ~]#firewall-cmd –reload\n```\n\n8.配置默认编码为UTF-8\n\n修改/etc/my.cnf配置文件，在[mysqld]下添加编码配置，如下所示：\n\n```\n[mysqld]\n\ncharacter_set_server=utf8\n\ninit_connect=’SET NAMES utf8’\n```\n\n编辑保存完 重启mysql服务；\n\n```\n[root@localhost ~]# systemctl restart mysqld\n```\n\n","source":"_posts/CentOs7离线安装MySql.md","raw":"---\ntitle: CentOs7离线安装MySql\ndate: 2018-03-12 23:46:05\ntags:\ncategories: 数据库\n---\n\n1.下载安装mysql\n下载安装包及其他依赖包：\nmysql安装包\n下载地址：http://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.18-1.el7.x86_64.rpm-bundle.tar\n解压：\ntar -zxf mysql-5.7.16-1.el7.x86_64.rpm-bundle.tar\n得到包含以下文件的文件夹\nmysql-community-client-5.7.18-1.el7.x86_64.rpm\nmysql-community-common-5.7.18-1.el7.x86_64.rpm\nmysql-community-libs-5.7.18-1.el7.x86_64.rpm\nmysql-community-server-5.7.18-1.el7.x86_64.rpm\n\n依赖包：\nnumactl 软件包：\nnumactl-2.0.9-4.el7_2.x86_64.rpm\nnumactl-devel-2.0.9-4.el7_2.x86_64.rpm\nnumactl-libs-2.0.9-4.el7_2.x86_64.rpm\n其他相关支持：\nperl-Data-Dumper-2.145-3.el7.x86_64.rpm\nlibaio-0.3.109-12.el7.x86_64.rpm\n\n2.查询并卸载系统自带的Mariadb\n在CentOS 7上已经有一个mariadb 而这个会与 MySQL的mariadb发生冲突。\n所以需要将系统自带的mariadb卸载掉，然后使用mysql自带的mariadb。\n\n```\nrpm -qa | grep mariadb\n\nrpm -e --nodeps mariadb-libs-5.5.37-1.el7_0.x86_64 \n```\n\n其中mariadb-libs-5.5.37-1.el7_0.x86_64 是我刚刚用rpm -qa | grep mariadb查询出的结果。不同版本可能会有所不同。\n\n3.安装提供的依赖包\n\n安装 libaio-0.3.109-13.el7.x86_64.rpm\n$ rpm -ivh libaio-0.3.109-13.el7.x86_64.rpm\n\n安装numactl相关\n$rpm -ivh numactl* \n\n安装perl相关\n$rpm -ivh --nodeps perl-5.16.3-285.el7.x86_64.rpm\n$rpm -ivh --nodeps perl-Getopt-Long-2.40-2.el7.noarch.rpm\n$rpm -ivh --nodeps perl-Data-Dumper-2.145-3.el7.x86_64.rpm\n$rpm -ivh --nodeps perl-DBD-MySQL-4.023-5.el7.x86_64.rpm\n\n安装mysql\n$rpm -ivh mysql-community-*\n\n4.启动mysql服务\n\n```\nsystemctl start mysqld\n```\n\n5.设置开机启动\n\n```\nsystemctl enable mysqld\n\nsystemctl daemon-reload\n```\n\n6.修改mysql root 密码\n\ncat /var/log/mysqld.log | grep password\n查询结果为临时密码\n\n[root@localhost ~]# mysql -u root -p\n\nEnter password:\n\n输入临时密码 进入mysql命令行；\n\n设置root新密码newpass\n\n```\nSET PASSWORD FOR ‘root’@’localhost’ = PASSWORD(‘newpass’);\n```\n\n7.创建新用户并开启远程登陆\n\n创建远程访问用户user02\n\n```\ncreate user user02@’%’ identified by ‘password’;\n```\n\n\n授予user01管理dbdata的全部权限\n\n```\ngrant all privileges on dbdata.* to user02;\n```\n\n开启3306端口\n\n```\n[root@localhost ~]#firewall-cmd --zone=public --add-port=3306/tcp --permanent\n```\n\n注意：在centos 7中，默认的防火墙由iptables改为Firewall，默认是没有安装iptables的，并且Firewall默认是启动状态。\n\n```\n[root@localhost ~]#firewall-cmd –reload\n```\n\n8.配置默认编码为UTF-8\n\n修改/etc/my.cnf配置文件，在[mysqld]下添加编码配置，如下所示：\n\n```\n[mysqld]\n\ncharacter_set_server=utf8\n\ninit_connect=’SET NAMES utf8’\n```\n\n编辑保存完 重启mysql服务；\n\n```\n[root@localhost ~]# systemctl restart mysqld\n```\n\n","slug":"CentOs7离线安装MySql","published":1,"updated":"2018-03-12T16:19:22.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq390005bcus0dfnpnvl","content":"<p>1.下载安装mysql<br>下载安装包及其他依赖包：<br>mysql安装包<br>下载地址：<a href=\"http://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.18-1.el7.x86_64.rpm-bundle.tar\" target=\"_blank\" rel=\"noopener\">http://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.18-1.el7.x86_64.rpm-bundle.tar</a><br>解压：<br>tar -zxf mysql-5.7.16-1.el7.x86_64.rpm-bundle.tar<br>得到包含以下文件的文件夹<br>mysql-community-client-5.7.18-1.el7.x86_64.rpm<br>mysql-community-common-5.7.18-1.el7.x86_64.rpm<br>mysql-community-libs-5.7.18-1.el7.x86_64.rpm<br>mysql-community-server-5.7.18-1.el7.x86_64.rpm</p>\n<p>依赖包：<br>numactl 软件包：<br>numactl-2.0.9-4.el7_2.x86_64.rpm<br>numactl-devel-2.0.9-4.el7_2.x86_64.rpm<br>numactl-libs-2.0.9-4.el7_2.x86_64.rpm<br>其他相关支持：<br>perl-Data-Dumper-2.145-3.el7.x86_64.rpm<br>libaio-0.3.109-12.el7.x86_64.rpm</p>\n<p>2.查询并卸载系统自带的Mariadb<br>在CentOS 7上已经有一个mariadb 而这个会与 MySQL的mariadb发生冲突。<br>所以需要将系统自带的mariadb卸载掉，然后使用mysql自带的mariadb。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa | grep mariadb</span><br><span class=\"line\"></span><br><span class=\"line\">rpm -e --nodeps mariadb-libs-5.5.37-1.el7_0.x86_64</span><br></pre></td></tr></table></figure>\n<p>其中mariadb-libs-5.5.37-1.el7_0.x86_64 是我刚刚用rpm -qa | grep mariadb查询出的结果。不同版本可能会有所不同。</p>\n<p>3.安装提供的依赖包</p>\n<p>安装 libaio-0.3.109-13.el7.x86_64.rpm<br>$ rpm -ivh libaio-0.3.109-13.el7.x86_64.rpm</p>\n<p>安装numactl相关<br>$rpm -ivh numactl* </p>\n<p>安装perl相关<br>$rpm -ivh –nodeps perl-5.16.3-285.el7.x86_64.rpm<br>$rpm -ivh –nodeps perl-Getopt-Long-2.40-2.el7.noarch.rpm<br>$rpm -ivh –nodeps perl-Data-Dumper-2.145-3.el7.x86_64.rpm<br>$rpm -ivh –nodeps perl-DBD-MySQL-4.023-5.el7.x86_64.rpm</p>\n<p>安装mysql<br>$rpm -ivh mysql-community-*</p>\n<p>4.启动mysql服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mysqld</span><br></pre></td></tr></table></figure>\n<p>5.设置开机启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable mysqld</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n<p>6.修改mysql root 密码</p>\n<p>cat /var/log/mysqld.log | grep password<br>查询结果为临时密码</p>\n<p>[root@localhost ~]# mysql -u root -p</p>\n<p>Enter password:</p>\n<p>输入临时密码 进入mysql命令行；</p>\n<p>设置root新密码newpass</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET PASSWORD FOR ‘root’@’localhost’ = PASSWORD(‘newpass’);</span><br></pre></td></tr></table></figure>\n<p>7.创建新用户并开启远程登陆</p>\n<p>创建远程访问用户user02</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create user user02@’%’ identified by ‘password’;</span><br></pre></td></tr></table></figure>\n<p>授予user01管理dbdata的全部权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grant all privileges on dbdata.* to user02;</span><br></pre></td></tr></table></figure>\n<p>开启3306端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]#firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br></pre></td></tr></table></figure>\n<p>注意：在centos 7中，默认的防火墙由iptables改为Firewall，默认是没有安装iptables的，并且Firewall默认是启动状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]#firewall-cmd –reload</span><br></pre></td></tr></table></figure>\n<p>8.配置默认编码为UTF-8</p>\n<p>修改/etc/my.cnf配置文件，在[mysqld]下添加编码配置，如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\"></span><br><span class=\"line\">character_set_server=utf8</span><br><span class=\"line\"></span><br><span class=\"line\">init_connect=’SET NAMES utf8’</span><br></pre></td></tr></table></figure>\n<p>编辑保存完 重启mysql服务；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# systemctl restart mysqld</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>1.下载安装mysql<br>下载安装包及其他依赖包：<br>mysql安装包<br>下载地址：<a href=\"http://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.18-1.el7.x86_64.rpm-bundle.tar\" target=\"_blank\" rel=\"noopener\">http://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.18-1.el7.x86_64.rpm-bundle.tar</a><br>解压：<br>tar -zxf mysql-5.7.16-1.el7.x86_64.rpm-bundle.tar<br>得到包含以下文件的文件夹<br>mysql-community-client-5.7.18-1.el7.x86_64.rpm<br>mysql-community-common-5.7.18-1.el7.x86_64.rpm<br>mysql-community-libs-5.7.18-1.el7.x86_64.rpm<br>mysql-community-server-5.7.18-1.el7.x86_64.rpm</p>\n<p>依赖包：<br>numactl 软件包：<br>numactl-2.0.9-4.el7_2.x86_64.rpm<br>numactl-devel-2.0.9-4.el7_2.x86_64.rpm<br>numactl-libs-2.0.9-4.el7_2.x86_64.rpm<br>其他相关支持：<br>perl-Data-Dumper-2.145-3.el7.x86_64.rpm<br>libaio-0.3.109-12.el7.x86_64.rpm</p>\n<p>2.查询并卸载系统自带的Mariadb<br>在CentOS 7上已经有一个mariadb 而这个会与 MySQL的mariadb发生冲突。<br>所以需要将系统自带的mariadb卸载掉，然后使用mysql自带的mariadb。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -qa | grep mariadb</span><br><span class=\"line\"></span><br><span class=\"line\">rpm -e --nodeps mariadb-libs-5.5.37-1.el7_0.x86_64</span><br></pre></td></tr></table></figure>\n<p>其中mariadb-libs-5.5.37-1.el7_0.x86_64 是我刚刚用rpm -qa | grep mariadb查询出的结果。不同版本可能会有所不同。</p>\n<p>3.安装提供的依赖包</p>\n<p>安装 libaio-0.3.109-13.el7.x86_64.rpm<br>$ rpm -ivh libaio-0.3.109-13.el7.x86_64.rpm</p>\n<p>安装numactl相关<br>$rpm -ivh numactl* </p>\n<p>安装perl相关<br>$rpm -ivh –nodeps perl-5.16.3-285.el7.x86_64.rpm<br>$rpm -ivh –nodeps perl-Getopt-Long-2.40-2.el7.noarch.rpm<br>$rpm -ivh –nodeps perl-Data-Dumper-2.145-3.el7.x86_64.rpm<br>$rpm -ivh –nodeps perl-DBD-MySQL-4.023-5.el7.x86_64.rpm</p>\n<p>安装mysql<br>$rpm -ivh mysql-community-*</p>\n<p>4.启动mysql服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mysqld</span><br></pre></td></tr></table></figure>\n<p>5.设置开机启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable mysqld</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n<p>6.修改mysql root 密码</p>\n<p>cat /var/log/mysqld.log | grep password<br>查询结果为临时密码</p>\n<p>[root@localhost ~]# mysql -u root -p</p>\n<p>Enter password:</p>\n<p>输入临时密码 进入mysql命令行；</p>\n<p>设置root新密码newpass</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET PASSWORD FOR ‘root’@’localhost’ = PASSWORD(‘newpass’);</span><br></pre></td></tr></table></figure>\n<p>7.创建新用户并开启远程登陆</p>\n<p>创建远程访问用户user02</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create user user02@’%’ identified by ‘password’;</span><br></pre></td></tr></table></figure>\n<p>授予user01管理dbdata的全部权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grant all privileges on dbdata.* to user02;</span><br></pre></td></tr></table></figure>\n<p>开启3306端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]#firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br></pre></td></tr></table></figure>\n<p>注意：在centos 7中，默认的防火墙由iptables改为Firewall，默认是没有安装iptables的，并且Firewall默认是启动状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]#firewall-cmd –reload</span><br></pre></td></tr></table></figure>\n<p>8.配置默认编码为UTF-8</p>\n<p>修改/etc/my.cnf配置文件，在[mysqld]下添加编码配置，如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\"></span><br><span class=\"line\">character_set_server=utf8</span><br><span class=\"line\"></span><br><span class=\"line\">init_connect=’SET NAMES utf8’</span><br></pre></td></tr></table></figure>\n<p>编辑保存完 重启mysql服务；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# systemctl restart mysqld</span><br></pre></td></tr></table></figure>\n"},{"title":"CentOs7离线安装Python3.5","date":"2018-03-12T15:47:04.000Z","_content":"\n1.安装python3.5\n下载python包\nhttps://www.python.org/ftp/python/3.5.2/Python-3.5.2.tgz。\n\n```\ntar -xzvf Python-3.5.2.tgz # 解压缩包\ncd Python-3.5.2\nsudo ./configure --prefix=/usr/local/python3 # 指定创建的目录\nsudo make\nsudo make install\n```\n\n创建 python3 的软链接：\n\n```\nsudo ln -s /usr/local/python3/bin/python3 /usr/bin/python3\n```\n\n这样就可以通过 python 命令使用 Python 2，python3 来使用 Python 3。\n\n2.安装pip\n下载地址\nhttps://github.com/pypa/pip/archive/9.0.1.tar.gz\n\n```\ntar -zvxf 9.0.1 -C pip-9.0.1    # 解压文件\ncd pip-9.0.1\n```\n\n使用 Python 3 安装\n\n```\npython3 setup.py install\n```\n\n创建链接：\n\n```\nsudo ln -s /usr/local/python3/bin/pip /usr/bin/pip3\n```\n\n参考链接\n[Python3.5安装](http://notes.ehlxr.top/2017/01/07/CentOS-7-%E5%AE%89%E8%A3%85-Python3%E3%80%81pip3/#2-1-yum-%E5%AE%89%E8%A3%85)","source":"_posts/CentOs7离线安装Python3-5.md","raw":"---\ntitle: CentOs7离线安装Python3.5\ndate: 2018-03-12 23:47:04\ntags:\ncategories: Python\n---\n\n1.安装python3.5\n下载python包\nhttps://www.python.org/ftp/python/3.5.2/Python-3.5.2.tgz。\n\n```\ntar -xzvf Python-3.5.2.tgz # 解压缩包\ncd Python-3.5.2\nsudo ./configure --prefix=/usr/local/python3 # 指定创建的目录\nsudo make\nsudo make install\n```\n\n创建 python3 的软链接：\n\n```\nsudo ln -s /usr/local/python3/bin/python3 /usr/bin/python3\n```\n\n这样就可以通过 python 命令使用 Python 2，python3 来使用 Python 3。\n\n2.安装pip\n下载地址\nhttps://github.com/pypa/pip/archive/9.0.1.tar.gz\n\n```\ntar -zvxf 9.0.1 -C pip-9.0.1    # 解压文件\ncd pip-9.0.1\n```\n\n使用 Python 3 安装\n\n```\npython3 setup.py install\n```\n\n创建链接：\n\n```\nsudo ln -s /usr/local/python3/bin/pip /usr/bin/pip3\n```\n\n参考链接\n[Python3.5安装](http://notes.ehlxr.top/2017/01/07/CentOS-7-%E5%AE%89%E8%A3%85-Python3%E3%80%81pip3/#2-1-yum-%E5%AE%89%E8%A3%85)","slug":"CentOs7离线安装Python3-5","published":1,"updated":"2018-03-12T16:23:46.815Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq390006bcus04zymgqf","content":"<p>1.安装python3.5<br>下载python包<br><a href=\"https://www.python.org/ftp/python/3.5.2/Python-3.5.2.tgz。\" target=\"_blank\" rel=\"noopener\">https://www.python.org/ftp/python/3.5.2/Python-3.5.2.tgz。</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xzvf Python-3.5.2.tgz # 解压缩包</span><br><span class=\"line\">cd Python-3.5.2</span><br><span class=\"line\">sudo ./configure --prefix=/usr/local/python3 # 指定创建的目录</span><br><span class=\"line\">sudo make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n<p>创建 python3 的软链接：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /usr/local/python3/bin/python3 /usr/bin/python3</span><br></pre></td></tr></table></figure>\n<p>这样就可以通过 python 命令使用 Python 2，python3 来使用 Python 3。</p>\n<p>2.安装pip<br>下载地址<br><a href=\"https://github.com/pypa/pip/archive/9.0.1.tar.gz\" target=\"_blank\" rel=\"noopener\">https://github.com/pypa/pip/archive/9.0.1.tar.gz</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zvxf 9.0.1 -C pip-9.0.1    # 解压文件</span><br><span class=\"line\">cd pip-9.0.1</span><br></pre></td></tr></table></figure>\n<p>使用 Python 3 安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 setup.py install</span><br></pre></td></tr></table></figure>\n<p>创建链接：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /usr/local/python3/bin/pip /usr/bin/pip3</span><br></pre></td></tr></table></figure>\n<p>参考链接<br><a href=\"http://notes.ehlxr.top/2017/01/07/CentOS-7-%E5%AE%89%E8%A3%85-Python3%E3%80%81pip3/#2-1-yum-%E5%AE%89%E8%A3%85\" target=\"_blank\" rel=\"noopener\">Python3.5安装</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.安装python3.5<br>下载python包<br><a href=\"https://www.python.org/ftp/python/3.5.2/Python-3.5.2.tgz。\" target=\"_blank\" rel=\"noopener\">https://www.python.org/ftp/python/3.5.2/Python-3.5.2.tgz。</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xzvf Python-3.5.2.tgz # 解压缩包</span><br><span class=\"line\">cd Python-3.5.2</span><br><span class=\"line\">sudo ./configure --prefix=/usr/local/python3 # 指定创建的目录</span><br><span class=\"line\">sudo make</span><br><span class=\"line\">sudo make install</span><br></pre></td></tr></table></figure>\n<p>创建 python3 的软链接：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /usr/local/python3/bin/python3 /usr/bin/python3</span><br></pre></td></tr></table></figure>\n<p>这样就可以通过 python 命令使用 Python 2，python3 来使用 Python 3。</p>\n<p>2.安装pip<br>下载地址<br><a href=\"https://github.com/pypa/pip/archive/9.0.1.tar.gz\" target=\"_blank\" rel=\"noopener\">https://github.com/pypa/pip/archive/9.0.1.tar.gz</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zvxf 9.0.1 -C pip-9.0.1    # 解压文件</span><br><span class=\"line\">cd pip-9.0.1</span><br></pre></td></tr></table></figure>\n<p>使用 Python 3 安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 setup.py install</span><br></pre></td></tr></table></figure>\n<p>创建链接：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /usr/local/python3/bin/pip /usr/bin/pip3</span><br></pre></td></tr></table></figure>\n<p>参考链接<br><a href=\"http://notes.ehlxr.top/2017/01/07/CentOS-7-%E5%AE%89%E8%A3%85-Python3%E3%80%81pip3/#2-1-yum-%E5%AE%89%E8%A3%85\" target=\"_blank\" rel=\"noopener\">Python3.5安装</a></p>\n"},{"title":"CentOs7离线安装nginx","date":"2018-03-12T15:46:21.000Z","_content":"\n说明，以下的包可以谷歌得到，或者通过打开CentOs系统安装包.iso文件中的packages文件夹中找到\n\n1.安装gcc,提供如下的包\n\n```\ncpp-4.8.3-9.el7.x86_64.rpm\ngcc-4.8.3-9.el7.x86_64.rpm\nglibc-devel-2.17-78.el7.x86_64.rpm\nglibc-headers-2.17-78.el7.x86_64.rpm\nkernel-headers-3.10.0-229.el7.x86_64.rpm\nlibmpc-1.0.1-3.el7.x86_64.rpm\nmpfr-3.1.1-4.el7.x86_64.rpm\n```\n\n统一安装命令\n\n```\nrpm -Uvh *.rpm --nodeps --force\n```\n\n验证是否安装成功\n\n```\ngcc -v\n```\n\n2.安装pcre\n\n```\nrpm -ivh pcre-8.32-14.el7.x86_64.rpm\nrpm -ivh pcre-devel-8.32-14.el7.x86_64.rpm\n```\n\n3.安装libstdc++-devel（gcc-c++依赖）\n\n```\nrpm -ivh libstdc++-devel-4.8.3-9.el7.x86_64.rpm\n```\n\n4.安装gcc-c++\n\n```\nrpm -ivh gcc-c++-4.8.3-9.el7.x86_64.rpm\n```\n\n5.安装zlib-devel\n\n```\nrpm -ivh zlib-devel-1.2.7-13.el7.x86_64.rpm\n```\n\n6.下载安装nginx\n\n下载地址：[nginx-1.13.7.tar.gz](http://nginx.org/download/)\n\n```\ntar -zxvf nginx-1.13.7.tar.gz\n\ncd nginx-1.13.7\n\n./configure\n\nmake\n\nmake install\n```\n\n7.测试是否安装成功\n启动nginx\n\n```\n/usr/sbin/nginx\n```\n\n用ps aux来查看nginx是否启动\n\n```\nps aux|grep nginx\n```\n\n8.配置开机启动\n\n```\nsystemctl enable nginx.service\n```\n\n","source":"_posts/CentOs7离线安装nginx.md","raw":"---\ntitle: CentOs7离线安装nginx\ndate: 2018-03-12 23:46:21\ntags: Linux\ncategories: \n---\n\n说明，以下的包可以谷歌得到，或者通过打开CentOs系统安装包.iso文件中的packages文件夹中找到\n\n1.安装gcc,提供如下的包\n\n```\ncpp-4.8.3-9.el7.x86_64.rpm\ngcc-4.8.3-9.el7.x86_64.rpm\nglibc-devel-2.17-78.el7.x86_64.rpm\nglibc-headers-2.17-78.el7.x86_64.rpm\nkernel-headers-3.10.0-229.el7.x86_64.rpm\nlibmpc-1.0.1-3.el7.x86_64.rpm\nmpfr-3.1.1-4.el7.x86_64.rpm\n```\n\n统一安装命令\n\n```\nrpm -Uvh *.rpm --nodeps --force\n```\n\n验证是否安装成功\n\n```\ngcc -v\n```\n\n2.安装pcre\n\n```\nrpm -ivh pcre-8.32-14.el7.x86_64.rpm\nrpm -ivh pcre-devel-8.32-14.el7.x86_64.rpm\n```\n\n3.安装libstdc++-devel（gcc-c++依赖）\n\n```\nrpm -ivh libstdc++-devel-4.8.3-9.el7.x86_64.rpm\n```\n\n4.安装gcc-c++\n\n```\nrpm -ivh gcc-c++-4.8.3-9.el7.x86_64.rpm\n```\n\n5.安装zlib-devel\n\n```\nrpm -ivh zlib-devel-1.2.7-13.el7.x86_64.rpm\n```\n\n6.下载安装nginx\n\n下载地址：[nginx-1.13.7.tar.gz](http://nginx.org/download/)\n\n```\ntar -zxvf nginx-1.13.7.tar.gz\n\ncd nginx-1.13.7\n\n./configure\n\nmake\n\nmake install\n```\n\n7.测试是否安装成功\n启动nginx\n\n```\n/usr/sbin/nginx\n```\n\n用ps aux来查看nginx是否启动\n\n```\nps aux|grep nginx\n```\n\n8.配置开机启动\n\n```\nsystemctl enable nginx.service\n```\n\n","slug":"CentOs7离线安装nginx","published":1,"updated":"2018-03-12T16:45:10.066Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq390009bcusw83khvkl","content":"<p>说明，以下的包可以谷歌得到，或者通过打开CentOs系统安装包.iso文件中的packages文件夹中找到</p>\n<p>1.安装gcc,提供如下的包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cpp-4.8.3-9.el7.x86_64.rpm</span><br><span class=\"line\">gcc-4.8.3-9.el7.x86_64.rpm</span><br><span class=\"line\">glibc-devel-2.17-78.el7.x86_64.rpm</span><br><span class=\"line\">glibc-headers-2.17-78.el7.x86_64.rpm</span><br><span class=\"line\">kernel-headers-3.10.0-229.el7.x86_64.rpm</span><br><span class=\"line\">libmpc-1.0.1-3.el7.x86_64.rpm</span><br><span class=\"line\">mpfr-3.1.1-4.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>\n<p>统一安装命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -Uvh *.rpm --nodeps --force</span><br></pre></td></tr></table></figure>\n<p>验证是否安装成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -v</span><br></pre></td></tr></table></figure>\n<p>2.安装pcre</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh pcre-8.32-14.el7.x86_64.rpm</span><br><span class=\"line\">rpm -ivh pcre-devel-8.32-14.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>\n<p>3.安装libstdc++-devel（gcc-c++依赖）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh libstdc++-devel-4.8.3-9.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>\n<p>4.安装gcc-c++</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh gcc-c++-4.8.3-9.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>\n<p>5.安装zlib-devel</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh zlib-devel-1.2.7-13.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>\n<p>6.下载安装nginx</p>\n<p>下载地址：<a href=\"http://nginx.org/download/\" target=\"_blank\" rel=\"noopener\">nginx-1.13.7.tar.gz</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf nginx-1.13.7.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">cd nginx-1.13.7</span><br><span class=\"line\"></span><br><span class=\"line\">./configure</span><br><span class=\"line\"></span><br><span class=\"line\">make</span><br><span class=\"line\"></span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n<p>7.测试是否安装成功<br>启动nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/sbin/nginx</span><br></pre></td></tr></table></figure>\n<p>用ps aux来查看nginx是否启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux|grep nginx</span><br></pre></td></tr></table></figure>\n<p>8.配置开机启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable nginx.service</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>说明，以下的包可以谷歌得到，或者通过打开CentOs系统安装包.iso文件中的packages文件夹中找到</p>\n<p>1.安装gcc,提供如下的包</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cpp-4.8.3-9.el7.x86_64.rpm</span><br><span class=\"line\">gcc-4.8.3-9.el7.x86_64.rpm</span><br><span class=\"line\">glibc-devel-2.17-78.el7.x86_64.rpm</span><br><span class=\"line\">glibc-headers-2.17-78.el7.x86_64.rpm</span><br><span class=\"line\">kernel-headers-3.10.0-229.el7.x86_64.rpm</span><br><span class=\"line\">libmpc-1.0.1-3.el7.x86_64.rpm</span><br><span class=\"line\">mpfr-3.1.1-4.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>\n<p>统一安装命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -Uvh *.rpm --nodeps --force</span><br></pre></td></tr></table></figure>\n<p>验证是否安装成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -v</span><br></pre></td></tr></table></figure>\n<p>2.安装pcre</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh pcre-8.32-14.el7.x86_64.rpm</span><br><span class=\"line\">rpm -ivh pcre-devel-8.32-14.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>\n<p>3.安装libstdc++-devel（gcc-c++依赖）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh libstdc++-devel-4.8.3-9.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>\n<p>4.安装gcc-c++</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh gcc-c++-4.8.3-9.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>\n<p>5.安装zlib-devel</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm -ivh zlib-devel-1.2.7-13.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>\n<p>6.下载安装nginx</p>\n<p>下载地址：<a href=\"http://nginx.org/download/\" target=\"_blank\" rel=\"noopener\">nginx-1.13.7.tar.gz</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf nginx-1.13.7.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">cd nginx-1.13.7</span><br><span class=\"line\"></span><br><span class=\"line\">./configure</span><br><span class=\"line\"></span><br><span class=\"line\">make</span><br><span class=\"line\"></span><br><span class=\"line\">make install</span><br></pre></td></tr></table></figure>\n<p>7.测试是否安装成功<br>启动nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/sbin/nginx</span><br></pre></td></tr></table></figure>\n<p>用ps aux来查看nginx是否启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps aux|grep nginx</span><br></pre></td></tr></table></figure>\n<p>8.配置开机启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable nginx.service</span><br></pre></td></tr></table></figure>\n"},{"title":"CentOs7离线安装JDK8","date":"2018-03-12T15:46:48.000Z","_content":"\n1\n下载jdk8安装包\nhttp://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\n上传到linux服务器后执行\n\n```\ntar -xvf jdk-8u161-linux-x64.tar.gz -C /usr/local\n```\n\n解压到当前目录,此时目录/usr/java\n2.\n添加到环境变量\n\n```\nvi /etc/profile\n```\n\n在export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL下面添加如下代码：\n\n```\nexport JAVA_HOME=/usr/local/jdk1.8.0_111\nexport PATH=$JAVA_HOME/bin:$PATH\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n```\n\n3.\n使配置生效\n\n```\nsource /etc/profile\n```\n\n4.\n\n查看安装是否成功\n\n```\njava -version\n```\n\n","source":"_posts/CentOs7离线安装JDK8.md","raw":"---\ntitle: CentOs7离线安装JDK8\ndate: 2018-03-12 23:46:48\ntags: Linux\ncategories: \n---\n\n1\n下载jdk8安装包\nhttp://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\n上传到linux服务器后执行\n\n```\ntar -xvf jdk-8u161-linux-x64.tar.gz -C /usr/local\n```\n\n解压到当前目录,此时目录/usr/java\n2.\n添加到环境变量\n\n```\nvi /etc/profile\n```\n\n在export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL下面添加如下代码：\n\n```\nexport JAVA_HOME=/usr/local/jdk1.8.0_111\nexport PATH=$JAVA_HOME/bin:$PATH\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n```\n\n3.\n使配置生效\n\n```\nsource /etc/profile\n```\n\n4.\n\n查看安装是否成功\n\n```\njava -version\n```\n\n","slug":"CentOs7离线安装JDK8","published":1,"updated":"2018-03-12T16:45:26.698Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq39000bbcuso916gtpq","content":"<p>1<br>下载jdk8安装包<br><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a><br>上传到linux服务器后执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvf jdk-8u161-linux-x64.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>\n<p>解压到当前目录,此时目录/usr/java<br>2.<br>添加到环境变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/profile</span><br></pre></td></tr></table></figure>\n<p>在export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL下面添加如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/usr/local/jdk1.8.0_111</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br></pre></td></tr></table></figure>\n<p>3.<br>使配置生效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n<p>4.</p>\n<p>查看安装是否成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>1<br>下载jdk8安装包<br><a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a><br>上传到linux服务器后执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvf jdk-8u161-linux-x64.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>\n<p>解压到当前目录,此时目录/usr/java<br>2.<br>添加到环境变量</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/profile</span><br></pre></td></tr></table></figure>\n<p>在export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL下面添加如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/usr/local/jdk1.8.0_111</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br></pre></td></tr></table></figure>\n<p>3.<br>使配置生效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n<p>4.</p>\n<p>查看安装是否成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n"},{"title":"Django简单登陆如何创建用户密码","date":"2018-03-04T15:42:47.000Z","_content":"\n由于项目要求实现一个简单的登陆页面，然后搜索得知Django本身就有一些验证登陆的\n\n类，于是去看官方文档，如下：\n\n### Creating users[¶](https://docs.djangoproject.com/en/2.0/topics/auth/default/#creating-users)\n\nThe most direct way to create users is to use the included [`create_user()`](https://docs.djangoproject.com/en/2.0/ref/contrib/auth/#django.contrib.auth.models.UserManager.create_user) helper function:\n\n```\n>>> from django.contrib.auth.models import User\n>>> user = User.objects.create_user('john', 'lennon@thebeatles.com', 'johnpassword')\n# At this point, user is a User object that has already been saved\n# to the database. You can continue to change its attributes\n# if you want to change other fields.\n>>> user.last_name = 'Lennon'\n>>> user.save()\n```\n\n打开python交互页面，输入\n\nfrom django.contrib.auth.models import User\n\nuser = User.objects.create_user('john', 'lennon@thebeatles.com', 'johnpassword')\n\n不对，出错，App not registered之类的错误，\n\n可能不是Python交互页面，搜了一堆文章就是没有说是在什么情况下输入上面两行代码来创建\n\n用户，皇天不负有心人，终于让我找到了。\n\n需要输入\n\npython manage.py shell \n\n进入django的终端:\n\n然后输入\n\nfrom django.contrib.auth.models import User\n\nuser = User.objects.create_user('john', 'lennon@thebeatles.com', 'johnpassword')\n\n来创建用户，接下来可以看我github里关于Danjo的小项目，里面有关于登陆页面的\n\n简单实现：\n\nhttps://github.com/capsbon/django_xml\n\n","source":"_posts/Django简单登陆如何创建用户密码.md","raw":"---\ntitle: Django简单登陆如何创建用户密码\ndate: 2018-03-04 23:42:47\ntags: Django\ncategories: Python\n---\n\n由于项目要求实现一个简单的登陆页面，然后搜索得知Django本身就有一些验证登陆的\n\n类，于是去看官方文档，如下：\n\n### Creating users[¶](https://docs.djangoproject.com/en/2.0/topics/auth/default/#creating-users)\n\nThe most direct way to create users is to use the included [`create_user()`](https://docs.djangoproject.com/en/2.0/ref/contrib/auth/#django.contrib.auth.models.UserManager.create_user) helper function:\n\n```\n>>> from django.contrib.auth.models import User\n>>> user = User.objects.create_user('john', 'lennon@thebeatles.com', 'johnpassword')\n# At this point, user is a User object that has already been saved\n# to the database. You can continue to change its attributes\n# if you want to change other fields.\n>>> user.last_name = 'Lennon'\n>>> user.save()\n```\n\n打开python交互页面，输入\n\nfrom django.contrib.auth.models import User\n\nuser = User.objects.create_user('john', 'lennon@thebeatles.com', 'johnpassword')\n\n不对，出错，App not registered之类的错误，\n\n可能不是Python交互页面，搜了一堆文章就是没有说是在什么情况下输入上面两行代码来创建\n\n用户，皇天不负有心人，终于让我找到了。\n\n需要输入\n\npython manage.py shell \n\n进入django的终端:\n\n然后输入\n\nfrom django.contrib.auth.models import User\n\nuser = User.objects.create_user('john', 'lennon@thebeatles.com', 'johnpassword')\n\n来创建用户，接下来可以看我github里关于Danjo的小项目，里面有关于登陆页面的\n\n简单实现：\n\nhttps://github.com/capsbon/django_xml\n\n","slug":"Django简单登陆如何创建用户密码","published":1,"updated":"2018-03-04T15:53:32.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq39000dbcuszl2a9u9p","content":"<p>由于项目要求实现一个简单的登陆页面，然后搜索得知Django本身就有一些验证登陆的</p>\n<p>类，于是去看官方文档，如下：</p>\n<h3 id=\"Creating-users¶\"><a href=\"#Creating-users¶\" class=\"headerlink\" title=\"Creating users¶\"></a>Creating users<a href=\"https://docs.djangoproject.com/en/2.0/topics/auth/default/#creating-users\" target=\"_blank\" rel=\"noopener\">¶</a></h3><p>The most direct way to create users is to use the included <a href=\"https://docs.djangoproject.com/en/2.0/ref/contrib/auth/#django.contrib.auth.models.UserManager.create_user\" target=\"_blank\" rel=\"noopener\"><code>create_user()</code></a> helper function:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; from django.contrib.auth.models import User</span><br><span class=\"line\">&gt;&gt;&gt; user = User.objects.create_user(&apos;john&apos;, &apos;lennon@thebeatles.com&apos;, &apos;johnpassword&apos;)</span><br><span class=\"line\"># At this point, user is a User object that has already been saved</span><br><span class=\"line\"># to the database. You can continue to change its attributes</span><br><span class=\"line\"># if you want to change other fields.</span><br><span class=\"line\">&gt;&gt;&gt; user.last_name = &apos;Lennon&apos;</span><br><span class=\"line\">&gt;&gt;&gt; user.save()</span><br></pre></td></tr></table></figure>\n<p>打开python交互页面，输入</p>\n<p>from django.contrib.auth.models import User</p>\n<p>user = User.objects.create_user(‘john’, <a href=\"mailto:&#39;lennon@thebeatles.com\" target=\"_blank\" rel=\"noopener\">&#39;lennon@thebeatles.com</a>‘, ‘johnpassword’)</p>\n<p>不对，出错，App not registered之类的错误，</p>\n<p>可能不是Python交互页面，搜了一堆文章就是没有说是在什么情况下输入上面两行代码来创建</p>\n<p>用户，皇天不负有心人，终于让我找到了。</p>\n<p>需要输入</p>\n<p>python manage.py shell </p>\n<p>进入django的终端:</p>\n<p>然后输入</p>\n<p>from django.contrib.auth.models import User</p>\n<p>user = User.objects.create_user(‘john’, <a href=\"mailto:&#39;lennon@thebeatles.com\" target=\"_blank\" rel=\"noopener\">&#39;lennon@thebeatles.com</a>‘, ‘johnpassword’)</p>\n<p>来创建用户，接下来可以看我github里关于Danjo的小项目，里面有关于登陆页面的</p>\n<p>简单实现：</p>\n<p><a href=\"https://github.com/capsbon/django_xml\" target=\"_blank\" rel=\"noopener\">https://github.com/capsbon/django_xml</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>由于项目要求实现一个简单的登陆页面，然后搜索得知Django本身就有一些验证登陆的</p>\n<p>类，于是去看官方文档，如下：</p>\n<h3 id=\"Creating-users¶\"><a href=\"#Creating-users¶\" class=\"headerlink\" title=\"Creating users¶\"></a>Creating users<a href=\"https://docs.djangoproject.com/en/2.0/topics/auth/default/#creating-users\" target=\"_blank\" rel=\"noopener\">¶</a></h3><p>The most direct way to create users is to use the included <a href=\"https://docs.djangoproject.com/en/2.0/ref/contrib/auth/#django.contrib.auth.models.UserManager.create_user\" target=\"_blank\" rel=\"noopener\"><code>create_user()</code></a> helper function:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; from django.contrib.auth.models import User</span><br><span class=\"line\">&gt;&gt;&gt; user = User.objects.create_user(&apos;john&apos;, &apos;lennon@thebeatles.com&apos;, &apos;johnpassword&apos;)</span><br><span class=\"line\"># At this point, user is a User object that has already been saved</span><br><span class=\"line\"># to the database. You can continue to change its attributes</span><br><span class=\"line\"># if you want to change other fields.</span><br><span class=\"line\">&gt;&gt;&gt; user.last_name = &apos;Lennon&apos;</span><br><span class=\"line\">&gt;&gt;&gt; user.save()</span><br></pre></td></tr></table></figure>\n<p>打开python交互页面，输入</p>\n<p>from django.contrib.auth.models import User</p>\n<p>user = User.objects.create_user(‘john’, <a href=\"mailto:&#39;lennon@thebeatles.com\" target=\"_blank\" rel=\"noopener\">&#39;lennon@thebeatles.com</a>‘, ‘johnpassword’)</p>\n<p>不对，出错，App not registered之类的错误，</p>\n<p>可能不是Python交互页面，搜了一堆文章就是没有说是在什么情况下输入上面两行代码来创建</p>\n<p>用户，皇天不负有心人，终于让我找到了。</p>\n<p>需要输入</p>\n<p>python manage.py shell </p>\n<p>进入django的终端:</p>\n<p>然后输入</p>\n<p>from django.contrib.auth.models import User</p>\n<p>user = User.objects.create_user(‘john’, <a href=\"mailto:&#39;lennon@thebeatles.com\" target=\"_blank\" rel=\"noopener\">&#39;lennon@thebeatles.com</a>‘, ‘johnpassword’)</p>\n<p>来创建用户，接下来可以看我github里关于Danjo的小项目，里面有关于登陆页面的</p>\n<p>简单实现：</p>\n<p><a href=\"https://github.com/capsbon/django_xml\" target=\"_blank\" rel=\"noopener\">https://github.com/capsbon/django_xml</a></p>\n"},{"title":"Html标签英文原称","date":"2016-09-30T08:37:46.000Z","_content":"### Html\n---\n**var** variable\n**dd** define list define       \n**dt** define list title\n**div** division  \n**dl** define list\n**li** list item  \n**ol** ordered list同理**ul** unordered list\n**p** paragraph  \n**href** hypertext reference\n**abbr** abbreviation\n**td** table data cell 表中的数据单元\n**tr** table row 表行\n**th** table header cell 表头单元格\n**colspan** column span 栏跨度\n\n","source":"_posts/Html标签的英文原称.md","raw":"---\ntitle: Html标签英文原称\ndate: 2016-09-30 16:37:46\ntags: html\ncategories: 前端\n---\n### Html\n---\n**var** variable\n**dd** define list define       \n**dt** define list title\n**div** division  \n**dl** define list\n**li** list item  \n**ol** ordered list同理**ul** unordered list\n**p** paragraph  \n**href** hypertext reference\n**abbr** abbreviation\n**td** table data cell 表中的数据单元\n**tr** table row 表行\n**th** table header cell 表头单元格\n**colspan** column span 栏跨度\n\n","slug":"Html标签的英文原称","published":1,"updated":"2018-03-12T15:31:49.931Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq3p000hbcuszwvkq4g1","content":"<h3 id=\"Html\"><a href=\"#Html\" class=\"headerlink\" title=\"Html\"></a>Html</h3><hr>\n<p><strong>var</strong> variable<br><strong>dd</strong> define list define<br><strong>dt</strong> define list title<br><strong>div</strong> division<br><strong>dl</strong> define list<br><strong>li</strong> list item<br><strong>ol</strong> ordered list同理<strong>ul</strong> unordered list<br><strong>p</strong> paragraph<br><strong>href</strong> hypertext reference<br><strong>abbr</strong> abbreviation<br><strong>td</strong> table data cell 表中的数据单元<br><strong>tr</strong> table row 表行<br><strong>th</strong> table header cell 表头单元格<br><strong>colspan</strong> column span 栏跨度</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Html\"><a href=\"#Html\" class=\"headerlink\" title=\"Html\"></a>Html</h3><hr>\n<p><strong>var</strong> variable<br><strong>dd</strong> define list define<br><strong>dt</strong> define list title<br><strong>div</strong> division<br><strong>dl</strong> define list<br><strong>li</strong> list item<br><strong>ol</strong> ordered list同理<strong>ul</strong> unordered list<br><strong>p</strong> paragraph<br><strong>href</strong> hypertext reference<br><strong>abbr</strong> abbreviation<br><strong>td</strong> table data cell 表中的数据单元<br><strong>tr</strong> table row 表行<br><strong>th</strong> table header cell 表头单元格<br><strong>colspan</strong> column span 栏跨度</p>\n"},{"title":"KeyErrorSQLALCHEMY_TRACK_MODIFICATIONS错误解决","date":"2018-03-12T16:39:00.000Z","_content":"\n运行flask项目中出现\n\n SQLAlchemy：KeyError：'SQLALCHEMY_TRACK_MODIFICATIONS'错误\n\n原因：在代码中有两个app = Flask(__name__)可能会导致此问题。 \n\n删掉其中一个换成导入形式的即可","source":"_posts/KeyErrorSQLALCHEMY_TRACK-MODIFICATIONS错误解决.md","raw":"---\ntitle: KeyErrorSQLALCHEMY_TRACK_MODIFICATIONS错误解决\ndate: 2018-03-13 00:39:00\ntags:\ncategories: Python\n---\n\n运行flask项目中出现\n\n SQLAlchemy：KeyError：'SQLALCHEMY_TRACK_MODIFICATIONS'错误\n\n原因：在代码中有两个app = Flask(__name__)可能会导致此问题。 \n\n删掉其中一个换成导入形式的即可","slug":"KeyErrorSQLALCHEMY_TRACK-MODIFICATIONS错误解决","published":1,"updated":"2018-03-12T16:41:39.400Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq3p000jbcusj9gdfw40","content":"<p>运行flask项目中出现</p>\n<p> SQLAlchemy：KeyError：’SQLALCHEMY_TRACK_MODIFICATIONS’错误</p>\n<p>原因：在代码中有两个app = Flask(<strong>name</strong>)可能会导致此问题。 </p>\n<p>删掉其中一个换成导入形式的即可</p>\n","site":{"data":{}},"excerpt":"","more":"<p>运行flask项目中出现</p>\n<p> SQLAlchemy：KeyError：’SQLALCHEMY_TRACK_MODIFICATIONS’错误</p>\n<p>原因：在代码中有两个app = Flask(<strong>name</strong>)可能会导致此问题。 </p>\n<p>删掉其中一个换成导入形式的即可</p>\n"},{"title":"Linux上安装Django的几种方法","date":"2018-03-06T14:55:42.000Z","_content":"\n1.在线安装\n\n```\npip install django\n```\n\n2.源码安装\n\nⅠ.访问[django下载页面](https://www.djangoproject.com/download/)上下载tar.gz源码包：\n\n输入以下命令并安装：\n\n```\ntar xzvf Django-X.Y.tar.gz    # 解压下载包\ncd Django-X.Y                 # 进入 Django 目录\npython setup.py install       # 执行安装命令\n```\n\nⅡ.github上下载zip源码\n\n```\nunzip django-master.zip -d saveDir      #linux上解压zip文件到saveDir文件夹\n\npython setup.py install       # 执行安装命令\n```\n\n","source":"_posts/Linux上安装Django的几种方法.md","raw":"---\ntitle: Linux上安装Django的几种方法\ndate: 2018-03-06 22:55:42\ntags: \n- Django\n- Linux\ncategories: \n---\n\n1.在线安装\n\n```\npip install django\n```\n\n2.源码安装\n\nⅠ.访问[django下载页面](https://www.djangoproject.com/download/)上下载tar.gz源码包：\n\n输入以下命令并安装：\n\n```\ntar xzvf Django-X.Y.tar.gz    # 解压下载包\ncd Django-X.Y                 # 进入 Django 目录\npython setup.py install       # 执行安装命令\n```\n\nⅡ.github上下载zip源码\n\n```\nunzip django-master.zip -d saveDir      #linux上解压zip文件到saveDir文件夹\n\npython setup.py install       # 执行安装命令\n```\n\n","slug":"Linux上安装Django的几种方法","published":1,"updated":"2018-03-06T15:21:18.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq3p000obcusfa6561rv","content":"<p>1.在线安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install django</span><br></pre></td></tr></table></figure>\n<p>2.源码安装</p>\n<p>Ⅰ.访问<a href=\"https://www.djangoproject.com/download/\" target=\"_blank\" rel=\"noopener\">django下载页面</a>上下载tar.gz源码包：</p>\n<p>输入以下命令并安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xzvf Django-X.Y.tar.gz    # 解压下载包</span><br><span class=\"line\">cd Django-X.Y                 # 进入 Django 目录</span><br><span class=\"line\">python setup.py install       # 执行安装命令</span><br></pre></td></tr></table></figure>\n<p>Ⅱ.github上下载zip源码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip django-master.zip -d saveDir      #linux上解压zip文件到saveDir文件夹</span><br><span class=\"line\"></span><br><span class=\"line\">python setup.py install       # 执行安装命令</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>1.在线安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install django</span><br></pre></td></tr></table></figure>\n<p>2.源码安装</p>\n<p>Ⅰ.访问<a href=\"https://www.djangoproject.com/download/\" target=\"_blank\" rel=\"noopener\">django下载页面</a>上下载tar.gz源码包：</p>\n<p>输入以下命令并安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xzvf Django-X.Y.tar.gz    # 解压下载包</span><br><span class=\"line\">cd Django-X.Y                 # 进入 Django 目录</span><br><span class=\"line\">python setup.py install       # 执行安装命令</span><br></pre></td></tr></table></figure>\n<p>Ⅱ.github上下载zip源码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip django-master.zip -d saveDir      #linux上解压zip文件到saveDir文件夹</span><br><span class=\"line\"></span><br><span class=\"line\">python setup.py install       # 执行安装命令</span><br></pre></td></tr></table></figure>\n"},{"title":"Linux下如何导出MySQL数据库","date":"2018-03-04T15:57:49.000Z","_content":"\n命令行下执行\n\nmysqldump -u userName -p  dabaseName  > fileName.sql\n\n其中fileName.sql最好加上路径名,不加则导出到当前目录","source":"_posts/Linux下如何导出MySQL数据库.md","raw":"---\ntitle: Linux下如何导出MySQL数据库\ndate: 2018-03-04 23:57:49\ntags: Linux\ncategories: 数据库\n---\n\n命令行下执行\n\nmysqldump -u userName -p  dabaseName  > fileName.sql\n\n其中fileName.sql最好加上路径名,不加则导出到当前目录","slug":"Linux下如何导出MySQL数据库","published":1,"updated":"2018-03-06T15:24:39.751Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq3p000pbcusf9zimh2y","content":"<p>命令行下执行</p>\n<p>mysqldump -u userName -p  dabaseName  &gt; fileName.sql</p>\n<p>其中fileName.sql最好加上路径名,不加则导出到当前目录</p>\n","site":{"data":{}},"excerpt":"","more":"<p>命令行下执行</p>\n<p>mysqldump -u userName -p  dabaseName  &gt; fileName.sql</p>\n<p>其中fileName.sql最好加上路径名,不加则导出到当前目录</p>\n"},{"title":"Linux下安装JDK8","date":"2018-03-04T16:23:40.000Z","_content":"\n1\n下载jdk8安装包\n上传到linux服务器后执行\ntar -xvf jdk-8u5-linux-x64.tar.gz\n解压到当前目录,此时目录/usr/java\n2.\n添加到环境变量\nvi /etc/profile\n在export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL下面添加如下代码：\nexport JAVA_HOME=/usr/local/jdk1.8.0_111\nexport PATH=\\$JAVA_HOME/bin:$PATH\nexport CLASSPATH=.:\\$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n3.\n使配置生效\nsource /etc/profile","source":"_posts/Linux下安装JDK8.md","raw":"---\ntitle: Linux下安装JDK8\ndate: 2018-03-05 00:23:40\ntags: Linux\ncategories: \n---\n\n1\n下载jdk8安装包\n上传到linux服务器后执行\ntar -xvf jdk-8u5-linux-x64.tar.gz\n解压到当前目录,此时目录/usr/java\n2.\n添加到环境变量\nvi /etc/profile\n在export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL下面添加如下代码：\nexport JAVA_HOME=/usr/local/jdk1.8.0_111\nexport PATH=\\$JAVA_HOME/bin:$PATH\nexport CLASSPATH=.:\\$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n3.\n使配置生效\nsource /etc/profile","slug":"Linux下安装JDK8","published":1,"updated":"2018-03-06T15:24:47.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq3p000ubcus9def9l41","content":"<p>1<br>下载jdk8安装包<br>上传到linux服务器后执行<br>tar -xvf jdk-8u5-linux-x64.tar.gz<br>解压到当前目录,此时目录/usr/java<br>2.<br>添加到环境变量<br>vi /etc/profile<br>在export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL下面添加如下代码：<br>export JAVA_HOME=/usr/local/jdk1.8.0_111<br>export PATH=\\$JAVA_HOME/bin:$PATH<br>export CLASSPATH=.:\\$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br>3.<br>使配置生效<br>source /etc/profile</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1<br>下载jdk8安装包<br>上传到linux服务器后执行<br>tar -xvf jdk-8u5-linux-x64.tar.gz<br>解压到当前目录,此时目录/usr/java<br>2.<br>添加到环境变量<br>vi /etc/profile<br>在export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL下面添加如下代码：<br>export JAVA_HOME=/usr/local/jdk1.8.0_111<br>export PATH=\\$JAVA_HOME/bin:$PATH<br>export CLASSPATH=.:\\$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br>3.<br>使配置生效<br>source /etc/profile</p>\n"},{"title":"Median of Two Sorted Arrays题解","date":"2018-02-01T12:24:16.000Z","_content":"\nThere are two sorted arrays **nums1** and **nums2** of size m and n respectively.\n\nFind the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).\n\n**Example 1:**\n\n```\nnums1 = [1, 3]\nnums2 = [2]\n\nThe median is 2.0\n\n```\n\n**Example 2:**\n\n```\nnums1 = [1, 2]\nnums2 = [3, 4]\n\nThe median is (2 + 3)/2 = 2.5\n```\n\n问题：已知两个有序数列，求他们之间的中位数\n\n思考：把两个数组merge成一个数组，求中位数\n\nPython3解法如下：\n\n```Python\nclass Solution:\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        res = []\n        while len(nums1) !=0 and len(nums2) != 0:\n            if nums1[0]<nums2[0]:\n                res.append(nums1[0])\n                del nums1[0]\n            else:\n                res.append(nums2[0])\n                del nums2[0]\n        newnums = res+nums1+nums2\n        if len(newnums)%2==0:\n            return (newnums[len(newnums)//2]+newnums[len(newnums)//2-1])/2\n        else:\n            return newnums[len(newnums)//2]\n```\n","source":"_posts/Median of Two Sorted Arrays题解.md","raw":"---\ntitle: Median of Two Sorted Arrays题解\ndate: 2018-02-01 20:24:16\ntags: problems\ncategories: Python\n---\n\nThere are two sorted arrays **nums1** and **nums2** of size m and n respectively.\n\nFind the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).\n\n**Example 1:**\n\n```\nnums1 = [1, 3]\nnums2 = [2]\n\nThe median is 2.0\n\n```\n\n**Example 2:**\n\n```\nnums1 = [1, 2]\nnums2 = [3, 4]\n\nThe median is (2 + 3)/2 = 2.5\n```\n\n问题：已知两个有序数列，求他们之间的中位数\n\n思考：把两个数组merge成一个数组，求中位数\n\nPython3解法如下：\n\n```Python\nclass Solution:\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        res = []\n        while len(nums1) !=0 and len(nums2) != 0:\n            if nums1[0]<nums2[0]:\n                res.append(nums1[0])\n                del nums1[0]\n            else:\n                res.append(nums2[0])\n                del nums2[0]\n        newnums = res+nums1+nums2\n        if len(newnums)%2==0:\n            return (newnums[len(newnums)//2]+newnums[len(newnums)//2-1])/2\n        else:\n            return newnums[len(newnums)//2]\n```\n","slug":"Median of Two Sorted Arrays题解","published":1,"updated":"2018-03-01T17:20:47.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq3p000wbcus0253zffh","content":"<p>There are two sorted arrays <strong>nums1</strong> and <strong>nums2</strong> of size m and n respectively.</p>\n<p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nums1 = [1, 3]</span><br><span class=\"line\">nums2 = [2]</span><br><span class=\"line\"></span><br><span class=\"line\">The median is 2.0</span><br></pre></td></tr></table></figure>\n<p><strong>Example 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nums1 = [1, 2]</span><br><span class=\"line\">nums2 = [3, 4]</span><br><span class=\"line\"></span><br><span class=\"line\">The median is (2 + 3)/2 = 2.5</span><br></pre></td></tr></table></figure>\n<p>问题：已知两个有序数列，求他们之间的中位数</p>\n<p>思考：把两个数组merge成一个数组，求中位数</p>\n<p>Python3解法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findMedianSortedArrays</span><span class=\"params\">(self, nums1, nums2)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type nums1: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :type nums2: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: float</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">while</span> len(nums1) !=<span class=\"number\">0</span> <span class=\"keyword\">and</span> len(nums2) != <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums1[<span class=\"number\">0</span>]&lt;nums2[<span class=\"number\">0</span>]:</span><br><span class=\"line\">                res.append(nums1[<span class=\"number\">0</span>])</span><br><span class=\"line\">                <span class=\"keyword\">del</span> nums1[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                res.append(nums2[<span class=\"number\">0</span>])</span><br><span class=\"line\">                <span class=\"keyword\">del</span> nums2[<span class=\"number\">0</span>]</span><br><span class=\"line\">        newnums = res+nums1+nums2</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(newnums)%<span class=\"number\">2</span>==<span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (newnums[len(newnums)//<span class=\"number\">2</span>]+newnums[len(newnums)//<span class=\"number\">2</span><span class=\"number\">-1</span>])/<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> newnums[len(newnums)//<span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>There are two sorted arrays <strong>nums1</strong> and <strong>nums2</strong> of size m and n respectively.</p>\n<p>Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</p>\n<p><strong>Example 1:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nums1 = [1, 3]</span><br><span class=\"line\">nums2 = [2]</span><br><span class=\"line\"></span><br><span class=\"line\">The median is 2.0</span><br></pre></td></tr></table></figure>\n<p><strong>Example 2:</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nums1 = [1, 2]</span><br><span class=\"line\">nums2 = [3, 4]</span><br><span class=\"line\"></span><br><span class=\"line\">The median is (2 + 3)/2 = 2.5</span><br></pre></td></tr></table></figure>\n<p>问题：已知两个有序数列，求他们之间的中位数</p>\n<p>思考：把两个数组merge成一个数组，求中位数</p>\n<p>Python3解法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">findMedianSortedArrays</span><span class=\"params\">(self, nums1, nums2)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        :type nums1: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :type nums2: List[int]</span></span><br><span class=\"line\"><span class=\"string\">        :rtype: float</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">while</span> len(nums1) !=<span class=\"number\">0</span> <span class=\"keyword\">and</span> len(nums2) != <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums1[<span class=\"number\">0</span>]&lt;nums2[<span class=\"number\">0</span>]:</span><br><span class=\"line\">                res.append(nums1[<span class=\"number\">0</span>])</span><br><span class=\"line\">                <span class=\"keyword\">del</span> nums1[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                res.append(nums2[<span class=\"number\">0</span>])</span><br><span class=\"line\">                <span class=\"keyword\">del</span> nums2[<span class=\"number\">0</span>]</span><br><span class=\"line\">        newnums = res+nums1+nums2</span><br><span class=\"line\">        <span class=\"keyword\">if</span> len(newnums)%<span class=\"number\">2</span>==<span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (newnums[len(newnums)//<span class=\"number\">2</span>]+newnums[len(newnums)//<span class=\"number\">2</span><span class=\"number\">-1</span>])/<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> newnums[len(newnums)//<span class=\"number\">2</span>]</span><br></pre></td></tr></table></figure>\n"},{"title":"Linux下如何安装neo4j数据库","date":"2018-01-16T15:35:20.000Z","_content":"运行neo4j前需要先安装JDK8\n\n----------\n\n#### 安装jdk8\n\n1.获取jdk8安装包，上传到linux服务器后执行\ntar -xvf jdk-8u5-linux-x64.tar.gz\n解压到当前目录,此时目录/usr/java\n\n2.添加到环境变量\nvi /etc/profile\n在export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL下面新增三行：\nexport JAVA_HOME=/usr/local/jdk1.8.0_111\nexport PATH=$JAVA_HOME/bin:$PATH\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n\n3.使配置生效\nsource /etc/profile\n\n#### 安装NEO4J\n\n1.获取neo4j\n访问https://neo4j.com/download/other-releases/找到对应的neo4j的版本下载\n此次安装版本是 neo4j-community-3.3.1-unix.tar.gz\n\n2.解压\ntar -zxvf neo4j-community-3.3.1-unix.tar.gz\n此时路径为/usr/java\n\n3.开启远程访问\nvi /usr/java/neo4j-community-3.3.1/conf/neo4j.conf\n将 #dbms.connectors.default_listen_address=0.0.0.0 注释去掉\n改为 dbms.connectors.default_listen_address=0.0.0.0\n\n4.开放端口\niptables -I INPUT -p tcp --dport 7474 -j ACCEPT\n\n5.添加环境变量\nvi /root/.bash_profile\n新增一行\nexport PATH=/usr/java/neo4j-community-3.3.1/bin:$PATH\n保存后执行\nsource .bash_profile\n\n6.设置操作系统文件句柄\n打开设置操作文件系统文件句柄，Neo4j默认使用的最小文件句柄是40000，\n而Linux操作系统一般默认是1024。\nvi /etc/security/limits.conf\n在其中增加两行\nneo4j  soft   nofile  40000\nneo4j  hard   nofile  40000\n\n\n7.启动neo4j\nneo4j start\n\n查看neo4j状态\nneo4j status\n\n停止运行neo4j\nneo4j stop","source":"_posts/Linux下如何安装neo4j数据库.md","raw":"---\ntitle: Linux下如何安装neo4j数据库\ndate: 2018-01-16 23:35:20\ntags: NEO4J\ncategories: 数据库\n---\n运行neo4j前需要先安装JDK8\n\n----------\n\n#### 安装jdk8\n\n1.获取jdk8安装包，上传到linux服务器后执行\ntar -xvf jdk-8u5-linux-x64.tar.gz\n解压到当前目录,此时目录/usr/java\n\n2.添加到环境变量\nvi /etc/profile\n在export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL下面新增三行：\nexport JAVA_HOME=/usr/local/jdk1.8.0_111\nexport PATH=$JAVA_HOME/bin:$PATH\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar\n\n3.使配置生效\nsource /etc/profile\n\n#### 安装NEO4J\n\n1.获取neo4j\n访问https://neo4j.com/download/other-releases/找到对应的neo4j的版本下载\n此次安装版本是 neo4j-community-3.3.1-unix.tar.gz\n\n2.解压\ntar -zxvf neo4j-community-3.3.1-unix.tar.gz\n此时路径为/usr/java\n\n3.开启远程访问\nvi /usr/java/neo4j-community-3.3.1/conf/neo4j.conf\n将 #dbms.connectors.default_listen_address=0.0.0.0 注释去掉\n改为 dbms.connectors.default_listen_address=0.0.0.0\n\n4.开放端口\niptables -I INPUT -p tcp --dport 7474 -j ACCEPT\n\n5.添加环境变量\nvi /root/.bash_profile\n新增一行\nexport PATH=/usr/java/neo4j-community-3.3.1/bin:$PATH\n保存后执行\nsource .bash_profile\n\n6.设置操作系统文件句柄\n打开设置操作文件系统文件句柄，Neo4j默认使用的最小文件句柄是40000，\n而Linux操作系统一般默认是1024。\nvi /etc/security/limits.conf\n在其中增加两行\nneo4j  soft   nofile  40000\nneo4j  hard   nofile  40000\n\n\n7.启动neo4j\nneo4j start\n\n查看neo4j状态\nneo4j status\n\n停止运行neo4j\nneo4j stop","slug":"Linux下如何安装neo4j数据库","published":1,"updated":"2018-03-12T16:46:30.025Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq3p0010bcus8dzkib2f","content":"<p>运行neo4j前需要先安装JDK8</p>\n<hr>\n<h4 id=\"安装jdk8\"><a href=\"#安装jdk8\" class=\"headerlink\" title=\"安装jdk8\"></a>安装jdk8</h4><p>1.获取jdk8安装包，上传到linux服务器后执行<br>tar -xvf jdk-8u5-linux-x64.tar.gz<br>解压到当前目录,此时目录/usr/java</p>\n<p>2.添加到环境变量<br>vi /etc/profile<br>在export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL下面新增三行：<br>export JAVA_HOME=/usr/local/jdk1.8.0_111<br>export PATH=$JAVA_HOME/bin:$PATH<br>export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</p>\n<p>3.使配置生效<br>source /etc/profile</p>\n<h4 id=\"安装NEO4J\"><a href=\"#安装NEO4J\" class=\"headerlink\" title=\"安装NEO4J\"></a>安装NEO4J</h4><p>1.获取neo4j<br>访问<a href=\"https://neo4j.com/download/other-releases/找到对应的neo4j的版本下载\" target=\"_blank\" rel=\"noopener\">https://neo4j.com/download/other-releases/找到对应的neo4j的版本下载</a><br>此次安装版本是 neo4j-community-3.3.1-unix.tar.gz</p>\n<p>2.解压<br>tar -zxvf neo4j-community-3.3.1-unix.tar.gz<br>此时路径为/usr/java</p>\n<p>3.开启远程访问<br>vi /usr/java/neo4j-community-3.3.1/conf/neo4j.conf<br>将 #dbms.connectors.default_listen_address=0.0.0.0 注释去掉<br>改为 dbms.connectors.default_listen_address=0.0.0.0</p>\n<p>4.开放端口<br>iptables -I INPUT -p tcp –dport 7474 -j ACCEPT</p>\n<p>5.添加环境变量<br>vi /root/.bash_profile<br>新增一行<br>export PATH=/usr/java/neo4j-community-3.3.1/bin:$PATH<br>保存后执行<br>source .bash_profile</p>\n<p>6.设置操作系统文件句柄<br>打开设置操作文件系统文件句柄，Neo4j默认使用的最小文件句柄是40000，<br>而Linux操作系统一般默认是1024。<br>vi /etc/security/limits.conf<br>在其中增加两行<br>neo4j  soft   nofile  40000<br>neo4j  hard   nofile  40000</p>\n<p>7.启动neo4j<br>neo4j start</p>\n<p>查看neo4j状态<br>neo4j status</p>\n<p>停止运行neo4j<br>neo4j stop</p>\n","site":{"data":{}},"excerpt":"","more":"<p>运行neo4j前需要先安装JDK8</p>\n<hr>\n<h4 id=\"安装jdk8\"><a href=\"#安装jdk8\" class=\"headerlink\" title=\"安装jdk8\"></a>安装jdk8</h4><p>1.获取jdk8安装包，上传到linux服务器后执行<br>tar -xvf jdk-8u5-linux-x64.tar.gz<br>解压到当前目录,此时目录/usr/java</p>\n<p>2.添加到环境变量<br>vi /etc/profile<br>在export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL下面新增三行：<br>export JAVA_HOME=/usr/local/jdk1.8.0_111<br>export PATH=$JAVA_HOME/bin:$PATH<br>export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</p>\n<p>3.使配置生效<br>source /etc/profile</p>\n<h4 id=\"安装NEO4J\"><a href=\"#安装NEO4J\" class=\"headerlink\" title=\"安装NEO4J\"></a>安装NEO4J</h4><p>1.获取neo4j<br>访问<a href=\"https://neo4j.com/download/other-releases/找到对应的neo4j的版本下载\" target=\"_blank\" rel=\"noopener\">https://neo4j.com/download/other-releases/找到对应的neo4j的版本下载</a><br>此次安装版本是 neo4j-community-3.3.1-unix.tar.gz</p>\n<p>2.解压<br>tar -zxvf neo4j-community-3.3.1-unix.tar.gz<br>此时路径为/usr/java</p>\n<p>3.开启远程访问<br>vi /usr/java/neo4j-community-3.3.1/conf/neo4j.conf<br>将 #dbms.connectors.default_listen_address=0.0.0.0 注释去掉<br>改为 dbms.connectors.default_listen_address=0.0.0.0</p>\n<p>4.开放端口<br>iptables -I INPUT -p tcp –dport 7474 -j ACCEPT</p>\n<p>5.添加环境变量<br>vi /root/.bash_profile<br>新增一行<br>export PATH=/usr/java/neo4j-community-3.3.1/bin:$PATH<br>保存后执行<br>source .bash_profile</p>\n<p>6.设置操作系统文件句柄<br>打开设置操作文件系统文件句柄，Neo4j默认使用的最小文件句柄是40000，<br>而Linux操作系统一般默认是1024。<br>vi /etc/security/limits.conf<br>在其中增加两行<br>neo4j  soft   nofile  40000<br>neo4j  hard   nofile  40000</p>\n<p>7.启动neo4j<br>neo4j start</p>\n<p>查看neo4j状态<br>neo4j status</p>\n<p>停止运行neo4j<br>neo4j stop</p>\n"},{"title":"PowerShell禁止执行脚本问题","date":"2018-03-19T13:36:17.000Z","_content":"\nWin10 PowerShell因为在此系统中禁止执行脚本 \n解决方法:\n打开PowerShell(管理员)\n键入\n\n```\nset-executionpolicy remotesigned\n```\n\n\n出现以下信息\n\n```\n执行策略可以防止您执行不信任的脚本。更改执行策略可能会使您面临 about_Execution_Policies \n帮助主题中所述的安全风险。\n是否要更改执行策略? [Y] 是(Y) [N] 否(N) [S] 挂起(S) [?] 帮助 (默认值为“Y”): y\n```\n\n输入 y 即可","source":"_posts/PowerShell禁止执行脚本问题.md","raw":"---\ntitle: PowerShell禁止执行脚本问题\ndate: 2018-03-19 21:36:17\ntags:\ncategories: tools\n---\n\nWin10 PowerShell因为在此系统中禁止执行脚本 \n解决方法:\n打开PowerShell(管理员)\n键入\n\n```\nset-executionpolicy remotesigned\n```\n\n\n出现以下信息\n\n```\n执行策略可以防止您执行不信任的脚本。更改执行策略可能会使您面临 about_Execution_Policies \n帮助主题中所述的安全风险。\n是否要更改执行策略? [Y] 是(Y) [N] 否(N) [S] 挂起(S) [?] 帮助 (默认值为“Y”): y\n```\n\n输入 y 即可","slug":"PowerShell禁止执行脚本问题","published":1,"updated":"2018-03-19T13:37:29.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq3p0014bcuse6iu81w8","content":"<p>Win10 PowerShell因为在此系统中禁止执行脚本<br>解决方法:<br>打开PowerShell(管理员)<br>键入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set-executionpolicy remotesigned</span><br></pre></td></tr></table></figure>\n<p>出现以下信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">执行策略可以防止您执行不信任的脚本。更改执行策略可能会使您面临 about_Execution_Policies </span><br><span class=\"line\">帮助主题中所述的安全风险。</span><br><span class=\"line\">是否要更改执行策略? [Y] 是(Y) [N] 否(N) [S] 挂起(S) [?] 帮助 (默认值为“Y”): y</span><br></pre></td></tr></table></figure>\n<p>输入 y 即可</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Win10 PowerShell因为在此系统中禁止执行脚本<br>解决方法:<br>打开PowerShell(管理员)<br>键入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set-executionpolicy remotesigned</span><br></pre></td></tr></table></figure>\n<p>出现以下信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">执行策略可以防止您执行不信任的脚本。更改执行策略可能会使您面临 about_Execution_Policies </span><br><span class=\"line\">帮助主题中所述的安全风险。</span><br><span class=\"line\">是否要更改执行策略? [Y] 是(Y) [N] 否(N) [S] 挂起(S) [?] 帮助 (默认值为“Y”): y</span><br></pre></td></tr></table></figure>\n<p>输入 y 即可</p>\n"},{"title":"Python中is和==的区别","date":"2018-02-27T13:25:11.000Z","_content":"\nPython中万物皆对象。\n\n每个对象包含三个属性，分别是id(内存地址)；type(类型)；value(值)\n\nis就是比较id是否相等\n\n==就是比较value是否相等\n\n不过要注意的是Python为了实现对内存的有效利用，对小整数[-5,256]内的整数会进行缓存，不在该范围内的则不会缓存，具体如下\n\n\\>>> a = 255\n\n\\>>> b = 255\n\n\\>>> a is b\n\nTrue\n\n\\>>> c = 257\n\n\\>>> d = 257\n\n\\>>> c is d\n\nFalse\n\n\\>>>\n\n可见a,b的id是相同的，而c和d的id是不同的\n\n","source":"_posts/Python中is和==的区别.md","raw":"---\ntitle: Python中is和==的区别\ndate: 2018-02-27 21:25:11\ntags:\ncategories: Python\n---\n\nPython中万物皆对象。\n\n每个对象包含三个属性，分别是id(内存地址)；type(类型)；value(值)\n\nis就是比较id是否相等\n\n==就是比较value是否相等\n\n不过要注意的是Python为了实现对内存的有效利用，对小整数[-5,256]内的整数会进行缓存，不在该范围内的则不会缓存，具体如下\n\n\\>>> a = 255\n\n\\>>> b = 255\n\n\\>>> a is b\n\nTrue\n\n\\>>> c = 257\n\n\\>>> d = 257\n\n\\>>> c is d\n\nFalse\n\n\\>>>\n\n可见a,b的id是相同的，而c和d的id是不同的\n\n","slug":"Python中is和==的区别","published":1,"updated":"2018-03-01T17:20:47.884Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq440017bcus91sy29ri","content":"<p>Python中万物皆对象。</p>\n<p>每个对象包含三个属性，分别是id(内存地址)；type(类型)；value(值)</p>\n<p>is就是比较id是否相等</p>\n<p>==就是比较value是否相等</p>\n<p>不过要注意的是Python为了实现对内存的有效利用，对小整数[-5,256]内的整数会进行缓存，不在该范围内的则不会缓存，具体如下</p>\n<p>>&gt;&gt; a = 255</p>\n<p>>&gt;&gt; b = 255</p>\n<p>>&gt;&gt; a is b</p>\n<p>True</p>\n<p>>&gt;&gt; c = 257</p>\n<p>>&gt;&gt; d = 257</p>\n<p>>&gt;&gt; c is d</p>\n<p>False</p>\n<p>>&gt;&gt;</p>\n<p>可见a,b的id是相同的，而c和d的id是不同的</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Python中万物皆对象。</p>\n<p>每个对象包含三个属性，分别是id(内存地址)；type(类型)；value(值)</p>\n<p>is就是比较id是否相等</p>\n<p>==就是比较value是否相等</p>\n<p>不过要注意的是Python为了实现对内存的有效利用，对小整数[-5,256]内的整数会进行缓存，不在该范围内的则不会缓存，具体如下</p>\n<p>>&gt;&gt; a = 255</p>\n<p>>&gt;&gt; b = 255</p>\n<p>>&gt;&gt; a is b</p>\n<p>True</p>\n<p>>&gt;&gt; c = 257</p>\n<p>>&gt;&gt; d = 257</p>\n<p>>&gt;&gt; c is d</p>\n<p>False</p>\n<p>>&gt;&gt;</p>\n<p>可见a,b的id是相同的，而c和d的id是不同的</p>\n"},{"title":"PyCharm中各个调试按钮含义","date":"2018-03-28T15:56:09.000Z","_content":"\nShift+F9 /小瓢虫按钮 开始调试项目\n\n点击那个小瓢虫按钮 开始调试项目，调试窗口有如下按钮，含义如下\n\n`Step Over / F8`  在当前函数中跳到下一行执行，遇到子函数时不会进入子函数内单步执行\n\n`Step Into / F7` 单步执行，遇到子函数就进入并且继续单步执行\n\n`Step Out / Shift+F8` 跳到执行完当前函数后的下一行\n\n`Run to Cursor / Alt+F9` 执行到下一个断点\n\n`Step Into My Code / Alt+Shift+F7` 进入自己编写的函数，不进入系统函数","source":"_posts/PyCharm中各个调试按钮含义.md","raw":"---\ntitle: PyCharm中各个调试按钮含义\ndate: 2018-03-28 23:56:09\ntags: tools\ncategories: Python\n---\n\nShift+F9 /小瓢虫按钮 开始调试项目\n\n点击那个小瓢虫按钮 开始调试项目，调试窗口有如下按钮，含义如下\n\n`Step Over / F8`  在当前函数中跳到下一行执行，遇到子函数时不会进入子函数内单步执行\n\n`Step Into / F7` 单步执行，遇到子函数就进入并且继续单步执行\n\n`Step Out / Shift+F8` 跳到执行完当前函数后的下一行\n\n`Run to Cursor / Alt+F9` 执行到下一个断点\n\n`Step Into My Code / Alt+Shift+F7` 进入自己编写的函数，不进入系统函数","slug":"PyCharm中各个调试按钮含义","published":1,"updated":"2018-03-28T15:59:35.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq44001bbcuszwl4q8c4","content":"<p>Shift+F9 /小瓢虫按钮 开始调试项目</p>\n<p>点击那个小瓢虫按钮 开始调试项目，调试窗口有如下按钮，含义如下</p>\n<p><code>Step Over / F8</code>  在当前函数中跳到下一行执行，遇到子函数时不会进入子函数内单步执行</p>\n<p><code>Step Into / F7</code> 单步执行，遇到子函数就进入并且继续单步执行</p>\n<p><code>Step Out / Shift+F8</code> 跳到执行完当前函数后的下一行</p>\n<p><code>Run to Cursor / Alt+F9</code> 执行到下一个断点</p>\n<p><code>Step Into My Code / Alt+Shift+F7</code> 进入自己编写的函数，不进入系统函数</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Shift+F9 /小瓢虫按钮 开始调试项目</p>\n<p>点击那个小瓢虫按钮 开始调试项目，调试窗口有如下按钮，含义如下</p>\n<p><code>Step Over / F8</code>  在当前函数中跳到下一行执行，遇到子函数时不会进入子函数内单步执行</p>\n<p><code>Step Into / F7</code> 单步执行，遇到子函数就进入并且继续单步执行</p>\n<p><code>Step Out / Shift+F8</code> 跳到执行完当前函数后的下一行</p>\n<p><code>Run to Cursor / Alt+F9</code> 执行到下一个断点</p>\n<p><code>Step Into My Code / Alt+Shift+F7</code> 进入自己编写的函数，不进入系统函数</p>\n"},{"title":"Python中+和+=的异同","date":"2018-02-25T14:03:43.000Z","_content":"\n首先我们来看一个例子\n\n\\>>> a = [1,2]\n\\>>> b = a\n\\>>> b += [1]\n\\>>> b\n[1, 2, 1]\n\\>>> a\n[1, 2, 1]\n\n第二个例子\n\\>>> a = [1,2]\n\\>>> c = a\n\\>>> c = c + [1]\n\\>>> c\n[1, 2, 1]\n\\>>> a\n[1, 2]\n\n由以上结果我们可以轻易地看出+和+=所得到的结果是不同的\n\n对于 +=  操作，调用 \\__iadd__方法，直接在原对象上进行更新\n\n对于 + 操作，调用\\__add__方法，返回一个新的对象，新对象的修改对原对象没有影响\n\n对于不可变类型，没有\\__iadd__方法，只会调用\\__add__方法，所以+=和+的效果是一样的\n\n总结一下：\n\n针对可变类型：\n\n- `+`： 代表连接操作，其结果会创建一个新的对象。\n- `+=`： 代表追加操作，即 in-place 操作，在原地把另一个对象的内容追加到对象中。\n\n对于不可变类型： \n\n`+` 与 `+=` 都代表连接或求和操作，两者没有什么区别，其操作的结果都会产生一个新的对象。\n\n\n\n","source":"_posts/Python中+和+=的异同.md","raw":"---\ntitle: Python中+和+=的异同\ndate: 2018-02-25 22:03:43\ntags: \ncategories: Python\n---\n\n首先我们来看一个例子\n\n\\>>> a = [1,2]\n\\>>> b = a\n\\>>> b += [1]\n\\>>> b\n[1, 2, 1]\n\\>>> a\n[1, 2, 1]\n\n第二个例子\n\\>>> a = [1,2]\n\\>>> c = a\n\\>>> c = c + [1]\n\\>>> c\n[1, 2, 1]\n\\>>> a\n[1, 2]\n\n由以上结果我们可以轻易地看出+和+=所得到的结果是不同的\n\n对于 +=  操作，调用 \\__iadd__方法，直接在原对象上进行更新\n\n对于 + 操作，调用\\__add__方法，返回一个新的对象，新对象的修改对原对象没有影响\n\n对于不可变类型，没有\\__iadd__方法，只会调用\\__add__方法，所以+=和+的效果是一样的\n\n总结一下：\n\n针对可变类型：\n\n- `+`： 代表连接操作，其结果会创建一个新的对象。\n- `+=`： 代表追加操作，即 in-place 操作，在原地把另一个对象的内容追加到对象中。\n\n对于不可变类型： \n\n`+` 与 `+=` 都代表连接或求和操作，两者没有什么区别，其操作的结果都会产生一个新的对象。\n\n\n\n","slug":"Python中+和+=的异同","published":1,"updated":"2018-03-01T17:20:47.869Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq44001fbcusjs3a910m","content":"<p>首先我们来看一个例子</p>\n<p>>&gt;&gt; a = [1,2]<br>>&gt;&gt; b = a<br>>&gt;&gt; b += [1]<br>>&gt;&gt; b<br>[1, 2, 1]<br>>&gt;&gt; a<br>[1, 2, 1]</p>\n<p>第二个例子<br>>&gt;&gt; a = [1,2]<br>>&gt;&gt; c = a<br>>&gt;&gt; c = c + [1]<br>>&gt;&gt; c<br>[1, 2, 1]<br>>&gt;&gt; a<br>[1, 2]</p>\n<p>由以上结果我们可以轻易地看出+和+=所得到的结果是不同的</p>\n<p>对于 +=  操作，调用 __iadd__方法，直接在原对象上进行更新</p>\n<p>对于 + 操作，调用__add__方法，返回一个新的对象，新对象的修改对原对象没有影响</p>\n<p>对于不可变类型，没有__iadd__方法，只会调用__add__方法，所以+=和+的效果是一样的</p>\n<p>总结一下：</p>\n<p>针对可变类型：</p>\n<ul>\n<li><code>+</code>： 代表连接操作，其结果会创建一个新的对象。</li>\n<li><code>+=</code>： 代表追加操作，即 in-place 操作，在原地把另一个对象的内容追加到对象中。</li>\n</ul>\n<p>对于不可变类型： </p>\n<p><code>+</code> 与 <code>+=</code> 都代表连接或求和操作，两者没有什么区别，其操作的结果都会产生一个新的对象。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>首先我们来看一个例子</p>\n<p>>&gt;&gt; a = [1,2]<br>>&gt;&gt; b = a<br>>&gt;&gt; b += [1]<br>>&gt;&gt; b<br>[1, 2, 1]<br>>&gt;&gt; a<br>[1, 2, 1]</p>\n<p>第二个例子<br>>&gt;&gt; a = [1,2]<br>>&gt;&gt; c = a<br>>&gt;&gt; c = c + [1]<br>>&gt;&gt; c<br>[1, 2, 1]<br>>&gt;&gt; a<br>[1, 2]</p>\n<p>由以上结果我们可以轻易地看出+和+=所得到的结果是不同的</p>\n<p>对于 +=  操作，调用 __iadd__方法，直接在原对象上进行更新</p>\n<p>对于 + 操作，调用__add__方法，返回一个新的对象，新对象的修改对原对象没有影响</p>\n<p>对于不可变类型，没有__iadd__方法，只会调用__add__方法，所以+=和+的效果是一样的</p>\n<p>总结一下：</p>\n<p>针对可变类型：</p>\n<ul>\n<li><code>+</code>： 代表连接操作，其结果会创建一个新的对象。</li>\n<li><code>+=</code>： 代表追加操作，即 in-place 操作，在原地把另一个对象的内容追加到对象中。</li>\n</ul>\n<p>对于不可变类型： </p>\n<p><code>+</code> 与 <code>+=</code> 都代表连接或求和操作，两者没有什么区别，其操作的结果都会产生一个新的对象。</p>\n"},{"title":"Python中元组和列表的异同","date":"2018-01-23T14:59:46.000Z","_content":"Python中元组和列表的异同：\n\n#####相同的地方：\n\n1.创建方式类似\n元组： t = ()或者 t = tuple()\n列表： a = []或者 a = list()\n\n2.访问方式\n均可以使用索引或者截取\nt=(2,3,5)  #>> t[2]输出为5\na=[2,3,5]  #>> a[2]输出为5\n\n3.部分内置函数部分相同\nlen();count();max();min();index(value)\n\n4.删除方式相同：\ndel tuple_a\ndel list_a\n\n5.和字符串相似，均可以使用 + 和 * 操作符\n\n#####不同的地方：\n\n元组没有append(),insert(index,obj),pop(),remove()等方法；\n主要是由于元组不可改变的性质决定的，\n\n注意：tuple元素不可变有一种特殊情况，当元素是可变对象时。对象内部属性是可以修改的；\n比如元组里有列表或者字典等，此时列表和字典是可以改变的\n\n比如\n\n```\n>>> t = ('a', 'b', ['A', 'B'])\n>>> t[2][0] = 'X'\n>>> t[2][1] = 'Y'\n>>> t\n('a', 'b', ['X', 'Y'])\n```","source":"_posts/Python中元组和列表的异同.md","raw":"---\ntitle: Python中元组和列表的异同\ndate: 2018-01-23 22:59:46\ntags: \ncategories: Python\n---\nPython中元组和列表的异同：\n\n#####相同的地方：\n\n1.创建方式类似\n元组： t = ()或者 t = tuple()\n列表： a = []或者 a = list()\n\n2.访问方式\n均可以使用索引或者截取\nt=(2,3,5)  #>> t[2]输出为5\na=[2,3,5]  #>> a[2]输出为5\n\n3.部分内置函数部分相同\nlen();count();max();min();index(value)\n\n4.删除方式相同：\ndel tuple_a\ndel list_a\n\n5.和字符串相似，均可以使用 + 和 * 操作符\n\n#####不同的地方：\n\n元组没有append(),insert(index,obj),pop(),remove()等方法；\n主要是由于元组不可改变的性质决定的，\n\n注意：tuple元素不可变有一种特殊情况，当元素是可变对象时。对象内部属性是可以修改的；\n比如元组里有列表或者字典等，此时列表和字典是可以改变的\n\n比如\n\n```\n>>> t = ('a', 'b', ['A', 'B'])\n>>> t[2][0] = 'X'\n>>> t[2][1] = 'Y'\n>>> t\n('a', 'b', ['X', 'Y'])\n```","slug":"Python中元组和列表的异同","published":1,"updated":"2018-03-12T15:30:55.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq44001ibcusfwkb8j6l","content":"<p>Python中元组和列表的异同：</p>\n<p>#####相同的地方：</p>\n<p>1.创建方式类似<br>元组： t = ()或者 t = tuple()<br>列表： a = []或者 a = list()</p>\n<p>2.访问方式<br>均可以使用索引或者截取<br>t=(2,3,5)  #&gt;&gt; t[2]输出为5<br>a=[2,3,5]  #&gt;&gt; a[2]输出为5</p>\n<p>3.部分内置函数部分相同<br>len();count();max();min();index(value)</p>\n<p>4.删除方式相同：<br>del tuple_a<br>del list_a</p>\n<p>5.和字符串相似，均可以使用 + 和 * 操作符</p>\n<p>#####不同的地方：</p>\n<p>元组没有append(),insert(index,obj),pop(),remove()等方法；<br>主要是由于元组不可改变的性质决定的，</p>\n<p>注意：tuple元素不可变有一种特殊情况，当元素是可变对象时。对象内部属性是可以修改的；<br>比如元组里有列表或者字典等，此时列表和字典是可以改变的</p>\n<p>比如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; t = (&apos;a&apos;, &apos;b&apos;, [&apos;A&apos;, &apos;B&apos;])</span><br><span class=\"line\">&gt;&gt;&gt; t[2][0] = &apos;X&apos;</span><br><span class=\"line\">&gt;&gt;&gt; t[2][1] = &apos;Y&apos;</span><br><span class=\"line\">&gt;&gt;&gt; t</span><br><span class=\"line\">(&apos;a&apos;, &apos;b&apos;, [&apos;X&apos;, &apos;Y&apos;])</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>Python中元组和列表的异同：</p>\n<p>#####相同的地方：</p>\n<p>1.创建方式类似<br>元组： t = ()或者 t = tuple()<br>列表： a = []或者 a = list()</p>\n<p>2.访问方式<br>均可以使用索引或者截取<br>t=(2,3,5)  #&gt;&gt; t[2]输出为5<br>a=[2,3,5]  #&gt;&gt; a[2]输出为5</p>\n<p>3.部分内置函数部分相同<br>len();count();max();min();index(value)</p>\n<p>4.删除方式相同：<br>del tuple_a<br>del list_a</p>\n<p>5.和字符串相似，均可以使用 + 和 * 操作符</p>\n<p>#####不同的地方：</p>\n<p>元组没有append(),insert(index,obj),pop(),remove()等方法；<br>主要是由于元组不可改变的性质决定的，</p>\n<p>注意：tuple元素不可变有一种特殊情况，当元素是可变对象时。对象内部属性是可以修改的；<br>比如元组里有列表或者字典等，此时列表和字典是可以改变的</p>\n<p>比如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; t = (&apos;a&apos;, &apos;b&apos;, [&apos;A&apos;, &apos;B&apos;])</span><br><span class=\"line\">&gt;&gt;&gt; t[2][0] = &apos;X&apos;</span><br><span class=\"line\">&gt;&gt;&gt; t[2][1] = &apos;Y&apos;</span><br><span class=\"line\">&gt;&gt;&gt; t</span><br><span class=\"line\">(&apos;a&apos;, &apos;b&apos;, [&apos;X&apos;, &apos;Y&apos;])</span><br></pre></td></tr></table></figure>"},{"title":"Python中参数*args和**args的含义","date":"2018-01-23T14:52:07.000Z","_content":"\n*args代表参数是以元组的形式传入的\n\n**args代表参数是以元组的形式传入的\n\n以例子说明\n\n```Python\ndef tupleArgs(*targs):\n    print(targs)\n    for i in targs:\n        print(i)\ntupleArgs('a','b','c')\n```\n\n输出是\n\n```\n('a', 'b', 'c')\na\nb\nc\n```\n\n关于**args\n\n```Python\ndef kwArgs(**targs):\n    print(targs)\n    for i in targs:\n        print(i)\nkwArgs(q='a',w='b',e='c')\n```\n\n输出是\n\n```\n{'q': 'a', 'e': 'c', 'w': 'b'}\nq\ne\nw\n```\n\n注意：*args 和 **args也可以不传递参数","source":"_posts/Python中参数-args和-args的含义.md","raw":"---\ntitle: Python中参数*args和**args的含义\ndate: 2018-01-23 22:52:07\ntags: args\ncategories: Python\n---\n\n*args代表参数是以元组的形式传入的\n\n**args代表参数是以元组的形式传入的\n\n以例子说明\n\n```Python\ndef tupleArgs(*targs):\n    print(targs)\n    for i in targs:\n        print(i)\ntupleArgs('a','b','c')\n```\n\n输出是\n\n```\n('a', 'b', 'c')\na\nb\nc\n```\n\n关于**args\n\n```Python\ndef kwArgs(**targs):\n    print(targs)\n    for i in targs:\n        print(i)\nkwArgs(q='a',w='b',e='c')\n```\n\n输出是\n\n```\n{'q': 'a', 'e': 'c', 'w': 'b'}\nq\ne\nw\n```\n\n注意：*args 和 **args也可以不传递参数","slug":"Python中参数-args和-args的含义","published":1,"updated":"2018-03-01T17:20:47.902Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq44001lbcusvp4hxs88","content":"<p>*args代表参数是以元组的形式传入的</p>\n<p>**args代表参数是以元组的形式传入的</p>\n<p>以例子说明</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tupleArgs</span><span class=\"params\">(*targs)</span>:</span></span><br><span class=\"line\">    print(targs)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> targs:</span><br><span class=\"line\">        print(i)</span><br><span class=\"line\">tupleArgs(<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>)</span><br></pre></td></tr></table></figure>\n<p>输出是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(&apos;a&apos;, &apos;b&apos;, &apos;c&apos;)</span><br><span class=\"line\">a</span><br><span class=\"line\">b</span><br><span class=\"line\">c</span><br></pre></td></tr></table></figure>\n<p>关于**args</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">kwArgs</span><span class=\"params\">(**targs)</span>:</span></span><br><span class=\"line\">    print(targs)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> targs:</span><br><span class=\"line\">        print(i)</span><br><span class=\"line\">kwArgs(q=<span class=\"string\">'a'</span>,w=<span class=\"string\">'b'</span>,e=<span class=\"string\">'c'</span>)</span><br></pre></td></tr></table></figure>\n<p>输出是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&apos;q&apos;: &apos;a&apos;, &apos;e&apos;: &apos;c&apos;, &apos;w&apos;: &apos;b&apos;&#125;</span><br><span class=\"line\">q</span><br><span class=\"line\">e</span><br><span class=\"line\">w</span><br></pre></td></tr></table></figure>\n<p>注意：*args 和 **args也可以不传递参数</p>\n","site":{"data":{}},"excerpt":"","more":"<p>*args代表参数是以元组的形式传入的</p>\n<p>**args代表参数是以元组的形式传入的</p>\n<p>以例子说明</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tupleArgs</span><span class=\"params\">(*targs)</span>:</span></span><br><span class=\"line\">    print(targs)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> targs:</span><br><span class=\"line\">        print(i)</span><br><span class=\"line\">tupleArgs(<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>)</span><br></pre></td></tr></table></figure>\n<p>输出是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(&apos;a&apos;, &apos;b&apos;, &apos;c&apos;)</span><br><span class=\"line\">a</span><br><span class=\"line\">b</span><br><span class=\"line\">c</span><br></pre></td></tr></table></figure>\n<p>关于**args</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">kwArgs</span><span class=\"params\">(**targs)</span>:</span></span><br><span class=\"line\">    print(targs)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> targs:</span><br><span class=\"line\">        print(i)</span><br><span class=\"line\">kwArgs(q=<span class=\"string\">'a'</span>,w=<span class=\"string\">'b'</span>,e=<span class=\"string\">'c'</span>)</span><br></pre></td></tr></table></figure>\n<p>输出是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&apos;q&apos;: &apos;a&apos;, &apos;e&apos;: &apos;c&apos;, &apos;w&apos;: &apos;b&apos;&#125;</span><br><span class=\"line\">q</span><br><span class=\"line\">e</span><br><span class=\"line\">w</span><br></pre></td></tr></table></figure>\n<p>注意：*args 和 **args也可以不传递参数</p>\n"},{"title":"Python中对元组的操作","date":"2018-01-23T15:03:39.000Z","_content":"\n1.Python元组和列表类似，不同的是元组里的元素无法修改\n\n2.创建一个空元组：\ntuple_a = ()或者tuple_a = tuple()\n\n3.元组的访问\n和列表相同，使用下标索引来访问元组的值，索引和截取也和列表一样\n也可以使用len(),max(),min()等函数；列表转化成元组，使用tuple(list)\n\n\\>>>a = (3,4,5,6)\n\n\\>>>a[3]     #output 为6\n\n4.元组的修改\n上面说了，元组和列表类似，不同的是元组里的元素无法修改，\n虽然无法修改，但是可以进行连接组合，可以使用\"+\"和\"*\"运算符\n\\>>> a = (3,4)\n\\>>> b = (7,9)\n\\>>> a = a + b\n\\>>> a\n\\>>> (3, 4, 7, 9)\n\n5.元组的删除\n元组无法删除里面的单个值，只能通过del来删除整个元组，下面代表a已被删除，访问a会出错\n\\>>> a\n\\>>> (3, 4, 7, 9)\n\\>>> del a\n\\>>> a\n\\>>> Traceback (most recent call last):\n\\>>>   File \"<stdin>\", line 1, in <module>\n\\>>> NameError: name 'a' is not defined\n#####注意：\n\n元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用：\n\\>>> tup1 = (50)\n\\>>> type(tup1)     # 不加逗号，类型为整型\n\\>>> <class 'int'>\n\\>>> tup1 = (50,)\n\\>>> type(tup1)     # 加上逗号，类型为元组\n\\>>> <class 'tuple'>","source":"_posts/Python中对元组的操作.md","raw":"---\ntitle: Python中对元组的操作\ndate: 2018-01-23 23:03:39\ntags:\ncategories: Python\n---\n\n1.Python元组和列表类似，不同的是元组里的元素无法修改\n\n2.创建一个空元组：\ntuple_a = ()或者tuple_a = tuple()\n\n3.元组的访问\n和列表相同，使用下标索引来访问元组的值，索引和截取也和列表一样\n也可以使用len(),max(),min()等函数；列表转化成元组，使用tuple(list)\n\n\\>>>a = (3,4,5,6)\n\n\\>>>a[3]     #output 为6\n\n4.元组的修改\n上面说了，元组和列表类似，不同的是元组里的元素无法修改，\n虽然无法修改，但是可以进行连接组合，可以使用\"+\"和\"*\"运算符\n\\>>> a = (3,4)\n\\>>> b = (7,9)\n\\>>> a = a + b\n\\>>> a\n\\>>> (3, 4, 7, 9)\n\n5.元组的删除\n元组无法删除里面的单个值，只能通过del来删除整个元组，下面代表a已被删除，访问a会出错\n\\>>> a\n\\>>> (3, 4, 7, 9)\n\\>>> del a\n\\>>> a\n\\>>> Traceback (most recent call last):\n\\>>>   File \"<stdin>\", line 1, in <module>\n\\>>> NameError: name 'a' is not defined\n#####注意：\n\n元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用：\n\\>>> tup1 = (50)\n\\>>> type(tup1)     # 不加逗号，类型为整型\n\\>>> <class 'int'>\n\\>>> tup1 = (50,)\n\\>>> type(tup1)     # 加上逗号，类型为元组\n\\>>> <class 'tuple'>","slug":"Python中对元组的操作","published":1,"updated":"2018-03-01T17:20:47.907Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq44001obcusekl1bj2z","content":"<p>1.Python元组和列表类似，不同的是元组里的元素无法修改</p>\n<p>2.创建一个空元组：<br>tuple_a = ()或者tuple_a = tuple()</p>\n<p>3.元组的访问<br>和列表相同，使用下标索引来访问元组的值，索引和截取也和列表一样<br>也可以使用len(),max(),min()等函数；列表转化成元组，使用tuple(list)</p>\n<p>>&gt;&gt;a = (3,4,5,6)</p>\n<p>>&gt;&gt;a[3]     #output 为6</p>\n<p>4.元组的修改<br>上面说了，元组和列表类似，不同的是元组里的元素无法修改，<br>虽然无法修改，但是可以进行连接组合，可以使用”+”和”*”运算符<br>>&gt;&gt; a = (3,4)<br>>&gt;&gt; b = (7,9)<br>>&gt;&gt; a = a + b<br>>&gt;&gt; a<br>>&gt;&gt; (3, 4, 7, 9)</p>\n<p>5.元组的删除<br>元组无法删除里面的单个值，只能通过del来删除整个元组，下面代表a已被删除，访问a会出错<br>>&gt;&gt; a<br>>&gt;&gt; (3, 4, 7, 9)<br>>&gt;&gt; del a<br>>&gt;&gt; a<br>>&gt;&gt; Traceback (most recent call last):<br>>&gt;&gt;   File “<stdin>“, line 1, in <module><br>>&gt;&gt; NameError: name ‘a’ is not defined</module></stdin></p>\n<p>#####注意：</p>\n<p>元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用：<br>>&gt;&gt; tup1 = (50)<br>>&gt;&gt; type(tup1)     # 不加逗号，类型为整型<br>>&gt;&gt; <class 'int'=\"\"><br>>&gt;&gt; tup1 = (50,)<br>>&gt;&gt; type(tup1)     # 加上逗号，类型为元组<br>>&gt;&gt; <class 'tuple'=\"\"></class></class></p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.Python元组和列表类似，不同的是元组里的元素无法修改</p>\n<p>2.创建一个空元组：<br>tuple_a = ()或者tuple_a = tuple()</p>\n<p>3.元组的访问<br>和列表相同，使用下标索引来访问元组的值，索引和截取也和列表一样<br>也可以使用len(),max(),min()等函数；列表转化成元组，使用tuple(list)</p>\n<p>>&gt;&gt;a = (3,4,5,6)</p>\n<p>>&gt;&gt;a[3]     #output 为6</p>\n<p>4.元组的修改<br>上面说了，元组和列表类似，不同的是元组里的元素无法修改，<br>虽然无法修改，但是可以进行连接组合，可以使用”+”和”*”运算符<br>>&gt;&gt; a = (3,4)<br>>&gt;&gt; b = (7,9)<br>>&gt;&gt; a = a + b<br>>&gt;&gt; a<br>>&gt;&gt; (3, 4, 7, 9)</p>\n<p>5.元组的删除<br>元组无法删除里面的单个值，只能通过del来删除整个元组，下面代表a已被删除，访问a会出错<br>>&gt;&gt; a<br>>&gt;&gt; (3, 4, 7, 9)<br>>&gt;&gt; del a<br>>&gt;&gt; a<br>>&gt;&gt; Traceback (most recent call last):<br>>&gt;&gt;   File “<stdin>“, line 1, in <module><br>>&gt;&gt; NameError: name ‘a’ is not defined</module></stdin></p>\n<p>#####注意：</p>\n<p>元组中只包含一个元素时，需要在元素后面添加逗号，否则括号会被当作运算符使用：<br>>&gt;&gt; tup1 = (50)<br>>&gt;&gt; type(tup1)     # 不加逗号，类型为整型<br>>&gt;&gt; <class 'int'=\"\"><br>>&gt;&gt; tup1 = (50,)<br>>&gt;&gt; type(tup1)     # 加上逗号，类型为元组<br>>&gt;&gt; <class 'tuple'=\"\"></class></class></p>\n"},{"title":"Python中如何获取随机数","date":"2018-03-04T16:30:41.000Z","_content":"\npython获取随机数\nimport random\n\n\\#获取0到1之间的随机小数\nrandom.random()\n\\#获取指定范围a到b之间的随机小数\nrandom.uniform(a,b)\n\\#获取指定范围a到b之间的随机整数,包含a,b\nrandom.randint(a,b)\n\\#随机获取列表里的一个值\nrandom.choice(list_a)","source":"_posts/Python中如何获取随机数.md","raw":"---\ntitle: Python中如何获取随机数\ndate: 2018-03-05 00:30:41\ntags:\ncategories: Python\n---\n\npython获取随机数\nimport random\n\n\\#获取0到1之间的随机小数\nrandom.random()\n\\#获取指定范围a到b之间的随机小数\nrandom.uniform(a,b)\n\\#获取指定范围a到b之间的随机整数,包含a,b\nrandom.randint(a,b)\n\\#随机获取列表里的一个值\nrandom.choice(list_a)","slug":"Python中如何获取随机数","published":1,"updated":"2018-03-04T16:31:21.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq44001rbcusd8eylswq","content":"<p>python获取随机数<br>import random</p>\n<p>#获取0到1之间的随机小数<br>random.random()<br>#获取指定范围a到b之间的随机小数<br>random.uniform(a,b)<br>#获取指定范围a到b之间的随机整数,包含a,b<br>random.randint(a,b)<br>#随机获取列表里的一个值<br>random.choice(list_a)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>python获取随机数<br>import random</p>\n<p>#获取0到1之间的随机小数<br>random.random()<br>#获取指定范围a到b之间的随机小数<br>random.uniform(a,b)<br>#获取指定范围a到b之间的随机整数,包含a,b<br>random.randint(a,b)<br>#随机获取列表里的一个值<br>random.choice(list_a)</p>\n"},{"title":"Python中的@property装饰器","date":"2018-01-29T13:57:15.000Z","_content":"\nPython中的@property\n使用@property可以使我们的函数像属性一样被使用，具体使用方法：\n\n```Python\nclass Grades:\n    @property\n    def score(self):\n        return self.scoreValue\n\n    @score.setter\n    def score(self,value):\n        if not isinstance(value, int):\n            raise ValueError('Input must be a Integer')\n        if value<0 or value>100:\n            raise ValueError('Input must between 1~100')\n        self.scoreValue = value\n        \ng = Grades()\n\ng.score = 7\n\nprint(g.score)\n#output => 7\n```\n\n\n可以看出，我们可以像使用属性一样来使用函数，不过注意scoreValue不能写成score，除此之外的都可以，\n推荐写成私有变量  _score 的形式，这里为了便于理解只写成了scoreValue\n\n那为什么我们要使用它以及什么时候应该使用它呢\n请看官方解释https://www.programiz.com/Python-programming/property的\n译文在这http://Python.jobbole.com/81967/","source":"_posts/Python中的-property装饰器.md","raw":"---\ntitle: Python中的@property装饰器\ndate: 2018-01-29 21:57:15\ntags: Decorator\ncategories: Python\n---\n\nPython中的@property\n使用@property可以使我们的函数像属性一样被使用，具体使用方法：\n\n```Python\nclass Grades:\n    @property\n    def score(self):\n        return self.scoreValue\n\n    @score.setter\n    def score(self,value):\n        if not isinstance(value, int):\n            raise ValueError('Input must be a Integer')\n        if value<0 or value>100:\n            raise ValueError('Input must between 1~100')\n        self.scoreValue = value\n        \ng = Grades()\n\ng.score = 7\n\nprint(g.score)\n#output => 7\n```\n\n\n可以看出，我们可以像使用属性一样来使用函数，不过注意scoreValue不能写成score，除此之外的都可以，\n推荐写成私有变量  _score 的形式，这里为了便于理解只写成了scoreValue\n\n那为什么我们要使用它以及什么时候应该使用它呢\n请看官方解释https://www.programiz.com/Python-programming/property的\n译文在这http://Python.jobbole.com/81967/","slug":"Python中的-property装饰器","published":1,"updated":"2018-03-12T15:33:31.493Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq44001ubcusj5zoby8c","content":"<p>Python中的@property<br>使用@property可以使我们的函数像属性一样被使用，具体使用方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Grades</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">score</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.scoreValue</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @score.setter</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">score</span><span class=\"params\">(self,value)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> isinstance(value, int):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'Input must be a Integer'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> value&lt;<span class=\"number\">0</span> <span class=\"keyword\">or</span> value&gt;<span class=\"number\">100</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'Input must between 1~100'</span>)</span><br><span class=\"line\">        self.scoreValue = value</span><br><span class=\"line\">        </span><br><span class=\"line\">g = Grades()</span><br><span class=\"line\"></span><br><span class=\"line\">g.score = <span class=\"number\">7</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(g.score)</span><br><span class=\"line\"><span class=\"comment\">#output =&gt; 7</span></span><br></pre></td></tr></table></figure>\n<p>可以看出，我们可以像使用属性一样来使用函数，不过注意scoreValue不能写成score，除此之外的都可以，<br>推荐写成私有变量  _score 的形式，这里为了便于理解只写成了scoreValue</p>\n<p>那为什么我们要使用它以及什么时候应该使用它呢<br>请看官方解释<a href=\"https://www.programiz.com/Python-programming/property的\" target=\"_blank\" rel=\"noopener\">https://www.programiz.com/Python-programming/property的</a><br>译文在这<a href=\"http://Python.jobbole.com/81967/\" target=\"_blank\" rel=\"noopener\">http://Python.jobbole.com/81967/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Python中的@property<br>使用@property可以使我们的函数像属性一样被使用，具体使用方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Grades</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">score</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.scoreValue</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @score.setter</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">score</span><span class=\"params\">(self,value)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> isinstance(value, int):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'Input must be a Integer'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> value&lt;<span class=\"number\">0</span> <span class=\"keyword\">or</span> value&gt;<span class=\"number\">100</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ValueError(<span class=\"string\">'Input must between 1~100'</span>)</span><br><span class=\"line\">        self.scoreValue = value</span><br><span class=\"line\">        </span><br><span class=\"line\">g = Grades()</span><br><span class=\"line\"></span><br><span class=\"line\">g.score = <span class=\"number\">7</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(g.score)</span><br><span class=\"line\"><span class=\"comment\">#output =&gt; 7</span></span><br></pre></td></tr></table></figure>\n<p>可以看出，我们可以像使用属性一样来使用函数，不过注意scoreValue不能写成score，除此之外的都可以，<br>推荐写成私有变量  _score 的形式，这里为了便于理解只写成了scoreValue</p>\n<p>那为什么我们要使用它以及什么时候应该使用它呢<br>请看官方解释<a href=\"https://www.programiz.com/Python-programming/property的\" target=\"_blank\" rel=\"noopener\">https://www.programiz.com/Python-programming/property的</a><br>译文在这<a href=\"http://Python.jobbole.com/81967/\" target=\"_blank\" rel=\"noopener\">http://Python.jobbole.com/81967/</a></p>\n"},{"title":"Python中的load,loads,dump,dumps函数区别","date":"2018-03-04T16:32:53.000Z","_content":"实例如下：\n\\# Writing JSON data 将data写入到data.json文件中\n```python\nwith open('data.json', 'w') as f:\n    json.dump(data, f)\n```\n\\# Reading data back 将data.json中数据取出放到data.json里\n```python\nwith open('data.json', 'r') as f:\n    data = json.load(f)\n```\n\n简单来说：\n\npython中loads()和load()的区别\nloads()操作的是字符串，将str转化成字典\nload()的操作与文件有关\ndumps()操作的是字典，将字典转化成str\ndump()操作也是与文件有关","source":"_posts/Python中的load-loads-dump-dumps函数区别.md","raw":"---\ntitle: 'Python中的load,loads,dump,dumps函数区别'\ndate: 2018-03-05 00:32:53\ntags:\ncategories: Python\n---\n实例如下：\n\\# Writing JSON data 将data写入到data.json文件中\n```python\nwith open('data.json', 'w') as f:\n    json.dump(data, f)\n```\n\\# Reading data back 将data.json中数据取出放到data.json里\n```python\nwith open('data.json', 'r') as f:\n    data = json.load(f)\n```\n\n简单来说：\n\npython中loads()和load()的区别\nloads()操作的是字符串，将str转化成字典\nload()的操作与文件有关\ndumps()操作的是字典，将字典转化成str\ndump()操作也是与文件有关","slug":"Python中的load-loads-dump-dumps函数区别","published":1,"updated":"2018-03-04T16:35:22.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq44001wbcus91hxz88h","content":"<p>实例如下：<br># Writing JSON data 将data写入到data.json文件中<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'data.json'</span>, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    json.dump(data, f)</span><br></pre></td></tr></table></figure></p>\n<p># Reading data back 将data.json中数据取出放到data.json里<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'data.json'</span>, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    data = json.load(f)</span><br></pre></td></tr></table></figure></p>\n<p>简单来说：</p>\n<p>python中loads()和load()的区别<br>loads()操作的是字符串，将str转化成字典<br>load()的操作与文件有关<br>dumps()操作的是字典，将字典转化成str<br>dump()操作也是与文件有关</p>\n","site":{"data":{}},"excerpt":"","more":"<p>实例如下：<br># Writing JSON data 将data写入到data.json文件中<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'data.json'</span>, <span class=\"string\">'w'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    json.dump(data, f)</span><br></pre></td></tr></table></figure></p>\n<p># Reading data back 将data.json中数据取出放到data.json里<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">'data.json'</span>, <span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    data = json.load(f)</span><br></pre></td></tr></table></figure></p>\n<p>简单来说：</p>\n<p>python中loads()和load()的区别<br>loads()操作的是字符串，将str转化成字典<br>load()的操作与文件有关<br>dumps()操作的是字典，将字典转化成str<br>dump()操作也是与文件有关</p>\n"},{"title":"Python中的@staticmethod和@classmethod实例解析","date":"2017-12-19T15:32:29.000Z","_content":"\nPython中的装饰器@classmethod和@staticmethod：\n一般来说，如果需要使用某个类的方法，需要先实例化再调用，而使用@staticmethod或@classmethod，就可以不需要实例化，直接类名.方法名()来调用。\n@staticmethod不需要表示自身对象的self和自身类的cls参数，就跟使用函数一样。\n@classmethod也不需要self参数，但第一个参数需要是表示自身类的cls参数\n好处：以后重构类的时候不必要修改构造函数，只需要额外添加你要处理的函数，然后使用装饰符 @classmethod 就可以了\n具体用法如下\n\n```Python\nclass Foo:\n    def __init__(self):\n        print('init is called')\n    def speak(self):\n        print('speaking ')\n    @staticmethod\n    def static_method():\n        print('this is a static method')\n    @classmethod\n    def class_method(cls):\n        print('this is a class method')\nFoo.static_method()\nFoo.class_method()\n#Foo.speak()\n```\n","source":"_posts/Python中的-staticmethod和-classmethod实例解析.md","raw":"---\ntitle: Python中的@staticmethod和@classmethod实例解析\ndate: 2017-12-19 23:32:29\ntags: Decorator\ncategories: Python\n---\n\nPython中的装饰器@classmethod和@staticmethod：\n一般来说，如果需要使用某个类的方法，需要先实例化再调用，而使用@staticmethod或@classmethod，就可以不需要实例化，直接类名.方法名()来调用。\n@staticmethod不需要表示自身对象的self和自身类的cls参数，就跟使用函数一样。\n@classmethod也不需要self参数，但第一个参数需要是表示自身类的cls参数\n好处：以后重构类的时候不必要修改构造函数，只需要额外添加你要处理的函数，然后使用装饰符 @classmethod 就可以了\n具体用法如下\n\n```Python\nclass Foo:\n    def __init__(self):\n        print('init is called')\n    def speak(self):\n        print('speaking ')\n    @staticmethod\n    def static_method():\n        print('this is a static method')\n    @classmethod\n    def class_method(cls):\n        print('this is a class method')\nFoo.static_method()\nFoo.class_method()\n#Foo.speak()\n```\n","slug":"Python中的-staticmethod和-classmethod实例解析","published":1,"updated":"2018-03-12T15:33:44.939Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq440020bcus1shoatwo","content":"<p>Python中的装饰器@classmethod和@staticmethod：<br>一般来说，如果需要使用某个类的方法，需要先实例化再调用，而使用@staticmethod或@classmethod，就可以不需要实例化，直接类名.方法名()来调用。<br>@staticmethod不需要表示自身对象的self和自身类的cls参数，就跟使用函数一样。<br>@classmethod也不需要self参数，但第一个参数需要是表示自身类的cls参数<br>好处：以后重构类的时候不必要修改构造函数，只需要额外添加你要处理的函数，然后使用装饰符 @classmethod 就可以了<br>具体用法如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'init is called'</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">speak</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'speaking '</span>)</span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">static_method</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'this is a static method'</span>)</span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">class_method</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'this is a class method'</span>)</span><br><span class=\"line\">Foo.static_method()</span><br><span class=\"line\">Foo.class_method()</span><br><span class=\"line\"><span class=\"comment\">#Foo.speak()</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>Python中的装饰器@classmethod和@staticmethod：<br>一般来说，如果需要使用某个类的方法，需要先实例化再调用，而使用@staticmethod或@classmethod，就可以不需要实例化，直接类名.方法名()来调用。<br>@staticmethod不需要表示自身对象的self和自身类的cls参数，就跟使用函数一样。<br>@classmethod也不需要self参数，但第一个参数需要是表示自身类的cls参数<br>好处：以后重构类的时候不必要修改构造函数，只需要额外添加你要处理的函数，然后使用装饰符 @classmethod 就可以了<br>具体用法如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'init is called'</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">speak</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'speaking '</span>)</span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">static_method</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'this is a static method'</span>)</span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">class_method</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'this is a class method'</span>)</span><br><span class=\"line\">Foo.static_method()</span><br><span class=\"line\">Foo.class_method()</span><br><span class=\"line\"><span class=\"comment\">#Foo.speak()</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Python中的右斜杠x含义","date":"2018-01-29T13:55:50.000Z","_content":"\n\n\nPython中的'\\x'代表后面的字符是十六进制位\n比如'\\xaa'就相当于chr(0xaa)\n'\\xaa'是一个Unicode字符串\n参考官方文档：\nhttps://docs.Python.org/3/reference/lexical_analysis.html#string-and-bytes-literals","source":"_posts/Python中的右斜杠x含义.md","raw":"---\ntitle: Python中的右斜杠x含义\ndate: 2018-01-29 21:55:50\ntags:\ncategories: Python\n---\n\n\n\nPython中的'\\x'代表后面的字符是十六进制位\n比如'\\xaa'就相当于chr(0xaa)\n'\\xaa'是一个Unicode字符串\n参考官方文档：\nhttps://docs.Python.org/3/reference/lexical_analysis.html#string-and-bytes-literals","slug":"Python中的右斜杠x含义","published":1,"updated":"2018-03-01T17:20:47.938Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq440022bcusv8xqa96d","content":"<p>Python中的’\\x’代表后面的字符是十六进制位<br>比如’\\xaa’就相当于chr(0xaa)<br>‘\\xaa’是一个Unicode字符串<br>参考官方文档：<br><a href=\"https://docs.Python.org/3/reference/lexical_analysis.html#string-and-bytes-literals\" target=\"_blank\" rel=\"noopener\">https://docs.Python.org/3/reference/lexical_analysis.html#string-and-bytes-literals</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Python中的’\\x’代表后面的字符是十六进制位<br>比如’\\xaa’就相当于chr(0xaa)<br>‘\\xaa’是一个Unicode字符串<br>参考官方文档：<br><a href=\"https://docs.Python.org/3/reference/lexical_analysis.html#string-and-bytes-literals\" target=\"_blank\" rel=\"noopener\">https://docs.Python.org/3/reference/lexical_analysis.html#string-and-bytes-literals</a></p>\n"},{"title":"Python实现快排算法","date":"2018-01-30T13:13:30.000Z","_content":"","source":"_posts/Python实现快排算法.md","raw":"---\ntitle: Python实现快排算法\ndate: 2018-01-30 21:13:30\ntags:\ncategories:\n---\n","slug":"Python实现快排算法","published":1,"updated":"2018-03-01T17:20:47.938Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq4k0024bcusd7q84mgy","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Python计算斐波那契数列的两种方法","date":"2018-01-29T13:59:48.000Z","_content":"\n计算斐波那契数列的两种方法，递归和迭代\n\n\n```Python\ndef fib_recursion(n):\n    assert n>=0, 'Parameter must be a positive integer'\n    if n <= 1:\n        return n\n    else:\n        return fib_recursion(n-1) + fib_recursion(n-2)\n      \ndef fib_iteration(n):\n    assert n>0, 'Parameter must be a positive integer'\n    a,b=0,1\n    for i in range(n):\n        a,b =b,a+b\n    return a\n\nprint(fib_iteration(10))\n#output => 55\nprint(fib_recursion(10))\n#output => 55\n```\n\nPython里assert用法\n\nassert condition,  AssertionErrorString\n举例\nassert 2>5, '2 is less than 5'\n执行的话就出错误信息就会包含'2 is less than 5'","source":"_posts/Python计算斐波那契数列的两种方法.md","raw":"---\ntitle: Python计算斐波那契数列的两种方法\ndate: 2018-01-29 21:59:48\ntags: Fibonacci \ncategories: problems\n---\n\n计算斐波那契数列的两种方法，递归和迭代\n\n\n```Python\ndef fib_recursion(n):\n    assert n>=0, 'Parameter must be a positive integer'\n    if n <= 1:\n        return n\n    else:\n        return fib_recursion(n-1) + fib_recursion(n-2)\n      \ndef fib_iteration(n):\n    assert n>0, 'Parameter must be a positive integer'\n    a,b=0,1\n    for i in range(n):\n        a,b =b,a+b\n    return a\n\nprint(fib_iteration(10))\n#output => 55\nprint(fib_recursion(10))\n#output => 55\n```\n\nPython里assert用法\n\nassert condition,  AssertionErrorString\n举例\nassert 2>5, '2 is less than 5'\n执行的话就出错误信息就会包含'2 is less than 5'","slug":"Python计算斐波那契数列的两种方法","published":1,"updated":"2018-03-01T17:20:47.954Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq4k0028bcus7g0is6mt","content":"<p>计算斐波那契数列的两种方法，递归和迭代</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib_recursion</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> n&gt;=<span class=\"number\">0</span>, <span class=\"string\">'Parameter must be a positive integer'</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fib_recursion(n<span class=\"number\">-1</span>) + fib_recursion(n<span class=\"number\">-2</span>)</span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib_iteration</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> n&gt;<span class=\"number\">0</span>, <span class=\"string\">'Parameter must be a positive integer'</span></span><br><span class=\"line\">    a,b=<span class=\"number\">0</span>,<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">        a,b =b,a+b</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\">print(fib_iteration(<span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"comment\">#output =&gt; 55</span></span><br><span class=\"line\">print(fib_recursion(<span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"comment\">#output =&gt; 55</span></span><br></pre></td></tr></table></figure>\n<p>Python里assert用法</p>\n<p>assert condition,  AssertionErrorString<br>举例<br>assert 2&gt;5, ‘2 is less than 5’<br>执行的话就出错误信息就会包含’2 is less than 5’</p>\n","site":{"data":{}},"excerpt":"","more":"<p>计算斐波那契数列的两种方法，递归和迭代</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib_recursion</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> n&gt;=<span class=\"number\">0</span>, <span class=\"string\">'Parameter must be a positive integer'</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> n &lt;= <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fib_recursion(n<span class=\"number\">-1</span>) + fib_recursion(n<span class=\"number\">-2</span>)</span><br><span class=\"line\">      </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fib_iteration</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">assert</span> n&gt;<span class=\"number\">0</span>, <span class=\"string\">'Parameter must be a positive integer'</span></span><br><span class=\"line\">    a,b=<span class=\"number\">0</span>,<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(n):</span><br><span class=\"line\">        a,b =b,a+b</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a</span><br><span class=\"line\"></span><br><span class=\"line\">print(fib_iteration(<span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"comment\">#output =&gt; 55</span></span><br><span class=\"line\">print(fib_recursion(<span class=\"number\">10</span>))</span><br><span class=\"line\"><span class=\"comment\">#output =&gt; 55</span></span><br></pre></td></tr></table></figure>\n<p>Python里assert用法</p>\n<p>assert condition,  AssertionErrorString<br>举例<br>assert 2&gt;5, ‘2 is less than 5’<br>执行的话就出错误信息就会包含’2 is less than 5’</p>\n"},{"title":"Rails中的MVC请求过程","date":"2018-03-12T15:49:18.000Z","_content":"\nruby on rails 请求过程\n1.浏览器向/users发起一个请求\n2.Rails的路由通过 /users 调用UsersController中的index方法\n3.index方法中定义从用户模型中读取所有用户(User.all)\n4.用户模型从数据库中读取所有用户\n5.用户模型把所有用户组成的列表返回给控制器\n6.控制器把受到的列表赋值给@users变量，然后传入index视图\n7.视图使用模板引擎把页面渲染成html\n8.控制器把html页面传递给浏览器\n\n参考链接：\n[ruby知识点](https://www.jianshu.com/p/ad0e9460ac14)","source":"_posts/Rails中的MVC请求过程.md","raw":"---\ntitle: Rails中的MVC请求过程\ndate: 2018-03-12 23:49:18\ntags: \ncategories: Ruby\n---\n\nruby on rails 请求过程\n1.浏览器向/users发起一个请求\n2.Rails的路由通过 /users 调用UsersController中的index方法\n3.index方法中定义从用户模型中读取所有用户(User.all)\n4.用户模型从数据库中读取所有用户\n5.用户模型把所有用户组成的列表返回给控制器\n6.控制器把受到的列表赋值给@users变量，然后传入index视图\n7.视图使用模板引擎把页面渲染成html\n8.控制器把html页面传递给浏览器\n\n参考链接：\n[ruby知识点](https://www.jianshu.com/p/ad0e9460ac14)","slug":"Rails中的MVC请求过程","published":1,"updated":"2018-03-12T15:51:48.839Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq4k002abcusyq5g0rnn","content":"<p>ruby on rails 请求过程<br>1.浏览器向/users发起一个请求<br>2.Rails的路由通过 /users 调用UsersController中的index方法<br>3.index方法中定义从用户模型中读取所有用户(User.all)<br>4.用户模型从数据库中读取所有用户<br>5.用户模型把所有用户组成的列表返回给控制器<br>6.控制器把受到的列表赋值给@users变量，然后传入index视图<br>7.视图使用模板引擎把页面渲染成html<br>8.控制器把html页面传递给浏览器</p>\n<p>参考链接：<br><a href=\"https://www.jianshu.com/p/ad0e9460ac14\" target=\"_blank\" rel=\"noopener\">ruby知识点</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>ruby on rails 请求过程<br>1.浏览器向/users发起一个请求<br>2.Rails的路由通过 /users 调用UsersController中的index方法<br>3.index方法中定义从用户模型中读取所有用户(User.all)<br>4.用户模型从数据库中读取所有用户<br>5.用户模型把所有用户组成的列表返回给控制器<br>6.控制器把受到的列表赋值给@users变量，然后传入index视图<br>7.视图使用模板引擎把页面渲染成html<br>8.控制器把html页面传递给浏览器</p>\n<p>参考链接：<br><a href=\"https://www.jianshu.com/p/ad0e9460ac14\" target=\"_blank\" rel=\"noopener\">ruby知识点</a></p>\n"},{"title":"Python中的编码与解码","date":"2018-01-29T13:47:50.000Z","_content":"\nPython3中文本总是Unicode,由str类型进行表示;\n\n二进制数据使用bytes进行表示\n\n#####字符串通过编码成为字节码，字节码通过解码成为字符串。\n\nstr类型编码采用encode()方法编码\nstr.encode() 可以接受参数表明编码方式\nstr.encode('utf-8')\n\nbytes类型采用decode()方法解码\nbytes.decode()同样可以接受参数表明解码方式\nbytes.decode('utf-8')\n不加参数的话，默认采用utf-8编码和解码\n官方文档\nhttps://docs.Python.org/3/library/stdtypes.html?highlight=decode#str.encode\nhttps://docs.Python.org/3/library/stdtypes.html?highlight=decode#bytes.decode\n\n\n\n","source":"_posts/Python中的编码与解码.md","raw":"---\ntitle: Python中的编码与解码\ndate: 2018-01-29 21:47:50\ntags:\ncategories: Python\n---\n\nPython3中文本总是Unicode,由str类型进行表示;\n\n二进制数据使用bytes进行表示\n\n#####字符串通过编码成为字节码，字节码通过解码成为字符串。\n\nstr类型编码采用encode()方法编码\nstr.encode() 可以接受参数表明编码方式\nstr.encode('utf-8')\n\nbytes类型采用decode()方法解码\nbytes.decode()同样可以接受参数表明解码方式\nbytes.decode('utf-8')\n不加参数的话，默认采用utf-8编码和解码\n官方文档\nhttps://docs.Python.org/3/library/stdtypes.html?highlight=decode#str.encode\nhttps://docs.Python.org/3/library/stdtypes.html?highlight=decode#bytes.decode\n\n\n\n","slug":"Python中的编码与解码","published":1,"updated":"2018-03-01T17:20:47.938Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq4k002ebcusysbcxqw5","content":"<p>Python3中文本总是Unicode,由str类型进行表示;</p>\n<p>二进制数据使用bytes进行表示</p>\n<p>#####字符串通过编码成为字节码，字节码通过解码成为字符串。</p>\n<p>str类型编码采用encode()方法编码<br>str.encode() 可以接受参数表明编码方式<br>str.encode(‘utf-8’)</p>\n<p>bytes类型采用decode()方法解码<br>bytes.decode()同样可以接受参数表明解码方式<br>bytes.decode(‘utf-8’)<br>不加参数的话，默认采用utf-8编码和解码<br>官方文档<br><a href=\"https://docs.Python.org/3/library/stdtypes.html?highlight=decode#str.encode\" target=\"_blank\" rel=\"noopener\">https://docs.Python.org/3/library/stdtypes.html?highlight=decode#str.encode</a><br><a href=\"https://docs.Python.org/3/library/stdtypes.html?highlight=decode#bytes.decode\" target=\"_blank\" rel=\"noopener\">https://docs.Python.org/3/library/stdtypes.html?highlight=decode#bytes.decode</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Python3中文本总是Unicode,由str类型进行表示;</p>\n<p>二进制数据使用bytes进行表示</p>\n<p>#####字符串通过编码成为字节码，字节码通过解码成为字符串。</p>\n<p>str类型编码采用encode()方法编码<br>str.encode() 可以接受参数表明编码方式<br>str.encode(‘utf-8’)</p>\n<p>bytes类型采用decode()方法解码<br>bytes.decode()同样可以接受参数表明解码方式<br>bytes.decode(‘utf-8’)<br>不加参数的话，默认采用utf-8编码和解码<br>官方文档<br><a href=\"https://docs.Python.org/3/library/stdtypes.html?highlight=decode#str.encode\" target=\"_blank\" rel=\"noopener\">https://docs.Python.org/3/library/stdtypes.html?highlight=decode#str.encode</a><br><a href=\"https://docs.Python.org/3/library/stdtypes.html?highlight=decode#bytes.decode\" target=\"_blank\" rel=\"noopener\">https://docs.Python.org/3/library/stdtypes.html?highlight=decode#bytes.decode</a></p>\n"},{"title":"Ruby中字符串转数组和数组去重","date":"2018-01-23T15:27:09.000Z","_content":"\n以字符串\"games,fun,sports\"为例\n\n1.可以使用split(',')转化成数组\n\"games,fun,sports\".split(',') # => [\"games\", \"fun\", \"sports\"]\n\n2.如果是JSON格式的字符串，例如'[\"games\", \"fun\", \"sports\"]'\n\n'[\"games\", \"fun\", \"sports\"]'.split(',')  # =>  [\"[\\\"games\\\"\", \" \\\"fun\\\"\", \" \\\"sports\\\"]\"]\n\n 不是我们想要的结果,此时可以使用json库来格式化字符串,此时可以\n\nrequire 'json'\nJSON['[\"games\", \"fun\", \"sports\"]'] # => [\"games\", \"fun\", \"sports\"]\n\n即可\n原文是来自stackoverflow的问题\n原文链接https://stackoverflow.com/questions/39337794/how-to-convert-a-string-to-an-array-using-Ruby-on-rails\n\n\n\n数组去重可以：\n\narray = array.uniq\nuniq 方法删除所有重复的元素，并保留数组中的所有唯一元素。","source":"_posts/Ruby中字符串转数组.md","raw":"---\ntitle: Ruby中字符串转数组和数组去重\ndate: 2018-01-23 23:27:09\ntags: \ncategories: Ruby\n---\n\n以字符串\"games,fun,sports\"为例\n\n1.可以使用split(',')转化成数组\n\"games,fun,sports\".split(',') # => [\"games\", \"fun\", \"sports\"]\n\n2.如果是JSON格式的字符串，例如'[\"games\", \"fun\", \"sports\"]'\n\n'[\"games\", \"fun\", \"sports\"]'.split(',')  # =>  [\"[\\\"games\\\"\", \" \\\"fun\\\"\", \" \\\"sports\\\"]\"]\n\n 不是我们想要的结果,此时可以使用json库来格式化字符串,此时可以\n\nrequire 'json'\nJSON['[\"games\", \"fun\", \"sports\"]'] # => [\"games\", \"fun\", \"sports\"]\n\n即可\n原文是来自stackoverflow的问题\n原文链接https://stackoverflow.com/questions/39337794/how-to-convert-a-string-to-an-array-using-Ruby-on-rails\n\n\n\n数组去重可以：\n\narray = array.uniq\nuniq 方法删除所有重复的元素，并保留数组中的所有唯一元素。","slug":"Ruby中字符串转数组","published":1,"updated":"2018-03-01T17:20:47.954Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq4k002hbcusmenv8oov","content":"<p>以字符串”games,fun,sports”为例</p>\n<p>1.可以使用split(‘,’)转化成数组<br>“games,fun,sports”.split(‘,’) # =&gt; [“games”, “fun”, “sports”]</p>\n<p>2.如果是JSON格式的字符串，例如’[“games”, “fun”, “sports”]’</p>\n<p>‘[“games”, “fun”, “sports”]’.split(‘,’)  # =&gt;  [“[\\”games\\””, “ \\”fun\\””, “ \\”sports\\”]”]</p>\n<p> 不是我们想要的结果,此时可以使用json库来格式化字符串,此时可以</p>\n<p>require ‘json’<br>JSON[‘[“games”, “fun”, “sports”]’] # =&gt; [“games”, “fun”, “sports”]</p>\n<p>即可<br>原文是来自stackoverflow的问题<br>原文链接<a href=\"https://stackoverflow.com/questions/39337794/how-to-convert-a-string-to-an-array-using-Ruby-on-rails\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/39337794/how-to-convert-a-string-to-an-array-using-Ruby-on-rails</a></p>\n<p>数组去重可以：</p>\n<p>array = array.uniq<br>uniq 方法删除所有重复的元素，并保留数组中的所有唯一元素。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>以字符串”games,fun,sports”为例</p>\n<p>1.可以使用split(‘,’)转化成数组<br>“games,fun,sports”.split(‘,’) # =&gt; [“games”, “fun”, “sports”]</p>\n<p>2.如果是JSON格式的字符串，例如’[“games”, “fun”, “sports”]’</p>\n<p>‘[“games”, “fun”, “sports”]’.split(‘,’)  # =&gt;  [“[\\”games\\””, “ \\”fun\\””, “ \\”sports\\”]”]</p>\n<p> 不是我们想要的结果,此时可以使用json库来格式化字符串,此时可以</p>\n<p>require ‘json’<br>JSON[‘[“games”, “fun”, “sports”]’] # =&gt; [“games”, “fun”, “sports”]</p>\n<p>即可<br>原文是来自stackoverflow的问题<br>原文链接<a href=\"https://stackoverflow.com/questions/39337794/how-to-convert-a-string-to-an-array-using-Ruby-on-rails\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/39337794/how-to-convert-a-string-to-an-array-using-Ruby-on-rails</a></p>\n<p>数组去重可以：</p>\n<p>array = array.uniq<br>uniq 方法删除所有重复的元素，并保留数组中的所有唯一元素。</p>\n"},{"title":"Ruby中的attr_accessor是什么","date":"2018-03-19T13:01:04.000Z","_content":"\n﻿ruby中attr_accessor的作用\n\n假设我们新建了一个类Person\n\n```ruby\nclass Person\nend\n\nperson = Person.new\nperson.name # => 运行出错，NoMethodError\n```\n\n很明显我们没有定义name方法，接下来定义name方法\n\n```ruby\nclass Person\n  def name\n    @name # simply returning an instance variable @name\n  end\nend\n\nperson = Person.new\nperson.name # => nil\nperson.name = \"Dennis\" # => no method error\n```\n\n此时我们可以读取name的值，但是不能给name赋值，这是两个不同的方法前一个被称为reader后一个被称为writer，上面出错的原因是我们没有创建writer,接下来就来创建它吧\n\n```ruby\nclass Person\n  def name\n    @name\n  end\n\n  def name=(str)\n    @name = str\n  end\nend\n\nperson = Person.new\nperson.name = 'Dennis'\nperson.name # => \"Dennis\"\n```\n\n非常棒，现在我们使用reader和writer方法既可以读取实例变量@name也可以给它赋值了。不过，这样的操作是非常频繁的，为什么我们每次都要浪费时间来写这些函数呢，我们可以更以更简单的方式实现它\n\n```ruby\nclass Person\n  attr_reader :name\n  attr_writer :name\nend\n```\n\n这样看起来好像也有点重复，当你需要reader和writer时只需要使用accessor就可以了\n\n```ruby\nclass Person\n  attr_accessor :name\nend\n\nperson = Person.new\nperson.name = \"Dennis\"\nperson.name # => \"Dennis\"\n```\n\n同样生效了，猜测:此时person类中的实例变量@name就像我们手动创建它一样，你可以在其他方法中使用它\n\n```ruby\nclass Person\n  attr_accessor :name\n\n  def greeting\n    \"Hello #{@name}\"\n  end\nend\n\nperson = Person.new\nperson.name = \"Dennis\"\nperson.greeting # => \"Hello Dennis\"\n```\n\n就是这样了，为了理解attr_reader, attr_writer,attr_accessor是如何生成方法的，请阅读其他答案，书，还有ruby的官方文档\n原文链接：[What is attr_accessor in Ruby?](https://stackoverflow.com/questions/4370960/what-is-attr-accessor-in-ruby)","source":"_posts/Ruby中的attr-accessor是什么.md","raw":"---\ntitle: Ruby中的attr_accessor是什么\ndate: 2018-03-19 21:01:04\ntags:\ncategories: Ruby\n---\n\n﻿ruby中attr_accessor的作用\n\n假设我们新建了一个类Person\n\n```ruby\nclass Person\nend\n\nperson = Person.new\nperson.name # => 运行出错，NoMethodError\n```\n\n很明显我们没有定义name方法，接下来定义name方法\n\n```ruby\nclass Person\n  def name\n    @name # simply returning an instance variable @name\n  end\nend\n\nperson = Person.new\nperson.name # => nil\nperson.name = \"Dennis\" # => no method error\n```\n\n此时我们可以读取name的值，但是不能给name赋值，这是两个不同的方法前一个被称为reader后一个被称为writer，上面出错的原因是我们没有创建writer,接下来就来创建它吧\n\n```ruby\nclass Person\n  def name\n    @name\n  end\n\n  def name=(str)\n    @name = str\n  end\nend\n\nperson = Person.new\nperson.name = 'Dennis'\nperson.name # => \"Dennis\"\n```\n\n非常棒，现在我们使用reader和writer方法既可以读取实例变量@name也可以给它赋值了。不过，这样的操作是非常频繁的，为什么我们每次都要浪费时间来写这些函数呢，我们可以更以更简单的方式实现它\n\n```ruby\nclass Person\n  attr_reader :name\n  attr_writer :name\nend\n```\n\n这样看起来好像也有点重复，当你需要reader和writer时只需要使用accessor就可以了\n\n```ruby\nclass Person\n  attr_accessor :name\nend\n\nperson = Person.new\nperson.name = \"Dennis\"\nperson.name # => \"Dennis\"\n```\n\n同样生效了，猜测:此时person类中的实例变量@name就像我们手动创建它一样，你可以在其他方法中使用它\n\n```ruby\nclass Person\n  attr_accessor :name\n\n  def greeting\n    \"Hello #{@name}\"\n  end\nend\n\nperson = Person.new\nperson.name = \"Dennis\"\nperson.greeting # => \"Hello Dennis\"\n```\n\n就是这样了，为了理解attr_reader, attr_writer,attr_accessor是如何生成方法的，请阅读其他答案，书，还有ruby的官方文档\n原文链接：[What is attr_accessor in Ruby?](https://stackoverflow.com/questions/4370960/what-is-attr-accessor-in-ruby)","slug":"Ruby中的attr-accessor是什么","published":1,"updated":"2018-03-19T13:05:36.392Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq4k002jbcusapyjac1e","content":"<p>﻿ruby中attr_accessor的作用</p>\n<p>假设我们新建了一个类Person</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">person = Person.new</span><br><span class=\"line\">person.name <span class=\"comment\"># =&gt; 运行出错，NoMethodError</span></span><br></pre></td></tr></table></figure>\n<p>很明显我们没有定义name方法，接下来定义name方法</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">name</span></span></span><br><span class=\"line\">    @name <span class=\"comment\"># simply returning an instance variable <span class=\"doctag\">@name</span></span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">person = Person.new</span><br><span class=\"line\">person.name <span class=\"comment\"># =&gt; nil</span></span><br><span class=\"line\">person.name = <span class=\"string\">\"Dennis\"</span> <span class=\"comment\"># =&gt; no method error</span></span><br></pre></td></tr></table></figure>\n<p>此时我们可以读取name的值，但是不能给name赋值，这是两个不同的方法前一个被称为reader后一个被称为writer，上面出错的原因是我们没有创建writer,接下来就来创建它吧</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">name</span></span></span><br><span class=\"line\">    @name</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">name=</span><span class=\"params\">(str)</span></span></span><br><span class=\"line\">    @name = str</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">person = Person.new</span><br><span class=\"line\">person.name = <span class=\"string\">'Dennis'</span></span><br><span class=\"line\">person.name <span class=\"comment\"># =&gt; \"Dennis\"</span></span><br></pre></td></tr></table></figure>\n<p>非常棒，现在我们使用reader和writer方法既可以读取实例变量@name也可以给它赋值了。不过，这样的操作是非常频繁的，为什么我们每次都要浪费时间来写这些函数呢，我们可以更以更简单的方式实现它</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\">  <span class=\"keyword\">attr_reader</span> <span class=\"symbol\">:name</span></span><br><span class=\"line\">  <span class=\"keyword\">attr_writer</span> <span class=\"symbol\">:name</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>这样看起来好像也有点重复，当你需要reader和writer时只需要使用accessor就可以了</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\">  <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:name</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">person = Person.new</span><br><span class=\"line\">person.name = <span class=\"string\">\"Dennis\"</span></span><br><span class=\"line\">person.name <span class=\"comment\"># =&gt; \"Dennis\"</span></span><br></pre></td></tr></table></figure>\n<p>同样生效了，猜测:此时person类中的实例变量@name就像我们手动创建它一样，你可以在其他方法中使用它</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\">  <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:name</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greeting</span></span></span><br><span class=\"line\">    <span class=\"string\">\"Hello <span class=\"subst\">#&#123;@name&#125;</span>\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">person = Person.new</span><br><span class=\"line\">person.name = <span class=\"string\">\"Dennis\"</span></span><br><span class=\"line\">person.greeting <span class=\"comment\"># =&gt; \"Hello Dennis\"</span></span><br></pre></td></tr></table></figure>\n<p>就是这样了，为了理解attr_reader, attr_writer,attr_accessor是如何生成方法的，请阅读其他答案，书，还有ruby的官方文档<br>原文链接：<a href=\"https://stackoverflow.com/questions/4370960/what-is-attr-accessor-in-ruby\" target=\"_blank\" rel=\"noopener\">What is attr_accessor in Ruby?</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>﻿ruby中attr_accessor的作用</p>\n<p>假设我们新建了一个类Person</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">person = Person.new</span><br><span class=\"line\">person.name <span class=\"comment\"># =&gt; 运行出错，NoMethodError</span></span><br></pre></td></tr></table></figure>\n<p>很明显我们没有定义name方法，接下来定义name方法</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">name</span></span></span><br><span class=\"line\">    @name <span class=\"comment\"># simply returning an instance variable <span class=\"doctag\">@name</span></span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">person = Person.new</span><br><span class=\"line\">person.name <span class=\"comment\"># =&gt; nil</span></span><br><span class=\"line\">person.name = <span class=\"string\">\"Dennis\"</span> <span class=\"comment\"># =&gt; no method error</span></span><br></pre></td></tr></table></figure>\n<p>此时我们可以读取name的值，但是不能给name赋值，这是两个不同的方法前一个被称为reader后一个被称为writer，上面出错的原因是我们没有创建writer,接下来就来创建它吧</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">name</span></span></span><br><span class=\"line\">    @name</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">name=</span><span class=\"params\">(str)</span></span></span><br><span class=\"line\">    @name = str</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">person = Person.new</span><br><span class=\"line\">person.name = <span class=\"string\">'Dennis'</span></span><br><span class=\"line\">person.name <span class=\"comment\"># =&gt; \"Dennis\"</span></span><br></pre></td></tr></table></figure>\n<p>非常棒，现在我们使用reader和writer方法既可以读取实例变量@name也可以给它赋值了。不过，这样的操作是非常频繁的，为什么我们每次都要浪费时间来写这些函数呢，我们可以更以更简单的方式实现它</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\">  <span class=\"keyword\">attr_reader</span> <span class=\"symbol\">:name</span></span><br><span class=\"line\">  <span class=\"keyword\">attr_writer</span> <span class=\"symbol\">:name</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>这样看起来好像也有点重复，当你需要reader和writer时只需要使用accessor就可以了</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\">  <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:name</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">person = Person.new</span><br><span class=\"line\">person.name = <span class=\"string\">\"Dennis\"</span></span><br><span class=\"line\">person.name <span class=\"comment\"># =&gt; \"Dennis\"</span></span><br></pre></td></tr></table></figure>\n<p>同样生效了，猜测:此时person类中的实例变量@name就像我们手动创建它一样，你可以在其他方法中使用它</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span></span><br><span class=\"line\">  <span class=\"keyword\">attr_accessor</span> <span class=\"symbol\">:name</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">greeting</span></span></span><br><span class=\"line\">    <span class=\"string\">\"Hello <span class=\"subst\">#&#123;@name&#125;</span>\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">person = Person.new</span><br><span class=\"line\">person.name = <span class=\"string\">\"Dennis\"</span></span><br><span class=\"line\">person.greeting <span class=\"comment\"># =&gt; \"Hello Dennis\"</span></span><br></pre></td></tr></table></figure>\n<p>就是这样了，为了理解attr_reader, attr_writer,attr_accessor是如何生成方法的，请阅读其他答案，书，还有ruby的官方文档<br>原文链接：<a href=\"https://stackoverflow.com/questions/4370960/what-is-attr-accessor-in-ruby\" target=\"_blank\" rel=\"noopener\">What is attr_accessor in Ruby?</a></p>\n"},{"title":"Ruby正则表达式中替换字符串的几种方法","date":"2018-03-25T13:41:56.000Z","_content":"\nRuby正则表达式替换字符串有sub,sub!,gsub,gsub!几种方法，下面介绍下它们的区别\n\n首先是sub()+gsub()的区别\nsub只替换第一次匹配，gsub（g:global）会替换所有的匹配，没有匹配到返回原字符串的copy\n\n```\nstr = \"ABDADA\"\n\nnew_str = str.sub(/A/, \"\") \t#返回\"BDADA\"\n\nnew_str2 = str.gsub(/A/, \"\")\t#返回\"BDD\"\n```\n\n\n如果想修改原始字符串用sub!()和gsub!()，没有匹配到返回nil。\n\n```\nirb(main):077:0> str = \"ABDADA\"\n\n=> \"ABDADA\"\n\nirb(main):078:0> str.sub!(/A/, \"*\")\n\n=> \"*BDADA\"\n\nirb(main):079:0> str\n\n=> \"*BDADA\"\n```\n","source":"_posts/Ruby正则表达式中替换字符串的几种方法.md","raw":"---\ntitle: Ruby正则表达式中替换字符串的几种方法\ndate: 2018-03-25 21:41:56\ntags: regex\ncategories: Ruby\n---\n\nRuby正则表达式替换字符串有sub,sub!,gsub,gsub!几种方法，下面介绍下它们的区别\n\n首先是sub()+gsub()的区别\nsub只替换第一次匹配，gsub（g:global）会替换所有的匹配，没有匹配到返回原字符串的copy\n\n```\nstr = \"ABDADA\"\n\nnew_str = str.sub(/A/, \"\") \t#返回\"BDADA\"\n\nnew_str2 = str.gsub(/A/, \"\")\t#返回\"BDD\"\n```\n\n\n如果想修改原始字符串用sub!()和gsub!()，没有匹配到返回nil。\n\n```\nirb(main):077:0> str = \"ABDADA\"\n\n=> \"ABDADA\"\n\nirb(main):078:0> str.sub!(/A/, \"*\")\n\n=> \"*BDADA\"\n\nirb(main):079:0> str\n\n=> \"*BDADA\"\n```\n","slug":"Ruby正则表达式中替换字符串的几种方法","published":1,"updated":"2018-03-28T15:53:17.338Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq4k002mbcussvi0iha7","content":"<p>Ruby正则表达式替换字符串有sub,sub!,gsub,gsub!几种方法，下面介绍下它们的区别</p>\n<p>首先是sub()+gsub()的区别<br>sub只替换第一次匹配，gsub（g:global）会替换所有的匹配，没有匹配到返回原字符串的copy</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = &quot;ABDADA&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">new_str = str.sub(/A/, &quot;&quot;) \t#返回&quot;BDADA&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">new_str2 = str.gsub(/A/, &quot;&quot;)\t#返回&quot;BDD&quot;</span><br></pre></td></tr></table></figure>\n<p>如果想修改原始字符串用sub!()和gsub!()，没有匹配到返回nil。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">irb(main):077:0&gt; str = &quot;ABDADA&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; &quot;ABDADA&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">irb(main):078:0&gt; str.sub!(/A/, &quot;*&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; &quot;*BDADA&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">irb(main):079:0&gt; str</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; &quot;*BDADA&quot;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>Ruby正则表达式替换字符串有sub,sub!,gsub,gsub!几种方法，下面介绍下它们的区别</p>\n<p>首先是sub()+gsub()的区别<br>sub只替换第一次匹配，gsub（g:global）会替换所有的匹配，没有匹配到返回原字符串的copy</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = &quot;ABDADA&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">new_str = str.sub(/A/, &quot;&quot;) \t#返回&quot;BDADA&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">new_str2 = str.gsub(/A/, &quot;&quot;)\t#返回&quot;BDD&quot;</span><br></pre></td></tr></table></figure>\n<p>如果想修改原始字符串用sub!()和gsub!()，没有匹配到返回nil。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">irb(main):077:0&gt; str = &quot;ABDADA&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; &quot;ABDADA&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">irb(main):078:0&gt; str.sub!(/A/, &quot;*&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; &quot;*BDADA&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">irb(main):079:0&gt; str</span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; &quot;*BDADA&quot;</span><br></pre></td></tr></table></figure>\n"},{"title":"VPS设置SSH密钥登录","date":"2018-03-19T13:08:10.000Z","_content":"\n在vultr上买的vps,每天都有人企图暴力破解我的VPS，虽然用了DenyHosts防止暴力破解，但总不能算完全安全，要是能像路由器那般设置白名单不不就万事大吉了吗，于是就找到了使用SSH Key登录这个解决办法。\n\n用以下命令可以查看别人暴力破解你SSH密码登录的情况\n\n```\ngrep \"Failed password for invalid user\" /var/log/secure | awk '{print $13}' | sort | uniq -c | sort -nr | more\n```\n\n[](http://oevfty3i3.bkt.clouddn.com/20170528149595407252948.jpg?imageView2/0/format/jpg)\n\n原理简略如下：\n\n>用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。\n\n\n\n1.首先生成密钥对\n\n```\n[root@host ~]$ ssh-keygen -t rsa <== 建立密钥对，之后一路回车\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/root/.ssh/id_rsa): <== 按 Enter\nCreated directory '/root/.ssh'.\nEnter passphrase (empty for no passphrase): <== 输入密钥锁码，或直接按 Enter 留空\nEnter same passphrase again: <== 再输入一遍密钥锁码\nYour identification has been saved in /root/.ssh/id_rsa. <== 私钥\nYour public key has been saved in /root/.ssh/id_rsa.pub. <== 公钥\n```\n\n生成后将立马id_rsa从VPS拖下来到本机中，以免后面设置成只能密钥登录无法密码登录时无法登录\n\n2.修改公钥名\n\n```\n[root@host ~]$ cd /root/.ssh\n将id_rsa.pub 改名为authorized_keys\n[root@host ~]$ mv id_rsa.pub authorized_keys\n```\n\n3.修改sshd_config配置文件\n\n```\nRSAAuthentication yes #RSA认证\nPubkeyAuthentication yes #开启公钥验证\nAuthorizedKeysFile .ssh/authorized_keys #验证文件路径\nPasswordAuthentication no #禁止密码认证\nPermitEmptyPasswords no #禁止空密码\n```\n\n若有的配置项找不到（比如RSAAuthentication）就忽略掉\n\n4.重启SSH服务\n\n```\nsystemctl restart sshd\n```\n\n5.登录\n\n> 如果你用的是Window系统要登录VPS需要将私钥下载到客户端，然后转换为 PuTTY 能使用的格式\n\n> 使用 WinSCP、SFTP 等工具将私钥文件 id_rsa 下载到客户端机器上。然后打开 PuTTYGen，单击 Actions 中的 Load 按钮，载入你刚才下载到的私钥文件。如果你刚才设置了密钥锁码，这时则需要输入。\n\n> 载入成功后，PuTTYGen 会显示密钥相关的信息。在 Key comment 中键入对密钥的说明信息，然后单击 Save private key 按钮即可将私钥文件存放为 PuTTY 能使用的格式。\n\n> 今后，当你使用 PuTTY 登录时，可以在左侧的 Connection -> SSH -> Auth 中的 Private key file for authentication: 处选择你的私钥文件，然后即可登录了，过程中只需输入密钥锁码即可。\n\n\n\n关于手机远程登录设置SSH key，我使用的是JuiceSSH,版本为2.1.4\n\n导入私钥过程\n\n1. 将私钥传到手机里\n2. 打开JuiceSSH, 点击Connections转到其中的 Identities.\n3. 创建认证（点击 + 符号）\n4. 设置Nickname 和username\n5. 点击\"Set (Optional)\" 设置私钥\n6. 选择 \"Smart Search\" JuiceSSH会自动搜索你手机中的SSH key，搜索到id_rsa（我的私钥）,选中，点击OK\n7. 保存这个认证（点击右上方的对勾）\n\n新建连接时将认证方式选为你刚才设置的那个认证即可\n\n\n\n参考链接：\n\n[Vultr VPS SSH密钥登录](http://zlxdike.github.io/2017/05/28/Vultr-VPS-SSH%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95/)\n\n[JuiceSSH Supported Private Key Formats](https://sonelli.freshdesk.com/support/solutions/articles/139632-juicessh-supported-private-key-formats-openssh-pem-)\n\n[SSH原理与运用（一）：远程登录](http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html)","source":"_posts/VPS设置SSH密钥登录.md","raw":"---\ntitle: VPS设置SSH密钥登录\ndate: 2018-03-19 21:08:10\ntags: shadowsocks\ncategories: tools\n---\n\n在vultr上买的vps,每天都有人企图暴力破解我的VPS，虽然用了DenyHosts防止暴力破解，但总不能算完全安全，要是能像路由器那般设置白名单不不就万事大吉了吗，于是就找到了使用SSH Key登录这个解决办法。\n\n用以下命令可以查看别人暴力破解你SSH密码登录的情况\n\n```\ngrep \"Failed password for invalid user\" /var/log/secure | awk '{print $13}' | sort | uniq -c | sort -nr | more\n```\n\n[](http://oevfty3i3.bkt.clouddn.com/20170528149595407252948.jpg?imageView2/0/format/jpg)\n\n原理简略如下：\n\n>用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。\n\n\n\n1.首先生成密钥对\n\n```\n[root@host ~]$ ssh-keygen -t rsa <== 建立密钥对，之后一路回车\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/root/.ssh/id_rsa): <== 按 Enter\nCreated directory '/root/.ssh'.\nEnter passphrase (empty for no passphrase): <== 输入密钥锁码，或直接按 Enter 留空\nEnter same passphrase again: <== 再输入一遍密钥锁码\nYour identification has been saved in /root/.ssh/id_rsa. <== 私钥\nYour public key has been saved in /root/.ssh/id_rsa.pub. <== 公钥\n```\n\n生成后将立马id_rsa从VPS拖下来到本机中，以免后面设置成只能密钥登录无法密码登录时无法登录\n\n2.修改公钥名\n\n```\n[root@host ~]$ cd /root/.ssh\n将id_rsa.pub 改名为authorized_keys\n[root@host ~]$ mv id_rsa.pub authorized_keys\n```\n\n3.修改sshd_config配置文件\n\n```\nRSAAuthentication yes #RSA认证\nPubkeyAuthentication yes #开启公钥验证\nAuthorizedKeysFile .ssh/authorized_keys #验证文件路径\nPasswordAuthentication no #禁止密码认证\nPermitEmptyPasswords no #禁止空密码\n```\n\n若有的配置项找不到（比如RSAAuthentication）就忽略掉\n\n4.重启SSH服务\n\n```\nsystemctl restart sshd\n```\n\n5.登录\n\n> 如果你用的是Window系统要登录VPS需要将私钥下载到客户端，然后转换为 PuTTY 能使用的格式\n\n> 使用 WinSCP、SFTP 等工具将私钥文件 id_rsa 下载到客户端机器上。然后打开 PuTTYGen，单击 Actions 中的 Load 按钮，载入你刚才下载到的私钥文件。如果你刚才设置了密钥锁码，这时则需要输入。\n\n> 载入成功后，PuTTYGen 会显示密钥相关的信息。在 Key comment 中键入对密钥的说明信息，然后单击 Save private key 按钮即可将私钥文件存放为 PuTTY 能使用的格式。\n\n> 今后，当你使用 PuTTY 登录时，可以在左侧的 Connection -> SSH -> Auth 中的 Private key file for authentication: 处选择你的私钥文件，然后即可登录了，过程中只需输入密钥锁码即可。\n\n\n\n关于手机远程登录设置SSH key，我使用的是JuiceSSH,版本为2.1.4\n\n导入私钥过程\n\n1. 将私钥传到手机里\n2. 打开JuiceSSH, 点击Connections转到其中的 Identities.\n3. 创建认证（点击 + 符号）\n4. 设置Nickname 和username\n5. 点击\"Set (Optional)\" 设置私钥\n6. 选择 \"Smart Search\" JuiceSSH会自动搜索你手机中的SSH key，搜索到id_rsa（我的私钥）,选中，点击OK\n7. 保存这个认证（点击右上方的对勾）\n\n新建连接时将认证方式选为你刚才设置的那个认证即可\n\n\n\n参考链接：\n\n[Vultr VPS SSH密钥登录](http://zlxdike.github.io/2017/05/28/Vultr-VPS-SSH%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95/)\n\n[JuiceSSH Supported Private Key Formats](https://sonelli.freshdesk.com/support/solutions/articles/139632-juicessh-supported-private-key-formats-openssh-pem-)\n\n[SSH原理与运用（一）：远程登录](http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html)","slug":"VPS设置SSH密钥登录","published":1,"updated":"2018-03-19T14:22:01.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq4k002pbcusrni89fhi","content":"<p>在vultr上买的vps,每天都有人企图暴力破解我的VPS，虽然用了DenyHosts防止暴力破解，但总不能算完全安全，要是能像路由器那般设置白名单不不就万事大吉了吗，于是就找到了使用SSH Key登录这个解决办法。</p>\n<p>用以下命令可以查看别人暴力破解你SSH密码登录的情况</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep &quot;Failed password for invalid user&quot; /var/log/secure | awk &apos;&#123;print $13&#125;&apos; | sort | uniq -c | sort -nr | more</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://oevfty3i3.bkt.clouddn.com/20170528149595407252948.jpg?imageView2/0/format/jpg\" target=\"_blank\" rel=\"noopener\"></a></p>\n<p>原理简略如下：</p>\n<blockquote>\n<p>用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。</p>\n</blockquote>\n<p>1.首先生成密钥对</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@host ~]$ ssh-keygen -t rsa &lt;== 建立密钥对，之后一路回车</span><br><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (/root/.ssh/id_rsa): &lt;== 按 Enter</span><br><span class=\"line\">Created directory &apos;/root/.ssh&apos;.</span><br><span class=\"line\">Enter passphrase (empty for no passphrase): &lt;== 输入密钥锁码，或直接按 Enter 留空</span><br><span class=\"line\">Enter same passphrase again: &lt;== 再输入一遍密钥锁码</span><br><span class=\"line\">Your identification has been saved in /root/.ssh/id_rsa. &lt;== 私钥</span><br><span class=\"line\">Your public key has been saved in /root/.ssh/id_rsa.pub. &lt;== 公钥</span><br></pre></td></tr></table></figure>\n<p>生成后将立马id_rsa从VPS拖下来到本机中，以免后面设置成只能密钥登录无法密码登录时无法登录</p>\n<p>2.修改公钥名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@host ~]$ cd /root/.ssh</span><br><span class=\"line\">将id_rsa.pub 改名为authorized_keys</span><br><span class=\"line\">[root@host ~]$ mv id_rsa.pub authorized_keys</span><br></pre></td></tr></table></figure>\n<p>3.修改sshd_config配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RSAAuthentication yes #RSA认证</span><br><span class=\"line\">PubkeyAuthentication yes #开启公钥验证</span><br><span class=\"line\">AuthorizedKeysFile .ssh/authorized_keys #验证文件路径</span><br><span class=\"line\">PasswordAuthentication no #禁止密码认证</span><br><span class=\"line\">PermitEmptyPasswords no #禁止空密码</span><br></pre></td></tr></table></figure>\n<p>若有的配置项找不到（比如RSAAuthentication）就忽略掉</p>\n<p>4.重启SSH服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart sshd</span><br></pre></td></tr></table></figure>\n<p>5.登录</p>\n<blockquote>\n<p>如果你用的是Window系统要登录VPS需要将私钥下载到客户端，然后转换为 PuTTY 能使用的格式</p>\n</blockquote>\n<blockquote>\n<p>使用 WinSCP、SFTP 等工具将私钥文件 id_rsa 下载到客户端机器上。然后打开 PuTTYGen，单击 Actions 中的 Load 按钮，载入你刚才下载到的私钥文件。如果你刚才设置了密钥锁码，这时则需要输入。</p>\n</blockquote>\n<blockquote>\n<p>载入成功后，PuTTYGen 会显示密钥相关的信息。在 Key comment 中键入对密钥的说明信息，然后单击 Save private key 按钮即可将私钥文件存放为 PuTTY 能使用的格式。</p>\n</blockquote>\n<blockquote>\n<p>今后，当你使用 PuTTY 登录时，可以在左侧的 Connection -&gt; SSH -&gt; Auth 中的 Private key file for authentication: 处选择你的私钥文件，然后即可登录了，过程中只需输入密钥锁码即可。</p>\n</blockquote>\n<p>关于手机远程登录设置SSH key，我使用的是JuiceSSH,版本为2.1.4</p>\n<p>导入私钥过程</p>\n<ol>\n<li>将私钥传到手机里</li>\n<li>打开JuiceSSH, 点击Connections转到其中的 Identities.</li>\n<li>创建认证（点击 + 符号）</li>\n<li>设置Nickname 和username</li>\n<li>点击”Set (Optional)” 设置私钥</li>\n<li>选择 “Smart Search” JuiceSSH会自动搜索你手机中的SSH key，搜索到id_rsa（我的私钥）,选中，点击OK</li>\n<li>保存这个认证（点击右上方的对勾）</li>\n</ol>\n<p>新建连接时将认证方式选为你刚才设置的那个认证即可</p>\n<p>参考链接：</p>\n<p><a href=\"http://zlxdike.github.io/2017/05/28/Vultr-VPS-SSH%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95/\" target=\"_blank\" rel=\"noopener\">Vultr VPS SSH密钥登录</a></p>\n<p><a href=\"https://sonelli.freshdesk.com/support/solutions/articles/139632-juicessh-supported-private-key-formats-openssh-pem-\" target=\"_blank\" rel=\"noopener\">JuiceSSH Supported Private Key Formats</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html\" target=\"_blank\" rel=\"noopener\">SSH原理与运用（一）：远程登录</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在vultr上买的vps,每天都有人企图暴力破解我的VPS，虽然用了DenyHosts防止暴力破解，但总不能算完全安全，要是能像路由器那般设置白名单不不就万事大吉了吗，于是就找到了使用SSH Key登录这个解决办法。</p>\n<p>用以下命令可以查看别人暴力破解你SSH密码登录的情况</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep &quot;Failed password for invalid user&quot; /var/log/secure | awk &apos;&#123;print $13&#125;&apos; | sort | uniq -c | sort -nr | more</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://oevfty3i3.bkt.clouddn.com/20170528149595407252948.jpg?imageView2/0/format/jpg\" target=\"_blank\" rel=\"noopener\"></a></p>\n<p>原理简略如下：</p>\n<blockquote>\n<p>用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。</p>\n</blockquote>\n<p>1.首先生成密钥对</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@host ~]$ ssh-keygen -t rsa &lt;== 建立密钥对，之后一路回车</span><br><span class=\"line\">Generating public/private rsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (/root/.ssh/id_rsa): &lt;== 按 Enter</span><br><span class=\"line\">Created directory &apos;/root/.ssh&apos;.</span><br><span class=\"line\">Enter passphrase (empty for no passphrase): &lt;== 输入密钥锁码，或直接按 Enter 留空</span><br><span class=\"line\">Enter same passphrase again: &lt;== 再输入一遍密钥锁码</span><br><span class=\"line\">Your identification has been saved in /root/.ssh/id_rsa. &lt;== 私钥</span><br><span class=\"line\">Your public key has been saved in /root/.ssh/id_rsa.pub. &lt;== 公钥</span><br></pre></td></tr></table></figure>\n<p>生成后将立马id_rsa从VPS拖下来到本机中，以免后面设置成只能密钥登录无法密码登录时无法登录</p>\n<p>2.修改公钥名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@host ~]$ cd /root/.ssh</span><br><span class=\"line\">将id_rsa.pub 改名为authorized_keys</span><br><span class=\"line\">[root@host ~]$ mv id_rsa.pub authorized_keys</span><br></pre></td></tr></table></figure>\n<p>3.修改sshd_config配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RSAAuthentication yes #RSA认证</span><br><span class=\"line\">PubkeyAuthentication yes #开启公钥验证</span><br><span class=\"line\">AuthorizedKeysFile .ssh/authorized_keys #验证文件路径</span><br><span class=\"line\">PasswordAuthentication no #禁止密码认证</span><br><span class=\"line\">PermitEmptyPasswords no #禁止空密码</span><br></pre></td></tr></table></figure>\n<p>若有的配置项找不到（比如RSAAuthentication）就忽略掉</p>\n<p>4.重启SSH服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart sshd</span><br></pre></td></tr></table></figure>\n<p>5.登录</p>\n<blockquote>\n<p>如果你用的是Window系统要登录VPS需要将私钥下载到客户端，然后转换为 PuTTY 能使用的格式</p>\n</blockquote>\n<blockquote>\n<p>使用 WinSCP、SFTP 等工具将私钥文件 id_rsa 下载到客户端机器上。然后打开 PuTTYGen，单击 Actions 中的 Load 按钮，载入你刚才下载到的私钥文件。如果你刚才设置了密钥锁码，这时则需要输入。</p>\n</blockquote>\n<blockquote>\n<p>载入成功后，PuTTYGen 会显示密钥相关的信息。在 Key comment 中键入对密钥的说明信息，然后单击 Save private key 按钮即可将私钥文件存放为 PuTTY 能使用的格式。</p>\n</blockquote>\n<blockquote>\n<p>今后，当你使用 PuTTY 登录时，可以在左侧的 Connection -&gt; SSH -&gt; Auth 中的 Private key file for authentication: 处选择你的私钥文件，然后即可登录了，过程中只需输入密钥锁码即可。</p>\n</blockquote>\n<p>关于手机远程登录设置SSH key，我使用的是JuiceSSH,版本为2.1.4</p>\n<p>导入私钥过程</p>\n<ol>\n<li>将私钥传到手机里</li>\n<li>打开JuiceSSH, 点击Connections转到其中的 Identities.</li>\n<li>创建认证（点击 + 符号）</li>\n<li>设置Nickname 和username</li>\n<li>点击”Set (Optional)” 设置私钥</li>\n<li>选择 “Smart Search” JuiceSSH会自动搜索你手机中的SSH key，搜索到id_rsa（我的私钥）,选中，点击OK</li>\n<li>保存这个认证（点击右上方的对勾）</li>\n</ol>\n<p>新建连接时将认证方式选为你刚才设置的那个认证即可</p>\n<p>参考链接：</p>\n<p><a href=\"http://zlxdike.github.io/2017/05/28/Vultr-VPS-SSH%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95/\" target=\"_blank\" rel=\"noopener\">Vultr VPS SSH密钥登录</a></p>\n<p><a href=\"https://sonelli.freshdesk.com/support/solutions/articles/139632-juicessh-supported-private-key-formats-openssh-pem-\" target=\"_blank\" rel=\"noopener\">JuiceSSH Supported Private Key Formats</a></p>\n<p><a href=\"http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html\" target=\"_blank\" rel=\"noopener\">SSH原理与运用（一）：远程登录</a></p>\n"},{"title":"关于Ruby的一些知识","date":"2017-09-10T05:15:21.000Z","_content":"\n### 1.对于mix-in理解：\n\nRuby语言在设计时没有使用类似C++的多重继承，而是采用单继承的方式，\n所以使用mix-in来解决Ruby中多重继承的问题，比如说可以为一个类可以增加功能，\n而不用设计多层继承关系\n\n\n### 2.对于Assets Pipline理解：\n是一个用来处理JavaScript和CSS的框架，比如说合并js文件，合并压缩CSS文件，\n可以减少http request的请求次数，能够加快网站的加载速度\n\n\n### 3.Ruby中module和class的区别：\n①class可以实例化，module不行\n②class使用 \"<\" 作为继承的关键字，而module使用 \"include\n③模块可以混入(可以理解为minin)到对象中，达到类似多重继承的效果\n","source":"_posts/Ruby知识点.md","raw":"---\ntitle: 关于Ruby的一些知识\ndate: 2017-09-10 13:15:21\ntags: \ncategories: Ruby\n---\n\n### 1.对于mix-in理解：\n\nRuby语言在设计时没有使用类似C++的多重继承，而是采用单继承的方式，\n所以使用mix-in来解决Ruby中多重继承的问题，比如说可以为一个类可以增加功能，\n而不用设计多层继承关系\n\n\n### 2.对于Assets Pipline理解：\n是一个用来处理JavaScript和CSS的框架，比如说合并js文件，合并压缩CSS文件，\n可以减少http request的请求次数，能够加快网站的加载速度\n\n\n### 3.Ruby中module和class的区别：\n①class可以实例化，module不行\n②class使用 \"<\" 作为继承的关键字，而module使用 \"include\n③模块可以混入(可以理解为minin)到对象中，达到类似多重继承的效果\n","slug":"Ruby知识点","published":1,"updated":"2018-03-12T15:34:21.411Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq4k002rbcus7s5rgxst","content":"<h3 id=\"1-对于mix-in理解：\"><a href=\"#1-对于mix-in理解：\" class=\"headerlink\" title=\"1.对于mix-in理解：\"></a>1.对于mix-in理解：</h3><p>Ruby语言在设计时没有使用类似C++的多重继承，而是采用单继承的方式，<br>所以使用mix-in来解决Ruby中多重继承的问题，比如说可以为一个类可以增加功能，<br>而不用设计多层继承关系</p>\n<h3 id=\"2-对于Assets-Pipline理解：\"><a href=\"#2-对于Assets-Pipline理解：\" class=\"headerlink\" title=\"2.对于Assets Pipline理解：\"></a>2.对于Assets Pipline理解：</h3><p>是一个用来处理JavaScript和CSS的框架，比如说合并js文件，合并压缩CSS文件，<br>可以减少http request的请求次数，能够加快网站的加载速度</p>\n<h3 id=\"3-Ruby中module和class的区别：\"><a href=\"#3-Ruby中module和class的区别：\" class=\"headerlink\" title=\"3.Ruby中module和class的区别：\"></a>3.Ruby中module和class的区别：</h3><p>①class可以实例化，module不行<br>②class使用 “&lt;” 作为继承的关键字，而module使用 “include<br>③模块可以混入(可以理解为minin)到对象中，达到类似多重继承的效果</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-对于mix-in理解：\"><a href=\"#1-对于mix-in理解：\" class=\"headerlink\" title=\"1.对于mix-in理解：\"></a>1.对于mix-in理解：</h3><p>Ruby语言在设计时没有使用类似C++的多重继承，而是采用单继承的方式，<br>所以使用mix-in来解决Ruby中多重继承的问题，比如说可以为一个类可以增加功能，<br>而不用设计多层继承关系</p>\n<h3 id=\"2-对于Assets-Pipline理解：\"><a href=\"#2-对于Assets-Pipline理解：\" class=\"headerlink\" title=\"2.对于Assets Pipline理解：\"></a>2.对于Assets Pipline理解：</h3><p>是一个用来处理JavaScript和CSS的框架，比如说合并js文件，合并压缩CSS文件，<br>可以减少http request的请求次数，能够加快网站的加载速度</p>\n<h3 id=\"3-Ruby中module和class的区别：\"><a href=\"#3-Ruby中module和class的区别：\" class=\"headerlink\" title=\"3.Ruby中module和class的区别：\"></a>3.Ruby中module和class的区别：</h3><p>①class可以实例化，module不行<br>②class使用 “&lt;” 作为继承的关键字，而module使用 “include<br>③模块可以混入(可以理解为minin)到对象中，达到类似多重继承的效果</p>\n"},{"title":"hexo内容备份到github","date":"2017-11-10T05:15:21.000Z","_content":"利用git新建一个分支保存源文件，\n我这里是新建了一个hexo分支，\n切换到根目录下后依次执行以下命令：\n\ngit add .;\ngit commit -m \" blog back up\"\ngit push -f origin hexo\n\n可以写一个shell脚本比如backup.sh，包含以上三句话,\n运行 ./backup.sh 或者sh backup.sh即可避免麻烦的一句一句敲了\n\n\n","source":"_posts/hexo备份到github上.md","raw":"---\ntitle: hexo内容备份到github\ndate: 2017-11-10 13:15:21\ntags: hexo\n---\n利用git新建一个分支保存源文件，\n我这里是新建了一个hexo分支，\n切换到根目录下后依次执行以下命令：\n\ngit add .;\ngit commit -m \" blog back up\"\ngit push -f origin hexo\n\n可以写一个shell脚本比如backup.sh，包含以上三句话,\n运行 ./backup.sh 或者sh backup.sh即可避免麻烦的一句一句敲了\n\n\n","slug":"hexo备份到github上","published":1,"updated":"2018-03-01T17:20:47.822Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq4k002tbcusvyxebmbu","content":"<p>利用git新建一个分支保存源文件，<br>我这里是新建了一个hexo分支，<br>切换到根目录下后依次执行以下命令：</p>\n<p>git add .;<br>git commit -m “ blog back up”<br>git push -f origin hexo</p>\n<p>可以写一个shell脚本比如backup.sh，包含以上三句话,<br>运行 ./backup.sh 或者sh backup.sh即可避免麻烦的一句一句敲了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>利用git新建一个分支保存源文件，<br>我这里是新建了一个hexo分支，<br>切换到根目录下后依次执行以下命令：</p>\n<p>git add .;<br>git commit -m “ blog back up”<br>git push -f origin hexo</p>\n<p>可以写一个shell脚本比如backup.sh，包含以上三句话,<br>运行 ./backup.sh 或者sh backup.sh即可避免麻烦的一句一句敲了</p>\n"},{"title":"centos下安装配置MySQL步骤","date":"2018-01-27T09:13:28.000Z","_content":"\n1.下载安装mysql源\n\n下载：\n\n```\nwget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm\n```\n\n安装：\n\n```\nyum -y localinstall mysql57-community-release-el7-11.noarch.rpm\n```\n\n2.在线安装Mysql\n\n```\nyum -y install mysql-server\n```\n\n3.启动mysql服务\n\n```\nsystemctl start mysqld\n```\n\n4.设置开机启动\n\n```\nsystemctl enable mysqld\nsystemctl daemon-reload\n```\n\n5.修改mysql root 密码\n\n```\ncat /var/log/mysqld.log | grep password\n```\n\n在其中找到A temporary password is generated for root@localhost: \n\n后面那一串就是密码\n\n```\nmysql -u root -p\n```\n\nEnter password:\n\n输入临时密码 进入mysql命令行；\n\n设置root新密码newpass\n\n```\nSET PASSWORD FOR 'root'@'localhost' = PASSWORD('newpass');\n```\n\n6.创建新用户并开启远程登陆\n\n创建远程访问用户user02\n\n```\ncreate user user02@'%' identified by 'password';\n```\n\n\n授予user01管理dbdata的全部权限\n\n```\ngrant all privileges on dbdata.* to user02;\n```\n\n开启3306端口\n\n```\nfirewall-cmd --zone=public --add-port=3306/tcp --permanent\n```\n\n注意：在centos 7中，默认的防火墙由*iptables*改为*Firewall*，默认是没有安装*iptables*的，并且*Firewall*默认是启动状态。\n\n```\nfirewall-cmd --reload\n```\n\n7.配置默认编码为utf-8\n\n修改/etc/my.cnf配置文件，在[mysqld]下添加编码配置，如下所示：\n\n```\n[mysqld]\ncharacter_set_server=utf8\ninit_connect='SET NAMES utf8'\n```\n\n编辑保存完 重启mysql服务；\n\n```\nsystemctl restart mysqld\n```\n\n\n\n参考链接 [centOS之MySQL安装](http://blog.csdn.net/Afox4l/article/details/79059473)","source":"_posts/centos下安装配置mysql步骤.md","raw":"---\ntitle: centos下安装配置MySQL步骤\ndate: 2018-01-27 17:13:28\ntags: \n- MySQL\n- Linux\ncategories: 数据库\n---\n\n1.下载安装mysql源\n\n下载：\n\n```\nwget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm\n```\n\n安装：\n\n```\nyum -y localinstall mysql57-community-release-el7-11.noarch.rpm\n```\n\n2.在线安装Mysql\n\n```\nyum -y install mysql-server\n```\n\n3.启动mysql服务\n\n```\nsystemctl start mysqld\n```\n\n4.设置开机启动\n\n```\nsystemctl enable mysqld\nsystemctl daemon-reload\n```\n\n5.修改mysql root 密码\n\n```\ncat /var/log/mysqld.log | grep password\n```\n\n在其中找到A temporary password is generated for root@localhost: \n\n后面那一串就是密码\n\n```\nmysql -u root -p\n```\n\nEnter password:\n\n输入临时密码 进入mysql命令行；\n\n设置root新密码newpass\n\n```\nSET PASSWORD FOR 'root'@'localhost' = PASSWORD('newpass');\n```\n\n6.创建新用户并开启远程登陆\n\n创建远程访问用户user02\n\n```\ncreate user user02@'%' identified by 'password';\n```\n\n\n授予user01管理dbdata的全部权限\n\n```\ngrant all privileges on dbdata.* to user02;\n```\n\n开启3306端口\n\n```\nfirewall-cmd --zone=public --add-port=3306/tcp --permanent\n```\n\n注意：在centos 7中，默认的防火墙由*iptables*改为*Firewall*，默认是没有安装*iptables*的，并且*Firewall*默认是启动状态。\n\n```\nfirewall-cmd --reload\n```\n\n7.配置默认编码为utf-8\n\n修改/etc/my.cnf配置文件，在[mysqld]下添加编码配置，如下所示：\n\n```\n[mysqld]\ncharacter_set_server=utf8\ninit_connect='SET NAMES utf8'\n```\n\n编辑保存完 重启mysql服务；\n\n```\nsystemctl restart mysqld\n```\n\n\n\n参考链接 [centOS之MySQL安装](http://blog.csdn.net/Afox4l/article/details/79059473)","slug":"centos下安装配置mysql步骤","published":1,"updated":"2018-03-12T14:26:41.271Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq4k002vbcus5vckgu4f","content":"<p>1.下载安装mysql源</p>\n<p>下载：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</span><br></pre></td></tr></table></figure>\n<p>安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y localinstall mysql57-community-release-el7-11.noarch.rpm</span><br></pre></td></tr></table></figure>\n<p>2.在线安装Mysql</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install mysql-server</span><br></pre></td></tr></table></figure>\n<p>3.启动mysql服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mysqld</span><br></pre></td></tr></table></figure>\n<p>4.设置开机启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable mysqld</span><br><span class=\"line\">systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n<p>5.修改mysql root 密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /var/log/mysqld.log | grep password</span><br></pre></td></tr></table></figure>\n<p>在其中找到A temporary password is generated for root@localhost: </p>\n<p>后面那一串就是密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n<p>Enter password:</p>\n<p>输入临时密码 进入mysql命令行；</p>\n<p>设置root新密码newpass</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET PASSWORD FOR &apos;root&apos;@&apos;localhost&apos; = PASSWORD(&apos;newpass&apos;);</span><br></pre></td></tr></table></figure>\n<p>6.创建新用户并开启远程登陆</p>\n<p>创建远程访问用户user02</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create user user02@&apos;%&apos; identified by &apos;password&apos;;</span><br></pre></td></tr></table></figure>\n<p>授予user01管理dbdata的全部权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grant all privileges on dbdata.* to user02;</span><br></pre></td></tr></table></figure>\n<p>开启3306端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br></pre></td></tr></table></figure>\n<p>注意：在centos 7中，默认的防火墙由<em>iptables</em>改为<em>Firewall</em>，默认是没有安装<em>iptables</em>的，并且<em>Firewall</em>默认是启动状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<p>7.配置默认编码为utf-8</p>\n<p>修改/etc/my.cnf配置文件，在[mysqld]下添加编码配置，如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">character_set_server=utf8</span><br><span class=\"line\">init_connect=&apos;SET NAMES utf8&apos;</span><br></pre></td></tr></table></figure>\n<p>编辑保存完 重启mysql服务；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart mysqld</span><br></pre></td></tr></table></figure>\n<p>参考链接 <a href=\"http://blog.csdn.net/Afox4l/article/details/79059473\" target=\"_blank\" rel=\"noopener\">centOS之MySQL安装</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.下载安装mysql源</p>\n<p>下载：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</span><br></pre></td></tr></table></figure>\n<p>安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y localinstall mysql57-community-release-el7-11.noarch.rpm</span><br></pre></td></tr></table></figure>\n<p>2.在线安装Mysql</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install mysql-server</span><br></pre></td></tr></table></figure>\n<p>3.启动mysql服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mysqld</span><br></pre></td></tr></table></figure>\n<p>4.设置开机启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable mysqld</span><br><span class=\"line\">systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n<p>5.修改mysql root 密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /var/log/mysqld.log | grep password</span><br></pre></td></tr></table></figure>\n<p>在其中找到A temporary password is generated for root@localhost: </p>\n<p>后面那一串就是密码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n<p>Enter password:</p>\n<p>输入临时密码 进入mysql命令行；</p>\n<p>设置root新密码newpass</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET PASSWORD FOR &apos;root&apos;@&apos;localhost&apos; = PASSWORD(&apos;newpass&apos;);</span><br></pre></td></tr></table></figure>\n<p>6.创建新用户并开启远程登陆</p>\n<p>创建远程访问用户user02</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create user user02@&apos;%&apos; identified by &apos;password&apos;;</span><br></pre></td></tr></table></figure>\n<p>授予user01管理dbdata的全部权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grant all privileges on dbdata.* to user02;</span><br></pre></td></tr></table></figure>\n<p>开启3306端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br></pre></td></tr></table></figure>\n<p>注意：在centos 7中，默认的防火墙由<em>iptables</em>改为<em>Firewall</em>，默认是没有安装<em>iptables</em>的，并且<em>Firewall</em>默认是启动状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<p>7.配置默认编码为utf-8</p>\n<p>修改/etc/my.cnf配置文件，在[mysqld]下添加编码配置，如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">character_set_server=utf8</span><br><span class=\"line\">init_connect=&apos;SET NAMES utf8&apos;</span><br></pre></td></tr></table></figure>\n<p>编辑保存完 重启mysql服务；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart mysqld</span><br></pre></td></tr></table></figure>\n<p>参考链接 <a href=\"http://blog.csdn.net/Afox4l/article/details/79059473\" target=\"_blank\" rel=\"noopener\">centOS之MySQL安装</a></p>\n"},{"title":"Windows下生成树状目录命令","date":"2018-03-19T13:54:53.000Z","_content":"将当前目录下的所有子目录及其文件生成树状目录并保存到tree.txt文件中\n\n```\ntree /f >tree.txt \n```\n\n顺便比较下Dos和Linux命令的异同吧\n\n| 命令的目的                             | MS-DOS    | Linux                                    | Linux 的简单实例                              |\n| --------------------------------- | --------- | ---------------------------------------- | ---------------------------------------- |\n| 复制文件                              | `copy`    | `cp`                                     | `cp thisfile.txt /home/thisdirectory`    |\n| 转移文件                              | `move`    | `mv`                                     | `mv thisfile.txt /home/thisdirectory`    |\n| 列举文件                              | `dir`     | `ls`                                     | `ls`                                     |\n| 清除屏幕                              | `cls`     | `clear`                                  | `clear`                                  |\n| 关闭 shell 提示                       | `exit`    | `exit`                                   | `exit`                                   |\n| 显示或设置日期                           | `date`    | `date`                                   | `date`                                   |\n| 删除文件                              | `del`     | `rm`                                     | `rm thisfile.txt`                        |\n| 把输出“回响”到屏幕上                       | `echo`    | `echo`                                   | `echo \"messageg\"`                        |\n| 用简单文本编辑器来编辑文件                     | `edit`    | `gedit`([[a\\]](http://www.huihoo.org/gnu_linux/ch-doslinux.html#FTN.AEN7986)) | `gedit thisfile.txt`注意Dos部分情况下可能识别不了单引号  |\n| 比较文件内容                            | `fc`      | `diff`                                   | `diff file1 file2`                       |\n| 在文件中寻找字串                          | `find`    | `grep`                                   | `grep 词或词组 thisfile.txt`·`find \"message\" a.txt`注意Dos部分情况下可能识别不了单引号 |\n| 显示已被使用的内存数量                       | `mem`     | `free`                                   | `free`                                   |\n| 显示命令帮助                            | `*命令* /?` | `man`（[[c\\]](http://www.huihoo.org/gnu_linux/ch-doslinux.html#FTN.AEN8035)） | `man 命令`                                 |\n| 创建目录                              | `mkdir`   | `mkdir`                                  | `mkdir 目录`                               |\n| 查看文件                              | `more`    | `less`（[[d\\]](http://www.huihoo.org/gnu_linux/ch-doslinux.html#FTN.AEN8056)） | `less thisfile.txt`                      |\n| 重新命名文件                            | `ren`     | `mv`（[[e\\]](http://www.huihoo.org/gnu_linux/ch-doslinux.html#FTN.AEN8068)） | `mv thisfile.txt thatfile.txt`           |\n| 显示你在文件系统中的位置                      | `chdir`   | `pwd`                                    | `pwd`                                    |\n| 用指定的路径（*绝对路径，absolute path*）来改换目录 | `cd 路径名`  | `cd 路径名`                                 | `cd /directory/directory`                |\n| 用一个*相对路径（relative path）*来改换目录     | `cd ..`   | `cd ..`                                  | `cd ..`                                  |\n| 显示时间                              | `time`    | `date`                                   | `date`                                   |","source":"_posts/Windows下生成树状目录命令.md","raw":"---\ntitle: Windows下生成树状目录命令\ndate: 2018-03-19 21:54:53\ntags:\ncategories: Ruby\n---\n将当前目录下的所有子目录及其文件生成树状目录并保存到tree.txt文件中\n\n```\ntree /f >tree.txt \n```\n\n顺便比较下Dos和Linux命令的异同吧\n\n| 命令的目的                             | MS-DOS    | Linux                                    | Linux 的简单实例                              |\n| --------------------------------- | --------- | ---------------------------------------- | ---------------------------------------- |\n| 复制文件                              | `copy`    | `cp`                                     | `cp thisfile.txt /home/thisdirectory`    |\n| 转移文件                              | `move`    | `mv`                                     | `mv thisfile.txt /home/thisdirectory`    |\n| 列举文件                              | `dir`     | `ls`                                     | `ls`                                     |\n| 清除屏幕                              | `cls`     | `clear`                                  | `clear`                                  |\n| 关闭 shell 提示                       | `exit`    | `exit`                                   | `exit`                                   |\n| 显示或设置日期                           | `date`    | `date`                                   | `date`                                   |\n| 删除文件                              | `del`     | `rm`                                     | `rm thisfile.txt`                        |\n| 把输出“回响”到屏幕上                       | `echo`    | `echo`                                   | `echo \"messageg\"`                        |\n| 用简单文本编辑器来编辑文件                     | `edit`    | `gedit`([[a\\]](http://www.huihoo.org/gnu_linux/ch-doslinux.html#FTN.AEN7986)) | `gedit thisfile.txt`注意Dos部分情况下可能识别不了单引号  |\n| 比较文件内容                            | `fc`      | `diff`                                   | `diff file1 file2`                       |\n| 在文件中寻找字串                          | `find`    | `grep`                                   | `grep 词或词组 thisfile.txt`·`find \"message\" a.txt`注意Dos部分情况下可能识别不了单引号 |\n| 显示已被使用的内存数量                       | `mem`     | `free`                                   | `free`                                   |\n| 显示命令帮助                            | `*命令* /?` | `man`（[[c\\]](http://www.huihoo.org/gnu_linux/ch-doslinux.html#FTN.AEN8035)） | `man 命令`                                 |\n| 创建目录                              | `mkdir`   | `mkdir`                                  | `mkdir 目录`                               |\n| 查看文件                              | `more`    | `less`（[[d\\]](http://www.huihoo.org/gnu_linux/ch-doslinux.html#FTN.AEN8056)） | `less thisfile.txt`                      |\n| 重新命名文件                            | `ren`     | `mv`（[[e\\]](http://www.huihoo.org/gnu_linux/ch-doslinux.html#FTN.AEN8068)） | `mv thisfile.txt thatfile.txt`           |\n| 显示你在文件系统中的位置                      | `chdir`   | `pwd`                                    | `pwd`                                    |\n| 用指定的路径（*绝对路径，absolute path*）来改换目录 | `cd 路径名`  | `cd 路径名`                                 | `cd /directory/directory`                |\n| 用一个*相对路径（relative path）*来改换目录     | `cd ..`   | `cd ..`                                  | `cd ..`                                  |\n| 显示时间                              | `time`    | `date`                                   | `date`                                   |","slug":"Windows下生成树状目录命令","published":1,"updated":"2018-03-19T15:11:48.542Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq4k002zbcuskpv4opm9","content":"<p>将当前目录下的所有子目录及其文件生成树状目录并保存到tree.txt文件中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tree /f &gt;tree.txt</span><br></pre></td></tr></table></figure>\n<p>顺便比较下Dos和Linux命令的异同吧</p>\n<table>\n<thead>\n<tr>\n<th>命令的目的</th>\n<th>MS-DOS</th>\n<th>Linux</th>\n<th>Linux 的简单实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>复制文件</td>\n<td><code>copy</code></td>\n<td><code>cp</code></td>\n<td><code>cp thisfile.txt /home/thisdirectory</code></td>\n</tr>\n<tr>\n<td>转移文件</td>\n<td><code>move</code></td>\n<td><code>mv</code></td>\n<td><code>mv thisfile.txt /home/thisdirectory</code></td>\n</tr>\n<tr>\n<td>列举文件</td>\n<td><code>dir</code></td>\n<td><code>ls</code></td>\n<td><code>ls</code></td>\n</tr>\n<tr>\n<td>清除屏幕</td>\n<td><code>cls</code></td>\n<td><code>clear</code></td>\n<td><code>clear</code></td>\n</tr>\n<tr>\n<td>关闭 shell 提示</td>\n<td><code>exit</code></td>\n<td><code>exit</code></td>\n<td><code>exit</code></td>\n</tr>\n<tr>\n<td>显示或设置日期</td>\n<td><code>date</code></td>\n<td><code>date</code></td>\n<td><code>date</code></td>\n</tr>\n<tr>\n<td>删除文件</td>\n<td><code>del</code></td>\n<td><code>rm</code></td>\n<td><code>rm thisfile.txt</code></td>\n</tr>\n<tr>\n<td>把输出“回响”到屏幕上</td>\n<td><code>echo</code></td>\n<td><code>echo</code></td>\n<td><code>echo &quot;messageg&quot;</code></td>\n</tr>\n<tr>\n<td>用简单文本编辑器来编辑文件</td>\n<td><code>edit</code></td>\n<td><code>gedit</code>(<a href=\"http://www.huihoo.org/gnu_linux/ch-doslinux.html#FTN.AEN7986\" target=\"_blank\" rel=\"noopener\">[a]</a>)</td>\n<td><code>gedit thisfile.txt</code>注意Dos部分情况下可能识别不了单引号</td>\n</tr>\n<tr>\n<td>比较文件内容</td>\n<td><code>fc</code></td>\n<td><code>diff</code></td>\n<td><code>diff file1 file2</code></td>\n</tr>\n<tr>\n<td>在文件中寻找字串</td>\n<td><code>find</code></td>\n<td><code>grep</code></td>\n<td><code>grep 词或词组 thisfile.txt</code>·<code>find &quot;message&quot; a.txt</code>注意Dos部分情况下可能识别不了单引号</td>\n</tr>\n<tr>\n<td>显示已被使用的内存数量</td>\n<td><code>mem</code></td>\n<td><code>free</code></td>\n<td><code>free</code></td>\n</tr>\n<tr>\n<td>显示命令帮助</td>\n<td><code>*命令* /?</code></td>\n<td><code>man</code>（<a href=\"http://www.huihoo.org/gnu_linux/ch-doslinux.html#FTN.AEN8035\" target=\"_blank\" rel=\"noopener\">[c]</a>）</td>\n<td><code>man 命令</code></td>\n</tr>\n<tr>\n<td>创建目录</td>\n<td><code>mkdir</code></td>\n<td><code>mkdir</code></td>\n<td><code>mkdir 目录</code></td>\n</tr>\n<tr>\n<td>查看文件</td>\n<td><code>more</code></td>\n<td><code>less</code>（<a href=\"http://www.huihoo.org/gnu_linux/ch-doslinux.html#FTN.AEN8056\" target=\"_blank\" rel=\"noopener\">[d]</a>）</td>\n<td><code>less thisfile.txt</code></td>\n</tr>\n<tr>\n<td>重新命名文件</td>\n<td><code>ren</code></td>\n<td><code>mv</code>（<a href=\"http://www.huihoo.org/gnu_linux/ch-doslinux.html#FTN.AEN8068\" target=\"_blank\" rel=\"noopener\">[e]</a>）</td>\n<td><code>mv thisfile.txt thatfile.txt</code></td>\n</tr>\n<tr>\n<td>显示你在文件系统中的位置</td>\n<td><code>chdir</code></td>\n<td><code>pwd</code></td>\n<td><code>pwd</code></td>\n</tr>\n<tr>\n<td>用指定的路径（<em>绝对路径，absolute path</em>）来改换目录</td>\n<td><code>cd 路径名</code></td>\n<td><code>cd 路径名</code></td>\n<td><code>cd /directory/directory</code></td>\n</tr>\n<tr>\n<td>用一个<em>相对路径（relative path）</em>来改换目录</td>\n<td><code>cd ..</code></td>\n<td><code>cd ..</code></td>\n<td><code>cd ..</code></td>\n</tr>\n<tr>\n<td>显示时间</td>\n<td><code>time</code></td>\n<td><code>date</code></td>\n<td><code>date</code></td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"","more":"<p>将当前目录下的所有子目录及其文件生成树状目录并保存到tree.txt文件中</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tree /f &gt;tree.txt</span><br></pre></td></tr></table></figure>\n<p>顺便比较下Dos和Linux命令的异同吧</p>\n<table>\n<thead>\n<tr>\n<th>命令的目的</th>\n<th>MS-DOS</th>\n<th>Linux</th>\n<th>Linux 的简单实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>复制文件</td>\n<td><code>copy</code></td>\n<td><code>cp</code></td>\n<td><code>cp thisfile.txt /home/thisdirectory</code></td>\n</tr>\n<tr>\n<td>转移文件</td>\n<td><code>move</code></td>\n<td><code>mv</code></td>\n<td><code>mv thisfile.txt /home/thisdirectory</code></td>\n</tr>\n<tr>\n<td>列举文件</td>\n<td><code>dir</code></td>\n<td><code>ls</code></td>\n<td><code>ls</code></td>\n</tr>\n<tr>\n<td>清除屏幕</td>\n<td><code>cls</code></td>\n<td><code>clear</code></td>\n<td><code>clear</code></td>\n</tr>\n<tr>\n<td>关闭 shell 提示</td>\n<td><code>exit</code></td>\n<td><code>exit</code></td>\n<td><code>exit</code></td>\n</tr>\n<tr>\n<td>显示或设置日期</td>\n<td><code>date</code></td>\n<td><code>date</code></td>\n<td><code>date</code></td>\n</tr>\n<tr>\n<td>删除文件</td>\n<td><code>del</code></td>\n<td><code>rm</code></td>\n<td><code>rm thisfile.txt</code></td>\n</tr>\n<tr>\n<td>把输出“回响”到屏幕上</td>\n<td><code>echo</code></td>\n<td><code>echo</code></td>\n<td><code>echo &quot;messageg&quot;</code></td>\n</tr>\n<tr>\n<td>用简单文本编辑器来编辑文件</td>\n<td><code>edit</code></td>\n<td><code>gedit</code>(<a href=\"http://www.huihoo.org/gnu_linux/ch-doslinux.html#FTN.AEN7986\" target=\"_blank\" rel=\"noopener\">[a]</a>)</td>\n<td><code>gedit thisfile.txt</code>注意Dos部分情况下可能识别不了单引号</td>\n</tr>\n<tr>\n<td>比较文件内容</td>\n<td><code>fc</code></td>\n<td><code>diff</code></td>\n<td><code>diff file1 file2</code></td>\n</tr>\n<tr>\n<td>在文件中寻找字串</td>\n<td><code>find</code></td>\n<td><code>grep</code></td>\n<td><code>grep 词或词组 thisfile.txt</code>·<code>find &quot;message&quot; a.txt</code>注意Dos部分情况下可能识别不了单引号</td>\n</tr>\n<tr>\n<td>显示已被使用的内存数量</td>\n<td><code>mem</code></td>\n<td><code>free</code></td>\n<td><code>free</code></td>\n</tr>\n<tr>\n<td>显示命令帮助</td>\n<td><code>*命令* /?</code></td>\n<td><code>man</code>（<a href=\"http://www.huihoo.org/gnu_linux/ch-doslinux.html#FTN.AEN8035\" target=\"_blank\" rel=\"noopener\">[c]</a>）</td>\n<td><code>man 命令</code></td>\n</tr>\n<tr>\n<td>创建目录</td>\n<td><code>mkdir</code></td>\n<td><code>mkdir</code></td>\n<td><code>mkdir 目录</code></td>\n</tr>\n<tr>\n<td>查看文件</td>\n<td><code>more</code></td>\n<td><code>less</code>（<a href=\"http://www.huihoo.org/gnu_linux/ch-doslinux.html#FTN.AEN8056\" target=\"_blank\" rel=\"noopener\">[d]</a>）</td>\n<td><code>less thisfile.txt</code></td>\n</tr>\n<tr>\n<td>重新命名文件</td>\n<td><code>ren</code></td>\n<td><code>mv</code>（<a href=\"http://www.huihoo.org/gnu_linux/ch-doslinux.html#FTN.AEN8068\" target=\"_blank\" rel=\"noopener\">[e]</a>）</td>\n<td><code>mv thisfile.txt thatfile.txt</code></td>\n</tr>\n<tr>\n<td>显示你在文件系统中的位置</td>\n<td><code>chdir</code></td>\n<td><code>pwd</code></td>\n<td><code>pwd</code></td>\n</tr>\n<tr>\n<td>用指定的路径（<em>绝对路径，absolute path</em>）来改换目录</td>\n<td><code>cd 路径名</code></td>\n<td><code>cd 路径名</code></td>\n<td><code>cd /directory/directory</code></td>\n</tr>\n<tr>\n<td>用一个<em>相对路径（relative path）</em>来改换目录</td>\n<td><code>cd ..</code></td>\n<td><code>cd ..</code></td>\n<td><code>cd ..</code></td>\n</tr>\n<tr>\n<td>显示时间</td>\n<td><code>time</code></td>\n<td><code>date</code></td>\n<td><code>date</code></td>\n</tr>\n</tbody>\n</table>\n"},{"title":"Protocol https not supported or disabled in libcurl错误","date":"2018-03-19T15:35:12.000Z","_content":"\n原因：Windows下不支持命令中的单引号，把url中的单引号改为双引号即可\n\n```\ncurl  'http://localhost:9200/api/twittervnext/tweet'\n```\n\n改为\n\n```\ncurl  \"http://localhost:9200/api/twittervnext/tweet\"\n```\n\n\n即可","source":"_posts/libcurlc错误.md","raw":"---\ntitle: Protocol https not supported or disabled in libcurl错误\ndate: 2018-03-19 23:35:12\ntags: \ncategories: tools\n---\n\n原因：Windows下不支持命令中的单引号，把url中的单引号改为双引号即可\n\n```\ncurl  'http://localhost:9200/api/twittervnext/tweet'\n```\n\n改为\n\n```\ncurl  \"http://localhost:9200/api/twittervnext/tweet\"\n```\n\n\n即可","slug":"libcurlc错误","published":1,"updated":"2018-03-19T14:06:35.247Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq500031bcusgp90mmhp","content":"<p>原因：Windows下不支持命令中的单引号，把url中的单引号改为双引号即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl  &apos;http://localhost:9200/api/twittervnext/tweet&apos;</span><br></pre></td></tr></table></figure>\n<p>改为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl  &quot;http://localhost:9200/api/twittervnext/tweet&quot;</span><br></pre></td></tr></table></figure>\n<p>即可</p>\n","site":{"data":{}},"excerpt":"","more":"<p>原因：Windows下不支持命令中的单引号，把url中的单引号改为双引号即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl  &apos;http://localhost:9200/api/twittervnext/tweet&apos;</span><br></pre></td></tr></table></figure>\n<p>改为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl  &quot;http://localhost:9200/api/twittervnext/tweet&quot;</span><br></pre></td></tr></table></figure>\n<p>即可</p>\n"},{"title":"mysql出现innodb:Cannot allocate memory for the buffer pool的解决办法","date":"2018-03-04T15:10:48.000Z","_content":"最近在做一个私人的Django项目，做完后打算放在自己的服务器上跑下，刚开始都\n没什么问题，后来又想学习下docker,于是又在这台服务器上装了docker,然后就发现\n\nDjango跑不通了，提示是MySql数据库挂了。\n\n想打开数据库看下\n\nmysql -u fnst -p\n\n输入密码后出现错误\n\nERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/lib/mysql/mysql.sock' (111)\n\n查看mysql日志\n\ntail -30 /var/log/mysqld.log\n\n出现\n\nInnoDB: Cannot allocate memory for the buffer pool\n\n错误\n\n明显是内存不够用了\n\n解决办法：\n\n1.增大物理内存(呵呵，贵啊，不考虑)\n\n2.更改/etc/my.cnf设置文件，减小innode_buffer_pool_size内存\n\nvi /etc/my.cnf后发现\n\ninnode_buffer_pool_size默认设置128M(我的机器只有512M内存)\n\n将其设置成64M\n\nservice mysqld restart\n\n重启mysql后恢复正常\n\n参考链接：\n\nhttp://www.webtrafficexchange.com/solved-mysql-crash-fatal-error-cannot-allocate-memory-buffer-pool","source":"_posts/mysql出现innodbCannot allocate memory for the buffer pool的解决办法.md","raw":"---\ntitle: 'mysql出现innodb:Cannot allocate memory for the buffer pool的解决办法'\ndate: 2018-03-04 23:10:48\ntags: \ncategories: 数据库\n---\n最近在做一个私人的Django项目，做完后打算放在自己的服务器上跑下，刚开始都\n没什么问题，后来又想学习下docker,于是又在这台服务器上装了docker,然后就发现\n\nDjango跑不通了，提示是MySql数据库挂了。\n\n想打开数据库看下\n\nmysql -u fnst -p\n\n输入密码后出现错误\n\nERROR 2002 (HY000): Can't connect to local MySQL server through socket '/var/lib/mysql/mysql.sock' (111)\n\n查看mysql日志\n\ntail -30 /var/log/mysqld.log\n\n出现\n\nInnoDB: Cannot allocate memory for the buffer pool\n\n错误\n\n明显是内存不够用了\n\n解决办法：\n\n1.增大物理内存(呵呵，贵啊，不考虑)\n\n2.更改/etc/my.cnf设置文件，减小innode_buffer_pool_size内存\n\nvi /etc/my.cnf后发现\n\ninnode_buffer_pool_size默认设置128M(我的机器只有512M内存)\n\n将其设置成64M\n\nservice mysqld restart\n\n重启mysql后恢复正常\n\n参考链接：\n\nhttp://www.webtrafficexchange.com/solved-mysql-crash-fatal-error-cannot-allocate-memory-buffer-pool","slug":"mysql出现innodbCannot allocate memory for the buffer pool的解决办法","published":1,"updated":"2018-03-04T15:29:54.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq500034bcus4d6ao2op","content":"<p>最近在做一个私人的Django项目，做完后打算放在自己的服务器上跑下，刚开始都<br>没什么问题，后来又想学习下docker,于是又在这台服务器上装了docker,然后就发现</p>\n<p>Django跑不通了，提示是MySql数据库挂了。</p>\n<p>想打开数据库看下</p>\n<p>mysql -u fnst -p</p>\n<p>输入密码后出现错误</p>\n<p>ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/lib/mysql/mysql.sock’ (111)</p>\n<p>查看mysql日志</p>\n<p>tail -30 /var/log/mysqld.log</p>\n<p>出现</p>\n<p>InnoDB: Cannot allocate memory for the buffer pool</p>\n<p>错误</p>\n<p>明显是内存不够用了</p>\n<p>解决办法：</p>\n<p>1.增大物理内存(呵呵，贵啊，不考虑)</p>\n<p>2.更改/etc/my.cnf设置文件，减小innode_buffer_pool_size内存</p>\n<p>vi /etc/my.cnf后发现</p>\n<p>innode_buffer_pool_size默认设置128M(我的机器只有512M内存)</p>\n<p>将其设置成64M</p>\n<p>service mysqld restart</p>\n<p>重启mysql后恢复正常</p>\n<p>参考链接：</p>\n<p><a href=\"http://www.webtrafficexchange.com/solved-mysql-crash-fatal-error-cannot-allocate-memory-buffer-pool\" target=\"_blank\" rel=\"noopener\">http://www.webtrafficexchange.com/solved-mysql-crash-fatal-error-cannot-allocate-memory-buffer-pool</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在做一个私人的Django项目，做完后打算放在自己的服务器上跑下，刚开始都<br>没什么问题，后来又想学习下docker,于是又在这台服务器上装了docker,然后就发现</p>\n<p>Django跑不通了，提示是MySql数据库挂了。</p>\n<p>想打开数据库看下</p>\n<p>mysql -u fnst -p</p>\n<p>输入密码后出现错误</p>\n<p>ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/lib/mysql/mysql.sock’ (111)</p>\n<p>查看mysql日志</p>\n<p>tail -30 /var/log/mysqld.log</p>\n<p>出现</p>\n<p>InnoDB: Cannot allocate memory for the buffer pool</p>\n<p>错误</p>\n<p>明显是内存不够用了</p>\n<p>解决办法：</p>\n<p>1.增大物理内存(呵呵，贵啊，不考虑)</p>\n<p>2.更改/etc/my.cnf设置文件，减小innode_buffer_pool_size内存</p>\n<p>vi /etc/my.cnf后发现</p>\n<p>innode_buffer_pool_size默认设置128M(我的机器只有512M内存)</p>\n<p>将其设置成64M</p>\n<p>service mysqld restart</p>\n<p>重启mysql后恢复正常</p>\n<p>参考链接：</p>\n<p><a href=\"http://www.webtrafficexchange.com/solved-mysql-crash-fatal-error-cannot-allocate-memory-buffer-pool\" target=\"_blank\" rel=\"noopener\">http://www.webtrafficexchange.com/solved-mysql-crash-fatal-error-cannot-allocate-memory-buffer-pool</a></p>\n"},{"title":"mysql忘记root密码解决办法","date":"2018-03-12T17:01:08.000Z","_content":"\n修改MySQL的登录设置： \n\n```\nvi /etc/my.cnf\n```\n\n在[mysqld]的段中加上一句：skip-grant-tables \n例如： \n```\n[mysqld] \ndatadir=/var/lib/mysql \nsocket=/var/lib/mysql/mysql.sock \nskip-grant-tables \n```\n\n保存并且退出vi。 \n3．重新启动mysqld \n```\nsystemctl restart mysqld \n```\n\nStopping MySQL: [ OK ] \nStarting MySQL: [ OK ] \n4．登录并修改MySQL的root密码 \n\n```\n/usr/bin/mysql\n```\n\n```\nWelcome to the MySQL monitor. Commands end with ; or \\g. \nYour MySQL connection id is 3 to server version: 3.23.56 \nType 'help;' or '\\h' for help. Type '\\c' to clear the buffer. \nmysql> use mysql ; \nReading table information for completion of table and column names \nYou can turn off this feature to get a quicker startup with -A \nDatabase changed \nmysql> update mysql.user set authentication_string=password('root') where user='root'\nQuery OK, 0 rows affected (0.00 sec) \nRows matched: 2 Changed: 0 Warnings: 0 \nmysql> flush privileges ; \nQuery OK, 0 rows affected (0.01 sec) \nmysql> quit \nBye \n```\n\n\n5．将MySQL的登录设置修改回来 \n```\nvi /etc/my.cnf\n```\n\n将刚才在[mysqld]的段中加上的skip-grant-tables删除 \n保存并且退出vi。 ","source":"_posts/mysql忘记root密码解决办法.md","raw":"---\ntitle: mysql忘记root密码解决办法\ndate: 2018-03-13 01:01:08\ntags:\ncategories: 数据库\n---\n\n修改MySQL的登录设置： \n\n```\nvi /etc/my.cnf\n```\n\n在[mysqld]的段中加上一句：skip-grant-tables \n例如： \n```\n[mysqld] \ndatadir=/var/lib/mysql \nsocket=/var/lib/mysql/mysql.sock \nskip-grant-tables \n```\n\n保存并且退出vi。 \n3．重新启动mysqld \n```\nsystemctl restart mysqld \n```\n\nStopping MySQL: [ OK ] \nStarting MySQL: [ OK ] \n4．登录并修改MySQL的root密码 \n\n```\n/usr/bin/mysql\n```\n\n```\nWelcome to the MySQL monitor. Commands end with ; or \\g. \nYour MySQL connection id is 3 to server version: 3.23.56 \nType 'help;' or '\\h' for help. Type '\\c' to clear the buffer. \nmysql> use mysql ; \nReading table information for completion of table and column names \nYou can turn off this feature to get a quicker startup with -A \nDatabase changed \nmysql> update mysql.user set authentication_string=password('root') where user='root'\nQuery OK, 0 rows affected (0.00 sec) \nRows matched: 2 Changed: 0 Warnings: 0 \nmysql> flush privileges ; \nQuery OK, 0 rows affected (0.01 sec) \nmysql> quit \nBye \n```\n\n\n5．将MySQL的登录设置修改回来 \n```\nvi /etc/my.cnf\n```\n\n将刚才在[mysqld]的段中加上的skip-grant-tables删除 \n保存并且退出vi。 ","slug":"mysql忘记root密码解决办法","published":1,"updated":"2018-03-12T17:03:45.146Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq500037bcush4n3ruf1","content":"<p>修改MySQL的登录设置： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/my.cnf</span><br></pre></td></tr></table></figure>\n<p>在[mysqld]的段中加上一句：skip-grant-tables<br>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld] </span><br><span class=\"line\">datadir=/var/lib/mysql </span><br><span class=\"line\">socket=/var/lib/mysql/mysql.sock </span><br><span class=\"line\">skip-grant-tables</span><br></pre></td></tr></table></figure></p>\n<p>保存并且退出vi。<br>3．重新启动mysqld<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart mysqld</span><br></pre></td></tr></table></figure></p>\n<p>Stopping MySQL: [ OK ]<br>Starting MySQL: [ OK ]<br>4．登录并修改MySQL的root密码 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/mysql</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Welcome to the MySQL monitor. Commands end with ; or \\g. </span><br><span class=\"line\">Your MySQL connection id is 3 to server version: 3.23.56 </span><br><span class=\"line\">Type &apos;help;&apos; or &apos;\\h&apos; for help. Type &apos;\\c&apos; to clear the buffer. </span><br><span class=\"line\">mysql&gt; use mysql ; </span><br><span class=\"line\">Reading table information for completion of table and column names </span><br><span class=\"line\">You can turn off this feature to get a quicker startup with -A </span><br><span class=\"line\">Database changed </span><br><span class=\"line\">mysql&gt; update mysql.user set authentication_string=password(&apos;root&apos;) where user=&apos;root&apos;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec) </span><br><span class=\"line\">Rows matched: 2 Changed: 0 Warnings: 0 </span><br><span class=\"line\">mysql&gt; flush privileges ; </span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec) </span><br><span class=\"line\">mysql&gt; quit </span><br><span class=\"line\">Bye</span><br></pre></td></tr></table></figure>\n<p>5．将MySQL的登录设置修改回来<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/my.cnf</span><br></pre></td></tr></table></figure></p>\n<p>将刚才在[mysqld]的段中加上的skip-grant-tables删除<br>保存并且退出vi。 </p>\n","site":{"data":{}},"excerpt":"","more":"<p>修改MySQL的登录设置： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/my.cnf</span><br></pre></td></tr></table></figure>\n<p>在[mysqld]的段中加上一句：skip-grant-tables<br>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld] </span><br><span class=\"line\">datadir=/var/lib/mysql </span><br><span class=\"line\">socket=/var/lib/mysql/mysql.sock </span><br><span class=\"line\">skip-grant-tables</span><br></pre></td></tr></table></figure></p>\n<p>保存并且退出vi。<br>3．重新启动mysqld<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart mysqld</span><br></pre></td></tr></table></figure></p>\n<p>Stopping MySQL: [ OK ]<br>Starting MySQL: [ OK ]<br>4．登录并修改MySQL的root密码 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/mysql</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Welcome to the MySQL monitor. Commands end with ; or \\g. </span><br><span class=\"line\">Your MySQL connection id is 3 to server version: 3.23.56 </span><br><span class=\"line\">Type &apos;help;&apos; or &apos;\\h&apos; for help. Type &apos;\\c&apos; to clear the buffer. </span><br><span class=\"line\">mysql&gt; use mysql ; </span><br><span class=\"line\">Reading table information for completion of table and column names </span><br><span class=\"line\">You can turn off this feature to get a quicker startup with -A </span><br><span class=\"line\">Database changed </span><br><span class=\"line\">mysql&gt; update mysql.user set authentication_string=password(&apos;root&apos;) where user=&apos;root&apos;</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec) </span><br><span class=\"line\">Rows matched: 2 Changed: 0 Warnings: 0 </span><br><span class=\"line\">mysql&gt; flush privileges ; </span><br><span class=\"line\">Query OK, 0 rows affected (0.01 sec) </span><br><span class=\"line\">mysql&gt; quit </span><br><span class=\"line\">Bye</span><br></pre></td></tr></table></figure>\n<p>5．将MySQL的登录设置修改回来<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/my.cnf</span><br></pre></td></tr></table></figure></p>\n<p>将刚才在[mysqld]的段中加上的skip-grant-tables删除<br>保存并且退出vi。 </p>\n"},{"title":"netSpeedMonitor使用指南","date":"2017-11-08T14:28:34.000Z","_content":"\n安装netspeedmonitor步骤：\n1.\n访问[netSpeedMonitor下载地址](http://www.softpedia.com/get/Network-Tools/Bandwidth-Tools/NetSpeedMonitor.shtml)下载\n2.\n对安装文件右键，选择属性-》兼容性-》点击以兼容模式运行这个程序（选择以前版本的windows）\n3.\n双击netspeedmonitor_2_5_4_0_x64_setup安装文件，一直确定\n4.\n右键任务栏，进入工具栏，在NetSpeedMonitor上打勾完成，此时任务栏上应该就有netspeedmonitor显示的网速信息了","source":"_posts/netSpeedMonitor使用指南.md","raw":"---\ntitle: netSpeedMonitor使用指南\ndate: 2017-11-08 22:28:34\ntags: netSpeedMonitor\ncategories: tools\n---\n\n安装netspeedmonitor步骤：\n1.\n访问[netSpeedMonitor下载地址](http://www.softpedia.com/get/Network-Tools/Bandwidth-Tools/NetSpeedMonitor.shtml)下载\n2.\n对安装文件右键，选择属性-》兼容性-》点击以兼容模式运行这个程序（选择以前版本的windows）\n3.\n双击netspeedmonitor_2_5_4_0_x64_setup安装文件，一直确定\n4.\n右键任务栏，进入工具栏，在NetSpeedMonitor上打勾完成，此时任务栏上应该就有netspeedmonitor显示的网速信息了","slug":"netSpeedMonitor使用指南","published":1,"updated":"2018-03-01T17:20:47.853Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq50003abcus09g6jok8","content":"<p>安装netspeedmonitor步骤：<br>1.<br>访问<a href=\"http://www.softpedia.com/get/Network-Tools/Bandwidth-Tools/NetSpeedMonitor.shtml\" target=\"_blank\" rel=\"noopener\">netSpeedMonitor下载地址</a>下载<br>2.<br>对安装文件右键，选择属性-》兼容性-》点击以兼容模式运行这个程序（选择以前版本的windows）<br>3.<br>双击netspeedmonitor_2_5_4_0_x64_setup安装文件，一直确定<br>4.<br>右键任务栏，进入工具栏，在NetSpeedMonitor上打勾完成，此时任务栏上应该就有netspeedmonitor显示的网速信息了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>安装netspeedmonitor步骤：<br>1.<br>访问<a href=\"http://www.softpedia.com/get/Network-Tools/Bandwidth-Tools/NetSpeedMonitor.shtml\" target=\"_blank\" rel=\"noopener\">netSpeedMonitor下载地址</a>下载<br>2.<br>对安装文件右键，选择属性-》兼容性-》点击以兼容模式运行这个程序（选择以前版本的windows）<br>3.<br>双击netspeedmonitor_2_5_4_0_x64_setup安装文件，一直确定<br>4.<br>右键任务栏，进入工具栏，在NetSpeedMonitor上打勾完成，此时任务栏上应该就有netspeedmonitor显示的网速信息了</p>\n"},{"title":"nginx+uwsgi在centos上部署Django应用","date":"2018-03-05T12:46:05.000Z","_content":"\n\n\n**背景介绍**：\n\n之前做完一个Django项目，打算部署在自己的centos服务器上，可以远程访问，于是命令行上输入\n\npython manage.py runserver 0:8000\n\n就成功运行了，可惜，django自带的web服务器并不稳定，经常无缘无故断掉，于是想到\n\n使用主流的uwsgi+nginx来部署项目，\n\n至于Nginx+uWSGI+Django原理可参考[Nginx+uWSGI+Django原理](http://www.cnblogs.com/Xjng/p/aa4dd23918359c6414d54e4b972e9081.html)\n\n此处就不赘述了，下面介绍下具体部署步骤\n\n##### 1.安装uwsgi\n\n```\npip install uwsgi\n```\n\n此时可以尝试使用uwsgi来启动应用，其中wsgi.py在mysite文件夹下\n\n```\nuwsgi --http :8000 --module mysite.wsgi\n```\n\n在浏览其中输入127.0.0.1:8080 能够成功访问，说明你的应用服务器部署成功，已经可以对外提供服务。\n\n##### 2.安装nginx\n\n```\nyum install nginx\n```\n\n在/etc/nginx/conf.d文件夹下新建nginx启动的配置文件mysite.conf，输入以下信息\n\n    server {\n      listen 8000;  #启动的nginx进程监听请求的端口\n      server_name localhost;   #域名\n      location / {\n        include /etc/nginx/uwsgi_params;\n        uwsgi_pass 127.0.0.1:8001;  #对于动态请求，转发到本机的8001端口，也就是uwsgi监听的端口\n      }\n    \n      location /static/ {\n        alias /home/Maximum/vacancy/static/;    #设定静态文件所在目录\n      }\n    }\n##### 3.同步静态文件到nginx设置的目录下\n\n在django项目setting.py中增加\n\n```\nBASE_DIR = os.path.dirname(__file__)\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR,'..','vacancy','static') \n```\n\n然后在命令行行下执行\n\n```\npython manage.py collectstatic \n```\n\n##### 4.配置uwsgi\n\n项目根目录下创建uwsgi.ini文件\n\n```\nvi uwsgi.ini\n```\n\nuwsgi.ini内容\n\n```\n[uwsgi]\n# Django's wsgi file\nmodule = mysite.wsgi\npythonpath = /usr/local/lib/python3.5/site-packages\nsocket = 127.0.0.1:8001\npidfile = /home/Maximum/uwsgi.pid    \ndaemonize = /home/Maximum/uwsgi.log\n\n```\n\n介绍下uwsgi和nginx相关命令\n\n```\n启动uwsgi：uwsgi --ini uwsgi.ini\n停止uwsgi：uwsgi --stop uwsgi.pid\n重新加载配置：uwsgi --reload uwsgi.pid\n启动nginx：service nginx start\n停止nginx：service nginx stop\n重启nginx：service nginx restart\n```\n\n接下来启动uwsgi：\n\n```\nuwsgi --ini uwsgi.ini\n```\n\n启动nginx\n\n```\nservice nginx start\n```\n\n此时没问题的话就大功告成了，访问[173.199.118.8:8000/vacancies]()即可看到我们运行的项目了\n\n\n\n#### *遇到的坑\n\n##### 1.启动nginx时出现以下错误，可知端口已被占用\n\n```\n[gaarai@linode /etc/nginx]$ service nginx restart\n * Restarting nginx nginx\nnginx: [emerg] bind() to [::]:80 failed (98: Address already in use)\nnginx: [emerg] bind() to [::]:443 failed (98: Address already in use)\nnginx: [emerg] bind() to [::]:80 failed (98: Address already in use)\n```\n\n##### 解决方法：\n\n```\nnetstat -ntpl\n```\n\n查看当前运行的端口以及程序，内容类似如下：\n\n```\n[root@vultr mysite]# netstat -ntpl\nActive Internet connections (only servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name\ntcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      1502/nginx: master\ntcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      461/sshd\ntcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      677/master\ntcp        0      0 0.0.0.0:8000            0.0.0.0:*               LISTEN      1502/nginx: master\ntcp        0      0 127.0.0.1:8001          0.0.0.0:*               LISTEN      1475/uwsgi\ntcp6       0      0 :::3306                 :::*                    LIS\n```\n\n将使用进程端口80，8000，8001的进程PID关闭，uwsgi的进程需要强制关闭\n\n```\n[root@vultr mysite]# kill -9 1475\n[root@vultr mysite]# kill 1502\n```\n\n重新启动uwsgi和nginx\n\n```\n[root@vultr mysite]# uwsgi --ini uwsgi.ini\n[root@vultr mysite]# service nginx start\n```\n\n\n\n##### 2.访问网站出现Internal Server Error错误\n\n查看uwsgi.log日志文件\n\n```\ntail -30 uwsgi.log\n```\n\n日志里出现\n\n```\nunable to load app 0 (mountpoint='') (callable not found or import error)\n```\n\n**错误，**\n\n尝试执行\n\n```\nuwsgi --http :8000 --module mysite.wsgi\n```\n\n访问[173.199.118.8:8000/vacancies]()运行正常，可知是uwsgi.ini配置文件有误\n\n参考链接[Setting up django with uwsgi and nginx](https://stackoverflow.com/questions/18546299/setting-up-django-with-uwsgi-and-nginx)\n\n##### 解决办法：\n\n修改uwsgi.ini文件为\n\n```\n[uwsgi]\n\n# Django's wsgi file\n\nmodule = mysite.wsgi\npythonpath = /usr/local/lib/python3.5/site-packages\nsocket = 127.0.0.1:8001\npidfile = /home/Maximum/uwsgi.pid    \ndaemonize = /home/Maximum/uwsgi.log\n```\n\n之前有一些不太懂的设置加了上去，运行错误，去掉之后重启uwsgi和nginx服务即运行正常，\n\n果然自己不太懂的设置还是不能乱加\n\n##### 以上です","source":"_posts/nginx+uwsgi在centos上部署Django应用.md","raw":"---\ntitle: nginx+uwsgi在centos上部署Django应用\ndate: 2018-03-05 20:46:05\ntags: Django\ncategories: \n---\n\n\n\n**背景介绍**：\n\n之前做完一个Django项目，打算部署在自己的centos服务器上，可以远程访问，于是命令行上输入\n\npython manage.py runserver 0:8000\n\n就成功运行了，可惜，django自带的web服务器并不稳定，经常无缘无故断掉，于是想到\n\n使用主流的uwsgi+nginx来部署项目，\n\n至于Nginx+uWSGI+Django原理可参考[Nginx+uWSGI+Django原理](http://www.cnblogs.com/Xjng/p/aa4dd23918359c6414d54e4b972e9081.html)\n\n此处就不赘述了，下面介绍下具体部署步骤\n\n##### 1.安装uwsgi\n\n```\npip install uwsgi\n```\n\n此时可以尝试使用uwsgi来启动应用，其中wsgi.py在mysite文件夹下\n\n```\nuwsgi --http :8000 --module mysite.wsgi\n```\n\n在浏览其中输入127.0.0.1:8080 能够成功访问，说明你的应用服务器部署成功，已经可以对外提供服务。\n\n##### 2.安装nginx\n\n```\nyum install nginx\n```\n\n在/etc/nginx/conf.d文件夹下新建nginx启动的配置文件mysite.conf，输入以下信息\n\n    server {\n      listen 8000;  #启动的nginx进程监听请求的端口\n      server_name localhost;   #域名\n      location / {\n        include /etc/nginx/uwsgi_params;\n        uwsgi_pass 127.0.0.1:8001;  #对于动态请求，转发到本机的8001端口，也就是uwsgi监听的端口\n      }\n    \n      location /static/ {\n        alias /home/Maximum/vacancy/static/;    #设定静态文件所在目录\n      }\n    }\n##### 3.同步静态文件到nginx设置的目录下\n\n在django项目setting.py中增加\n\n```\nBASE_DIR = os.path.dirname(__file__)\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR,'..','vacancy','static') \n```\n\n然后在命令行行下执行\n\n```\npython manage.py collectstatic \n```\n\n##### 4.配置uwsgi\n\n项目根目录下创建uwsgi.ini文件\n\n```\nvi uwsgi.ini\n```\n\nuwsgi.ini内容\n\n```\n[uwsgi]\n# Django's wsgi file\nmodule = mysite.wsgi\npythonpath = /usr/local/lib/python3.5/site-packages\nsocket = 127.0.0.1:8001\npidfile = /home/Maximum/uwsgi.pid    \ndaemonize = /home/Maximum/uwsgi.log\n\n```\n\n介绍下uwsgi和nginx相关命令\n\n```\n启动uwsgi：uwsgi --ini uwsgi.ini\n停止uwsgi：uwsgi --stop uwsgi.pid\n重新加载配置：uwsgi --reload uwsgi.pid\n启动nginx：service nginx start\n停止nginx：service nginx stop\n重启nginx：service nginx restart\n```\n\n接下来启动uwsgi：\n\n```\nuwsgi --ini uwsgi.ini\n```\n\n启动nginx\n\n```\nservice nginx start\n```\n\n此时没问题的话就大功告成了，访问[173.199.118.8:8000/vacancies]()即可看到我们运行的项目了\n\n\n\n#### *遇到的坑\n\n##### 1.启动nginx时出现以下错误，可知端口已被占用\n\n```\n[gaarai@linode /etc/nginx]$ service nginx restart\n * Restarting nginx nginx\nnginx: [emerg] bind() to [::]:80 failed (98: Address already in use)\nnginx: [emerg] bind() to [::]:443 failed (98: Address already in use)\nnginx: [emerg] bind() to [::]:80 failed (98: Address already in use)\n```\n\n##### 解决方法：\n\n```\nnetstat -ntpl\n```\n\n查看当前运行的端口以及程序，内容类似如下：\n\n```\n[root@vultr mysite]# netstat -ntpl\nActive Internet connections (only servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name\ntcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      1502/nginx: master\ntcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      461/sshd\ntcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      677/master\ntcp        0      0 0.0.0.0:8000            0.0.0.0:*               LISTEN      1502/nginx: master\ntcp        0      0 127.0.0.1:8001          0.0.0.0:*               LISTEN      1475/uwsgi\ntcp6       0      0 :::3306                 :::*                    LIS\n```\n\n将使用进程端口80，8000，8001的进程PID关闭，uwsgi的进程需要强制关闭\n\n```\n[root@vultr mysite]# kill -9 1475\n[root@vultr mysite]# kill 1502\n```\n\n重新启动uwsgi和nginx\n\n```\n[root@vultr mysite]# uwsgi --ini uwsgi.ini\n[root@vultr mysite]# service nginx start\n```\n\n\n\n##### 2.访问网站出现Internal Server Error错误\n\n查看uwsgi.log日志文件\n\n```\ntail -30 uwsgi.log\n```\n\n日志里出现\n\n```\nunable to load app 0 (mountpoint='') (callable not found or import error)\n```\n\n**错误，**\n\n尝试执行\n\n```\nuwsgi --http :8000 --module mysite.wsgi\n```\n\n访问[173.199.118.8:8000/vacancies]()运行正常，可知是uwsgi.ini配置文件有误\n\n参考链接[Setting up django with uwsgi and nginx](https://stackoverflow.com/questions/18546299/setting-up-django-with-uwsgi-and-nginx)\n\n##### 解决办法：\n\n修改uwsgi.ini文件为\n\n```\n[uwsgi]\n\n# Django's wsgi file\n\nmodule = mysite.wsgi\npythonpath = /usr/local/lib/python3.5/site-packages\nsocket = 127.0.0.1:8001\npidfile = /home/Maximum/uwsgi.pid    \ndaemonize = /home/Maximum/uwsgi.log\n```\n\n之前有一些不太懂的设置加了上去，运行错误，去掉之后重启uwsgi和nginx服务即运行正常，\n\n果然自己不太懂的设置还是不能乱加\n\n##### 以上です","slug":"nginx+uwsgi在centos上部署Django应用","published":1,"updated":"2018-03-12T16:46:15.082Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq50003dbcuszhkwz2ln","content":"<p><strong>背景介绍</strong>：</p>\n<p>之前做完一个Django项目，打算部署在自己的centos服务器上，可以远程访问，于是命令行上输入</p>\n<p>python manage.py runserver 0:8000</p>\n<p>就成功运行了，可惜，django自带的web服务器并不稳定，经常无缘无故断掉，于是想到</p>\n<p>使用主流的uwsgi+nginx来部署项目，</p>\n<p>至于Nginx+uWSGI+Django原理可参考<a href=\"http://www.cnblogs.com/Xjng/p/aa4dd23918359c6414d54e4b972e9081.html\" target=\"_blank\" rel=\"noopener\">Nginx+uWSGI+Django原理</a></p>\n<p>此处就不赘述了，下面介绍下具体部署步骤</p>\n<h5 id=\"1-安装uwsgi\"><a href=\"#1-安装uwsgi\" class=\"headerlink\" title=\"1.安装uwsgi\"></a>1.安装uwsgi</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install uwsgi</span><br></pre></td></tr></table></figure>\n<p>此时可以尝试使用uwsgi来启动应用，其中wsgi.py在mysite文件夹下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uwsgi --http :8000 --module mysite.wsgi</span><br></pre></td></tr></table></figure>\n<p>在浏览其中输入127.0.0.1:8080 能够成功访问，说明你的应用服务器部署成功，已经可以对外提供服务。</p>\n<h5 id=\"2-安装nginx\"><a href=\"#2-安装nginx\" class=\"headerlink\" title=\"2.安装nginx\"></a>2.安装nginx</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nginx</span><br></pre></td></tr></table></figure>\n<p>在/etc/nginx/conf.d文件夹下新建nginx启动的配置文件mysite.conf，输入以下信息</p>\n<pre><code>server {\n  listen 8000;  #启动的nginx进程监听请求的端口\n  server_name localhost;   #域名\n  location / {\n    include /etc/nginx/uwsgi_params;\n    uwsgi_pass 127.0.0.1:8001;  #对于动态请求，转发到本机的8001端口，也就是uwsgi监听的端口\n  }\n\n  location /static/ {\n    alias /home/Maximum/vacancy/static/;    #设定静态文件所在目录\n  }\n}\n</code></pre><h5 id=\"3-同步静态文件到nginx设置的目录下\"><a href=\"#3-同步静态文件到nginx设置的目录下\" class=\"headerlink\" title=\"3.同步静态文件到nginx设置的目录下\"></a>3.同步静态文件到nginx设置的目录下</h5><p>在django项目setting.py中增加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BASE_DIR = os.path.dirname(__file__)</span><br><span class=\"line\">STATIC_URL = &apos;/static/&apos;</span><br><span class=\"line\">STATIC_ROOT = os.path.join(BASE_DIR,&apos;..&apos;,&apos;vacancy&apos;,&apos;static&apos;)</span><br></pre></td></tr></table></figure>\n<p>然后在命令行行下执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py collectstatic</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-配置uwsgi\"><a href=\"#4-配置uwsgi\" class=\"headerlink\" title=\"4.配置uwsgi\"></a>4.配置uwsgi</h5><p>项目根目录下创建uwsgi.ini文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi uwsgi.ini</span><br></pre></td></tr></table></figure>\n<p>uwsgi.ini内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[uwsgi]</span><br><span class=\"line\"># Django&apos;s wsgi file</span><br><span class=\"line\">module = mysite.wsgi</span><br><span class=\"line\">pythonpath = /usr/local/lib/python3.5/site-packages</span><br><span class=\"line\">socket = 127.0.0.1:8001</span><br><span class=\"line\">pidfile = /home/Maximum/uwsgi.pid    </span><br><span class=\"line\">daemonize = /home/Maximum/uwsgi.log</span><br></pre></td></tr></table></figure>\n<p>介绍下uwsgi和nginx相关命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动uwsgi：uwsgi --ini uwsgi.ini</span><br><span class=\"line\">停止uwsgi：uwsgi --stop uwsgi.pid</span><br><span class=\"line\">重新加载配置：uwsgi --reload uwsgi.pid</span><br><span class=\"line\">启动nginx：service nginx start</span><br><span class=\"line\">停止nginx：service nginx stop</span><br><span class=\"line\">重启nginx：service nginx restart</span><br></pre></td></tr></table></figure>\n<p>接下来启动uwsgi：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uwsgi --ini uwsgi.ini</span><br></pre></td></tr></table></figure>\n<p>启动nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx start</span><br></pre></td></tr></table></figure>\n<p>此时没问题的话就大功告成了，访问<a href=\"\">173.199.118.8:8000/vacancies</a>即可看到我们运行的项目了</p>\n<h4 id=\"遇到的坑\"><a href=\"#遇到的坑\" class=\"headerlink\" title=\"*遇到的坑\"></a>*遇到的坑</h4><h5 id=\"1-启动nginx时出现以下错误，可知端口已被占用\"><a href=\"#1-启动nginx时出现以下错误，可知端口已被占用\" class=\"headerlink\" title=\"1.启动nginx时出现以下错误，可知端口已被占用\"></a>1.启动nginx时出现以下错误，可知端口已被占用</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[gaarai@linode /etc/nginx]$ service nginx restart</span><br><span class=\"line\"> * Restarting nginx nginx</span><br><span class=\"line\">nginx: [emerg] bind() to [::]:80 failed (98: Address already in use)</span><br><span class=\"line\">nginx: [emerg] bind() to [::]:443 failed (98: Address already in use)</span><br><span class=\"line\">nginx: [emerg] bind() to [::]:80 failed (98: Address already in use)</span><br></pre></td></tr></table></figure>\n<h5 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ntpl</span><br></pre></td></tr></table></figure>\n<p>查看当前运行的端口以及程序，内容类似如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultr mysite]# netstat -ntpl</span><br><span class=\"line\">Active Internet connections (only servers)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name</span><br><span class=\"line\">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      1502/nginx: master</span><br><span class=\"line\">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      461/sshd</span><br><span class=\"line\">tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      677/master</span><br><span class=\"line\">tcp        0      0 0.0.0.0:8000            0.0.0.0:*               LISTEN      1502/nginx: master</span><br><span class=\"line\">tcp        0      0 127.0.0.1:8001          0.0.0.0:*               LISTEN      1475/uwsgi</span><br><span class=\"line\">tcp6       0      0 :::3306                 :::*                    LIS</span><br></pre></td></tr></table></figure>\n<p>将使用进程端口80，8000，8001的进程PID关闭，uwsgi的进程需要强制关闭</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultr mysite]# kill -9 1475</span><br><span class=\"line\">[root@vultr mysite]# kill 1502</span><br></pre></td></tr></table></figure>\n<p>重新启动uwsgi和nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultr mysite]# uwsgi --ini uwsgi.ini</span><br><span class=\"line\">[root@vultr mysite]# service nginx start</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-访问网站出现Internal-Server-Error错误\"><a href=\"#2-访问网站出现Internal-Server-Error错误\" class=\"headerlink\" title=\"2.访问网站出现Internal Server Error错误\"></a>2.访问网站出现Internal Server Error错误</h5><p>查看uwsgi.log日志文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -30 uwsgi.log</span><br></pre></td></tr></table></figure>\n<p>日志里出现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unable to load app 0 (mountpoint=&apos;&apos;) (callable not found or import error)</span><br></pre></td></tr></table></figure>\n<p><strong>错误，</strong></p>\n<p>尝试执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uwsgi --http :8000 --module mysite.wsgi</span><br></pre></td></tr></table></figure>\n<p>访问<a href=\"\">173.199.118.8:8000/vacancies</a>运行正常，可知是uwsgi.ini配置文件有误</p>\n<p>参考链接<a href=\"https://stackoverflow.com/questions/18546299/setting-up-django-with-uwsgi-and-nginx\" target=\"_blank\" rel=\"noopener\">Setting up django with uwsgi and nginx</a></p>\n<h5 id=\"解决办法：\"><a href=\"#解决办法：\" class=\"headerlink\" title=\"解决办法：\"></a>解决办法：</h5><p>修改uwsgi.ini文件为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[uwsgi]</span><br><span class=\"line\"></span><br><span class=\"line\"># Django&apos;s wsgi file</span><br><span class=\"line\"></span><br><span class=\"line\">module = mysite.wsgi</span><br><span class=\"line\">pythonpath = /usr/local/lib/python3.5/site-packages</span><br><span class=\"line\">socket = 127.0.0.1:8001</span><br><span class=\"line\">pidfile = /home/Maximum/uwsgi.pid    </span><br><span class=\"line\">daemonize = /home/Maximum/uwsgi.log</span><br></pre></td></tr></table></figure>\n<p>之前有一些不太懂的设置加了上去，运行错误，去掉之后重启uwsgi和nginx服务即运行正常，</p>\n<p>果然自己不太懂的设置还是不能乱加</p>\n<h5 id=\"以上です\"><a href=\"#以上です\" class=\"headerlink\" title=\"以上です\"></a>以上です</h5>","site":{"data":{}},"excerpt":"","more":"<p><strong>背景介绍</strong>：</p>\n<p>之前做完一个Django项目，打算部署在自己的centos服务器上，可以远程访问，于是命令行上输入</p>\n<p>python manage.py runserver 0:8000</p>\n<p>就成功运行了，可惜，django自带的web服务器并不稳定，经常无缘无故断掉，于是想到</p>\n<p>使用主流的uwsgi+nginx来部署项目，</p>\n<p>至于Nginx+uWSGI+Django原理可参考<a href=\"http://www.cnblogs.com/Xjng/p/aa4dd23918359c6414d54e4b972e9081.html\" target=\"_blank\" rel=\"noopener\">Nginx+uWSGI+Django原理</a></p>\n<p>此处就不赘述了，下面介绍下具体部署步骤</p>\n<h5 id=\"1-安装uwsgi\"><a href=\"#1-安装uwsgi\" class=\"headerlink\" title=\"1.安装uwsgi\"></a>1.安装uwsgi</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install uwsgi</span><br></pre></td></tr></table></figure>\n<p>此时可以尝试使用uwsgi来启动应用，其中wsgi.py在mysite文件夹下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uwsgi --http :8000 --module mysite.wsgi</span><br></pre></td></tr></table></figure>\n<p>在浏览其中输入127.0.0.1:8080 能够成功访问，说明你的应用服务器部署成功，已经可以对外提供服务。</p>\n<h5 id=\"2-安装nginx\"><a href=\"#2-安装nginx\" class=\"headerlink\" title=\"2.安装nginx\"></a>2.安装nginx</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nginx</span><br></pre></td></tr></table></figure>\n<p>在/etc/nginx/conf.d文件夹下新建nginx启动的配置文件mysite.conf，输入以下信息</p>\n<pre><code>server {\n  listen 8000;  #启动的nginx进程监听请求的端口\n  server_name localhost;   #域名\n  location / {\n    include /etc/nginx/uwsgi_params;\n    uwsgi_pass 127.0.0.1:8001;  #对于动态请求，转发到本机的8001端口，也就是uwsgi监听的端口\n  }\n\n  location /static/ {\n    alias /home/Maximum/vacancy/static/;    #设定静态文件所在目录\n  }\n}\n</code></pre><h5 id=\"3-同步静态文件到nginx设置的目录下\"><a href=\"#3-同步静态文件到nginx设置的目录下\" class=\"headerlink\" title=\"3.同步静态文件到nginx设置的目录下\"></a>3.同步静态文件到nginx设置的目录下</h5><p>在django项目setting.py中增加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BASE_DIR = os.path.dirname(__file__)</span><br><span class=\"line\">STATIC_URL = &apos;/static/&apos;</span><br><span class=\"line\">STATIC_ROOT = os.path.join(BASE_DIR,&apos;..&apos;,&apos;vacancy&apos;,&apos;static&apos;)</span><br></pre></td></tr></table></figure>\n<p>然后在命令行行下执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py collectstatic</span><br></pre></td></tr></table></figure>\n<h5 id=\"4-配置uwsgi\"><a href=\"#4-配置uwsgi\" class=\"headerlink\" title=\"4.配置uwsgi\"></a>4.配置uwsgi</h5><p>项目根目录下创建uwsgi.ini文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi uwsgi.ini</span><br></pre></td></tr></table></figure>\n<p>uwsgi.ini内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[uwsgi]</span><br><span class=\"line\"># Django&apos;s wsgi file</span><br><span class=\"line\">module = mysite.wsgi</span><br><span class=\"line\">pythonpath = /usr/local/lib/python3.5/site-packages</span><br><span class=\"line\">socket = 127.0.0.1:8001</span><br><span class=\"line\">pidfile = /home/Maximum/uwsgi.pid    </span><br><span class=\"line\">daemonize = /home/Maximum/uwsgi.log</span><br></pre></td></tr></table></figure>\n<p>介绍下uwsgi和nginx相关命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动uwsgi：uwsgi --ini uwsgi.ini</span><br><span class=\"line\">停止uwsgi：uwsgi --stop uwsgi.pid</span><br><span class=\"line\">重新加载配置：uwsgi --reload uwsgi.pid</span><br><span class=\"line\">启动nginx：service nginx start</span><br><span class=\"line\">停止nginx：service nginx stop</span><br><span class=\"line\">重启nginx：service nginx restart</span><br></pre></td></tr></table></figure>\n<p>接下来启动uwsgi：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uwsgi --ini uwsgi.ini</span><br></pre></td></tr></table></figure>\n<p>启动nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx start</span><br></pre></td></tr></table></figure>\n<p>此时没问题的话就大功告成了，访问<a href=\"\">173.199.118.8:8000/vacancies</a>即可看到我们运行的项目了</p>\n<h4 id=\"遇到的坑\"><a href=\"#遇到的坑\" class=\"headerlink\" title=\"*遇到的坑\"></a>*遇到的坑</h4><h5 id=\"1-启动nginx时出现以下错误，可知端口已被占用\"><a href=\"#1-启动nginx时出现以下错误，可知端口已被占用\" class=\"headerlink\" title=\"1.启动nginx时出现以下错误，可知端口已被占用\"></a>1.启动nginx时出现以下错误，可知端口已被占用</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[gaarai@linode /etc/nginx]$ service nginx restart</span><br><span class=\"line\"> * Restarting nginx nginx</span><br><span class=\"line\">nginx: [emerg] bind() to [::]:80 failed (98: Address already in use)</span><br><span class=\"line\">nginx: [emerg] bind() to [::]:443 failed (98: Address already in use)</span><br><span class=\"line\">nginx: [emerg] bind() to [::]:80 failed (98: Address already in use)</span><br></pre></td></tr></table></figure>\n<h5 id=\"解决方法：\"><a href=\"#解决方法：\" class=\"headerlink\" title=\"解决方法：\"></a>解决方法：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ntpl</span><br></pre></td></tr></table></figure>\n<p>查看当前运行的端口以及程序，内容类似如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultr mysite]# netstat -ntpl</span><br><span class=\"line\">Active Internet connections (only servers)</span><br><span class=\"line\">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name</span><br><span class=\"line\">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      1502/nginx: master</span><br><span class=\"line\">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      461/sshd</span><br><span class=\"line\">tcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      677/master</span><br><span class=\"line\">tcp        0      0 0.0.0.0:8000            0.0.0.0:*               LISTEN      1502/nginx: master</span><br><span class=\"line\">tcp        0      0 127.0.0.1:8001          0.0.0.0:*               LISTEN      1475/uwsgi</span><br><span class=\"line\">tcp6       0      0 :::3306                 :::*                    LIS</span><br></pre></td></tr></table></figure>\n<p>将使用进程端口80，8000，8001的进程PID关闭，uwsgi的进程需要强制关闭</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultr mysite]# kill -9 1475</span><br><span class=\"line\">[root@vultr mysite]# kill 1502</span><br></pre></td></tr></table></figure>\n<p>重新启动uwsgi和nginx</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@vultr mysite]# uwsgi --ini uwsgi.ini</span><br><span class=\"line\">[root@vultr mysite]# service nginx start</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-访问网站出现Internal-Server-Error错误\"><a href=\"#2-访问网站出现Internal-Server-Error错误\" class=\"headerlink\" title=\"2.访问网站出现Internal Server Error错误\"></a>2.访问网站出现Internal Server Error错误</h5><p>查看uwsgi.log日志文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tail -30 uwsgi.log</span><br></pre></td></tr></table></figure>\n<p>日志里出现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unable to load app 0 (mountpoint=&apos;&apos;) (callable not found or import error)</span><br></pre></td></tr></table></figure>\n<p><strong>错误，</strong></p>\n<p>尝试执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uwsgi --http :8000 --module mysite.wsgi</span><br></pre></td></tr></table></figure>\n<p>访问<a href=\"\">173.199.118.8:8000/vacancies</a>运行正常，可知是uwsgi.ini配置文件有误</p>\n<p>参考链接<a href=\"https://stackoverflow.com/questions/18546299/setting-up-django-with-uwsgi-and-nginx\" target=\"_blank\" rel=\"noopener\">Setting up django with uwsgi and nginx</a></p>\n<h5 id=\"解决办法：\"><a href=\"#解决办法：\" class=\"headerlink\" title=\"解决办法：\"></a>解决办法：</h5><p>修改uwsgi.ini文件为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[uwsgi]</span><br><span class=\"line\"></span><br><span class=\"line\"># Django&apos;s wsgi file</span><br><span class=\"line\"></span><br><span class=\"line\">module = mysite.wsgi</span><br><span class=\"line\">pythonpath = /usr/local/lib/python3.5/site-packages</span><br><span class=\"line\">socket = 127.0.0.1:8001</span><br><span class=\"line\">pidfile = /home/Maximum/uwsgi.pid    </span><br><span class=\"line\">daemonize = /home/Maximum/uwsgi.log</span><br></pre></td></tr></table></figure>\n<p>之前有一些不太懂的设置加了上去，运行错误，去掉之后重启uwsgi和nginx服务即运行正常，</p>\n<p>果然自己不太懂的设置还是不能乱加</p>\n<h5 id=\"以上です\"><a href=\"#以上です\" class=\"headerlink\" title=\"以上です\"></a>以上です</h5>"},{"title":"putty及winscp保持自动连接设置","date":"2018-03-06T13:16:59.000Z","_content":"\nputty以及winscp一段时间不与服务器通信就自动断开连接，比较麻烦，\n\n下面就介绍下如何保持putty以及winscp自动连接\n\n1.putty:\n\n打开putty,进去到命令行页面，在空白处右击选择Change Settings:\n\n打开putty,\"Connection\"，改右边的\"Seconds between keepaliaves(0 to turn off)\"，默认是0，单位是秒，一般写10。意思是每隔10秒就给服务器发送一个空数据包，以免服务器长时间没有收到数据包而自动断开 ssh 连接。\n\n修改完后需要保存到Session中，点击Session,在Saved Sessions下面框框下输入你想要保存的名字，\n\n然后点击Save,最后Apply就大功告成了。\n\n2.WinScp:\n\n选项 -》选项 -》面板 -》远程，勾选刷新原创面板间隔(E)\n\n后面的时间默认是60秒\n\n\n\n\n\n\n\n","source":"_posts/putty及winscp保持自动连接设置.md","raw":"---\ntitle: putty及winscp保持自动连接设置\ndate: 2018-03-06 21:16:59\ntags: Linux\ncategories: \n---\n\nputty以及winscp一段时间不与服务器通信就自动断开连接，比较麻烦，\n\n下面就介绍下如何保持putty以及winscp自动连接\n\n1.putty:\n\n打开putty,进去到命令行页面，在空白处右击选择Change Settings:\n\n打开putty,\"Connection\"，改右边的\"Seconds between keepaliaves(0 to turn off)\"，默认是0，单位是秒，一般写10。意思是每隔10秒就给服务器发送一个空数据包，以免服务器长时间没有收到数据包而自动断开 ssh 连接。\n\n修改完后需要保存到Session中，点击Session,在Saved Sessions下面框框下输入你想要保存的名字，\n\n然后点击Save,最后Apply就大功告成了。\n\n2.WinScp:\n\n选项 -》选项 -》面板 -》远程，勾选刷新原创面板间隔(E)\n\n后面的时间默认是60秒\n\n\n\n\n\n\n\n","slug":"putty及winscp保持自动连接设置","published":1,"updated":"2018-03-18T09:32:27.490Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq50003gbcusyfny8zqk","content":"<p>putty以及winscp一段时间不与服务器通信就自动断开连接，比较麻烦，</p>\n<p>下面就介绍下如何保持putty以及winscp自动连接</p>\n<p>1.putty:</p>\n<p>打开putty,进去到命令行页面，在空白处右击选择Change Settings:</p>\n<p>打开putty,”Connection”，改右边的”Seconds between keepaliaves(0 to turn off)”，默认是0，单位是秒，一般写10。意思是每隔10秒就给服务器发送一个空数据包，以免服务器长时间没有收到数据包而自动断开 ssh 连接。</p>\n<p>修改完后需要保存到Session中，点击Session,在Saved Sessions下面框框下输入你想要保存的名字，</p>\n<p>然后点击Save,最后Apply就大功告成了。</p>\n<p>2.WinScp:</p>\n<p>选项 -》选项 -》面板 -》远程，勾选刷新原创面板间隔(E)</p>\n<p>后面的时间默认是60秒</p>\n","site":{"data":{}},"excerpt":"","more":"<p>putty以及winscp一段时间不与服务器通信就自动断开连接，比较麻烦，</p>\n<p>下面就介绍下如何保持putty以及winscp自动连接</p>\n<p>1.putty:</p>\n<p>打开putty,进去到命令行页面，在空白处右击选择Change Settings:</p>\n<p>打开putty,”Connection”，改右边的”Seconds between keepaliaves(0 to turn off)”，默认是0，单位是秒，一般写10。意思是每隔10秒就给服务器发送一个空数据包，以免服务器长时间没有收到数据包而自动断开 ssh 连接。</p>\n<p>修改完后需要保存到Session中，点击Session,在Saved Sessions下面框框下输入你想要保存的名字，</p>\n<p>然后点击Save,最后Apply就大功告成了。</p>\n<p>2.WinScp:</p>\n<p>选项 -》选项 -》面板 -》远程，勾选刷新原创面板间隔(E)</p>\n<p>后面的时间默认是60秒</p>\n"},{"title":"python中格式化字符串的几种方法","date":"2018-03-04T16:11:36.000Z","_content":"平时写代码难免要与字符打交道，格式化字符串又是我们经常遇到的\n\n问题，下面我就稍微整理以下常用的方法吧\n\n1. 使用%s格式化字符串\n\n   举个例子\n\n   1.传递单个参数\n\n   name = 'tom'\n   print(\"I'm %s.\" %name)\n\n   \\# output => I'm tom\n\n   2.需要传递多个参数时使用元组：\n\n   name = 'tom'\n\n   age = 10\n\n​       print(\"I'm %s. I'm %d year old\" % (name,age))\n\n​        \\# output => I'm tom. I'm 10 year old\n\n2. format格式化字符串\n\n   str.format()可以通过位置，关键字参数和下标来格式化字符串\n\n   1.通过 位置\n   In [1]: '{0},{1}'.format('kzc',18) \n   Out[1]: 'kzc,18'\n   2.通过关键字参数\n   In [5]: '{name},{age}'.format(age=18,name='kzc') \n   Out[5]: 'kzc,18'\n\n   3.通过下标\n\n   In [5]: print(\"{1[0]} is {1[1]} years old\".format([\"wang\",21],[\"li\",18]))\n\n   Out[5]: li is 18 years old","source":"_posts/python中格式化字符串的几种方法.md","raw":"---\ntitle: python中格式化字符串的几种方法\ndate: 2018-03-05 00:11:36\ntags:\ncategories: Python\n---\n平时写代码难免要与字符打交道，格式化字符串又是我们经常遇到的\n\n问题，下面我就稍微整理以下常用的方法吧\n\n1. 使用%s格式化字符串\n\n   举个例子\n\n   1.传递单个参数\n\n   name = 'tom'\n   print(\"I'm %s.\" %name)\n\n   \\# output => I'm tom\n\n   2.需要传递多个参数时使用元组：\n\n   name = 'tom'\n\n   age = 10\n\n​       print(\"I'm %s. I'm %d year old\" % (name,age))\n\n​        \\# output => I'm tom. I'm 10 year old\n\n2. format格式化字符串\n\n   str.format()可以通过位置，关键字参数和下标来格式化字符串\n\n   1.通过 位置\n   In [1]: '{0},{1}'.format('kzc',18) \n   Out[1]: 'kzc,18'\n   2.通过关键字参数\n   In [5]: '{name},{age}'.format(age=18,name='kzc') \n   Out[5]: 'kzc,18'\n\n   3.通过下标\n\n   In [5]: print(\"{1[0]} is {1[1]} years old\".format([\"wang\",21],[\"li\",18]))\n\n   Out[5]: li is 18 years old","slug":"python中格式化字符串的几种方法","published":1,"updated":"2018-03-04T16:21:51.932Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq50003jbcus4ifncrxn","content":"<p>平时写代码难免要与字符打交道，格式化字符串又是我们经常遇到的</p>\n<p>问题，下面我就稍微整理以下常用的方法吧</p>\n<ol>\n<li><p>使用%s格式化字符串</p>\n<p>举个例子</p>\n<p>1.传递单个参数</p>\n<p>name = ‘tom’<br>print(“I’m %s.” %name)</p>\n<p># output =&gt; I’m tom</p>\n<p>2.需要传递多个参数时使用元组：</p>\n<p>name = ‘tom’</p>\n<p>age = 10</p>\n</li>\n</ol>\n<p>​       print(“I’m %s. I’m %d year old” % (name,age))</p>\n<p>​        # output =&gt; I’m tom. I’m 10 year old</p>\n<ol start=\"2\">\n<li><p>format格式化字符串</p>\n<p>str.format()可以通过位置，关键字参数和下标来格式化字符串</p>\n<p>1.通过 位置<br>In [1]: ‘{0},{1}’.format(‘kzc’,18)<br>Out[1]: ‘kzc,18’<br>2.通过关键字参数<br>In [5]: ‘{name},{age}’.format(age=18,name=’kzc’)<br>Out[5]: ‘kzc,18’</p>\n<p>3.通过下标</p>\n<p>In [5]: print(“{1[0]} is {1[1]} years old”.format([“wang”,21],[“li”,18]))</p>\n<p>Out[5]: li is 18 years old</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>平时写代码难免要与字符打交道，格式化字符串又是我们经常遇到的</p>\n<p>问题，下面我就稍微整理以下常用的方法吧</p>\n<ol>\n<li><p>使用%s格式化字符串</p>\n<p>举个例子</p>\n<p>1.传递单个参数</p>\n<p>name = ‘tom’<br>print(“I’m %s.” %name)</p>\n<p># output =&gt; I’m tom</p>\n<p>2.需要传递多个参数时使用元组：</p>\n<p>name = ‘tom’</p>\n<p>age = 10</p>\n</li>\n</ol>\n<p>​       print(“I’m %s. I’m %d year old” % (name,age))</p>\n<p>​        # output =&gt; I’m tom. I’m 10 year old</p>\n<ol start=\"2\">\n<li><p>format格式化字符串</p>\n<p>str.format()可以通过位置，关键字参数和下标来格式化字符串</p>\n<p>1.通过 位置<br>In [1]: ‘{0},{1}’.format(‘kzc’,18)<br>Out[1]: ‘kzc,18’<br>2.通过关键字参数<br>In [5]: ‘{name},{age}’.format(age=18,name=’kzc’)<br>Out[5]: ‘kzc,18’</p>\n<p>3.通过下标</p>\n<p>In [5]: print(“{1[0]} is {1[1]} years old”.format([“wang”,21],[“li”,18]))</p>\n<p>Out[5]: li is 18 years old</p>\n</li>\n</ol>\n"},{"title":"shadowsocks多用户访问配置","date":"2018-03-12T15:09:42.000Z","_content":"\n刚安装shadowsocks的时候，由于只设置了一个用户密码，\n\n现在因为不止我一个一个人用\n\n所以要设置一下多用户访问，过程如下：\n\n1.修改设置文件\n\n```\nvi /etc/ss.json\n```\n\n\n将\n\n```\n{\n \"server\": \"::\",\n \"local_address\": \"127.0.0.1\",\n \"local_port\": 1080,\n \"port_password\": {\n       \"8080\": \"password\"\n },\n \"timeout\": 300,\n \"method\": \"aes-256-cfb\",\n \"fast_open\": false\n}\n```\n\n\n改为\n\n```\n{\n \"server\": \"::\",\n \"local_address\": \"127.0.0.1\",\n \"local_port\": 1080,\n \"port_password\": {\n       \"8080\": \"password\",\n       \"443\":\"password2\"\n },\n \"timeout\": 300,\n \"method\": \"aes-256-cfb\",\n \"fast_open\": false\n}\n```\n\n\n2.开放访问端口\n\n```\nfirewall-cmd --permanent --zone=public --add-port=344/tcp\n\nfire-cmd --reload\n```\n\n4.加载配置文件\n\n```\nssserver -c /etc/ss.json -d restart\n```\n\n到此设置过程就结束了，可以输入自己刚才设置的端口密码来实验是否成功生效了。","source":"_posts/shadowsocks多用户访问配置.md","raw":"---\ntitle: shadowsocks多用户访问配置\ndate: 2018-03-12 23:09:42\ntags: shadowsocks\ncategories: tools\n---\n\n刚安装shadowsocks的时候，由于只设置了一个用户密码，\n\n现在因为不止我一个一个人用\n\n所以要设置一下多用户访问，过程如下：\n\n1.修改设置文件\n\n```\nvi /etc/ss.json\n```\n\n\n将\n\n```\n{\n \"server\": \"::\",\n \"local_address\": \"127.0.0.1\",\n \"local_port\": 1080,\n \"port_password\": {\n       \"8080\": \"password\"\n },\n \"timeout\": 300,\n \"method\": \"aes-256-cfb\",\n \"fast_open\": false\n}\n```\n\n\n改为\n\n```\n{\n \"server\": \"::\",\n \"local_address\": \"127.0.0.1\",\n \"local_port\": 1080,\n \"port_password\": {\n       \"8080\": \"password\",\n       \"443\":\"password2\"\n },\n \"timeout\": 300,\n \"method\": \"aes-256-cfb\",\n \"fast_open\": false\n}\n```\n\n\n2.开放访问端口\n\n```\nfirewall-cmd --permanent --zone=public --add-port=344/tcp\n\nfire-cmd --reload\n```\n\n4.加载配置文件\n\n```\nssserver -c /etc/ss.json -d restart\n```\n\n到此设置过程就结束了，可以输入自己刚才设置的端口密码来实验是否成功生效了。","slug":"shadowsocks多用户访问配置","published":1,"updated":"2018-03-12T15:28:35.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq50003mbcust1feg3wr","content":"<p>刚安装shadowsocks的时候，由于只设置了一个用户密码，</p>\n<p>现在因为不止我一个一个人用</p>\n<p>所以要设置一下多用户访问，过程如下：</p>\n<p>1.修改设置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/ss.json</span><br></pre></td></tr></table></figure>\n<p>将</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> &quot;server&quot;: &quot;::&quot;,</span><br><span class=\"line\"> &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class=\"line\"> &quot;local_port&quot;: 1080,</span><br><span class=\"line\"> &quot;port_password&quot;: &#123;</span><br><span class=\"line\">       &quot;8080&quot;: &quot;password&quot;</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> &quot;timeout&quot;: 300,</span><br><span class=\"line\"> &quot;method&quot;: &quot;aes-256-cfb&quot;,</span><br><span class=\"line\"> &quot;fast_open&quot;: false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>改为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> &quot;server&quot;: &quot;::&quot;,</span><br><span class=\"line\"> &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class=\"line\"> &quot;local_port&quot;: 1080,</span><br><span class=\"line\"> &quot;port_password&quot;: &#123;</span><br><span class=\"line\">       &quot;8080&quot;: &quot;password&quot;,</span><br><span class=\"line\">       &quot;443&quot;:&quot;password2&quot;</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> &quot;timeout&quot;: 300,</span><br><span class=\"line\"> &quot;method&quot;: &quot;aes-256-cfb&quot;,</span><br><span class=\"line\"> &quot;fast_open&quot;: false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.开放访问端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --permanent --zone=public --add-port=344/tcp</span><br><span class=\"line\"></span><br><span class=\"line\">fire-cmd --reload</span><br></pre></td></tr></table></figure>\n<p>4.加载配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -c /etc/ss.json -d restart</span><br></pre></td></tr></table></figure>\n<p>到此设置过程就结束了，可以输入自己刚才设置的端口密码来实验是否成功生效了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>刚安装shadowsocks的时候，由于只设置了一个用户密码，</p>\n<p>现在因为不止我一个一个人用</p>\n<p>所以要设置一下多用户访问，过程如下：</p>\n<p>1.修改设置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/ss.json</span><br></pre></td></tr></table></figure>\n<p>将</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> &quot;server&quot;: &quot;::&quot;,</span><br><span class=\"line\"> &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class=\"line\"> &quot;local_port&quot;: 1080,</span><br><span class=\"line\"> &quot;port_password&quot;: &#123;</span><br><span class=\"line\">       &quot;8080&quot;: &quot;password&quot;</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> &quot;timeout&quot;: 300,</span><br><span class=\"line\"> &quot;method&quot;: &quot;aes-256-cfb&quot;,</span><br><span class=\"line\"> &quot;fast_open&quot;: false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>改为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> &quot;server&quot;: &quot;::&quot;,</span><br><span class=\"line\"> &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class=\"line\"> &quot;local_port&quot;: 1080,</span><br><span class=\"line\"> &quot;port_password&quot;: &#123;</span><br><span class=\"line\">       &quot;8080&quot;: &quot;password&quot;,</span><br><span class=\"line\">       &quot;443&quot;:&quot;password2&quot;</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> &quot;timeout&quot;: 300,</span><br><span class=\"line\"> &quot;method&quot;: &quot;aes-256-cfb&quot;,</span><br><span class=\"line\"> &quot;fast_open&quot;: false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.开放访问端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --permanent --zone=public --add-port=344/tcp</span><br><span class=\"line\"></span><br><span class=\"line\">fire-cmd --reload</span><br></pre></td></tr></table></figure>\n<p>4.加载配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -c /etc/ss.json -d restart</span><br></pre></td></tr></table></figure>\n<p>到此设置过程就结束了，可以输入自己刚才设置的端口密码来实验是否成功生效了。</p>\n"},{"title":"windows下如何创建Django应用","date":"2018-03-01T14:02:51.000Z","_content":"\n由于之前关于Python的Web框架只接触过flask,正好这次需要用到Django来完成项目，因此记录下使用过程，若有错误，希望不吝赐教。\n\n1.安装Django\n\n前提是机器上已经安装了Python和pip(啪，还用你说吗)\n\n然后执行pip install django即可(需要科学上网环境，否则可能安装失败)\n\n验证是否安装成功方法：\n\n进入python环境后\n\n\\>>>import django\n\\>>>print(django.get_version())\n2.0.2\n\n正确输出了django的版本号，代表安装成功。\n\n2.创建Django项目\n\n为了保证不同项目之间依赖包不冲突，我们需要使用Python的虚拟环境，需要安装virtualenv\n\npip install virtualenv\n\n执行\n\nvirtualenv venv\n\n即创建了一个名为venv的文件夹(虚拟环境)\n\n执行 venv\\Scripts\\activate 即可进入虚拟环境\n\n接下来我们需要运行一些Django自带的脚本，它会生成一些文件夹及文件，在我们的项目中需要使用到它们。\n\n(venv) E:\\Maximum>django-admin startproject mysite .\n\n注意不要忘记最后的小数点，它告诉脚本会将Django自动安装到当前目录中\n\n此时我们的目录结构应该是这样的\n\n```\nMaximum\n├───manage.py\n└───venv\n└───mysite\n        settings.py\n        urls.py\n        wsgi.py\n        __init__.py\n```\n\n\n\n`manage.py` 是一个帮助管理站点的脚本。在它的帮助下我们将能够在我们的计算机上启动一个 web 服务器，而无需安装任何东西。\n\n`settings.py` 文件包含的您的网站的配置数据。\n\n`urls.py` 文件包含该 Django 项目的 URL 声明; 一份由 Django 驱动的网站\"目录\"。\n\n`__init__` 一个空文件，告诉 Python 该目录是一个 Python 包。\n\n`wsgi.py` 一个 WSGI 兼容的 Web 服务器的入口，以便运行你的项目。\n\n3.启动Django\n\n进入到项目所在目录，命令行下执行\n\n```\npython manage.py runserver 0.0.0.0:8000\n```\n\n访问http://127.0.0.1:8000/\n\n出现'The install worked successfully! Congratulations!'字样代表我们的Django项目已成功运行\n\n好了，安装创建一个最简单的Django应用就到此结束了。","source":"_posts/windows下如何创建Django应用.md","raw":"---\ntitle: windows下如何创建Django应用\ndate: 2018-03-01 22:02:51\ntags: Django\ncategories: Python\n---\n\n由于之前关于Python的Web框架只接触过flask,正好这次需要用到Django来完成项目，因此记录下使用过程，若有错误，希望不吝赐教。\n\n1.安装Django\n\n前提是机器上已经安装了Python和pip(啪，还用你说吗)\n\n然后执行pip install django即可(需要科学上网环境，否则可能安装失败)\n\n验证是否安装成功方法：\n\n进入python环境后\n\n\\>>>import django\n\\>>>print(django.get_version())\n2.0.2\n\n正确输出了django的版本号，代表安装成功。\n\n2.创建Django项目\n\n为了保证不同项目之间依赖包不冲突，我们需要使用Python的虚拟环境，需要安装virtualenv\n\npip install virtualenv\n\n执行\n\nvirtualenv venv\n\n即创建了一个名为venv的文件夹(虚拟环境)\n\n执行 venv\\Scripts\\activate 即可进入虚拟环境\n\n接下来我们需要运行一些Django自带的脚本，它会生成一些文件夹及文件，在我们的项目中需要使用到它们。\n\n(venv) E:\\Maximum>django-admin startproject mysite .\n\n注意不要忘记最后的小数点，它告诉脚本会将Django自动安装到当前目录中\n\n此时我们的目录结构应该是这样的\n\n```\nMaximum\n├───manage.py\n└───venv\n└───mysite\n        settings.py\n        urls.py\n        wsgi.py\n        __init__.py\n```\n\n\n\n`manage.py` 是一个帮助管理站点的脚本。在它的帮助下我们将能够在我们的计算机上启动一个 web 服务器，而无需安装任何东西。\n\n`settings.py` 文件包含的您的网站的配置数据。\n\n`urls.py` 文件包含该 Django 项目的 URL 声明; 一份由 Django 驱动的网站\"目录\"。\n\n`__init__` 一个空文件，告诉 Python 该目录是一个 Python 包。\n\n`wsgi.py` 一个 WSGI 兼容的 Web 服务器的入口，以便运行你的项目。\n\n3.启动Django\n\n进入到项目所在目录，命令行下执行\n\n```\npython manage.py runserver 0.0.0.0:8000\n```\n\n访问http://127.0.0.1:8000/\n\n出现'The install worked successfully! Congratulations!'字样代表我们的Django项目已成功运行\n\n好了，安装创建一个最简单的Django应用就到此结束了。","slug":"windows下如何创建Django应用","published":1,"updated":"2018-03-01T17:20:47.985Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq50003pbcusqznjrwv1","content":"<p>由于之前关于Python的Web框架只接触过flask,正好这次需要用到Django来完成项目，因此记录下使用过程，若有错误，希望不吝赐教。</p>\n<p>1.安装Django</p>\n<p>前提是机器上已经安装了Python和pip(啪，还用你说吗)</p>\n<p>然后执行pip install django即可(需要科学上网环境，否则可能安装失败)</p>\n<p>验证是否安装成功方法：</p>\n<p>进入python环境后</p>\n<p>>&gt;&gt;import django<br>>&gt;&gt;print(django.get_version())<br>2.0.2</p>\n<p>正确输出了django的版本号，代表安装成功。</p>\n<p>2.创建Django项目</p>\n<p>为了保证不同项目之间依赖包不冲突，我们需要使用Python的虚拟环境，需要安装virtualenv</p>\n<p>pip install virtualenv</p>\n<p>执行</p>\n<p>virtualenv venv</p>\n<p>即创建了一个名为venv的文件夹(虚拟环境)</p>\n<p>执行 venv\\Scripts\\activate 即可进入虚拟环境</p>\n<p>接下来我们需要运行一些Django自带的脚本，它会生成一些文件夹及文件，在我们的项目中需要使用到它们。</p>\n<p>(venv) E:\\Maximum&gt;django-admin startproject mysite .</p>\n<p>注意不要忘记最后的小数点，它告诉脚本会将Django自动安装到当前目录中</p>\n<p>此时我们的目录结构应该是这样的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Maximum</span><br><span class=\"line\">├───manage.py</span><br><span class=\"line\">└───venv</span><br><span class=\"line\">└───mysite</span><br><span class=\"line\">        settings.py</span><br><span class=\"line\">        urls.py</span><br><span class=\"line\">        wsgi.py</span><br><span class=\"line\">        __init__.py</span><br></pre></td></tr></table></figure>\n<p><code>manage.py</code> 是一个帮助管理站点的脚本。在它的帮助下我们将能够在我们的计算机上启动一个 web 服务器，而无需安装任何东西。</p>\n<p><code>settings.py</code> 文件包含的您的网站的配置数据。</p>\n<p><code>urls.py</code> 文件包含该 Django 项目的 URL 声明; 一份由 Django 驱动的网站”目录”。</p>\n<p><code>__init__</code> 一个空文件，告诉 Python 该目录是一个 Python 包。</p>\n<p><code>wsgi.py</code> 一个 WSGI 兼容的 Web 服务器的入口，以便运行你的项目。</p>\n<p>3.启动Django</p>\n<p>进入到项目所在目录，命令行下执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure>\n<p>访问<a href=\"http://127.0.0.1:8000/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8000/</a></p>\n<p>出现’The install worked successfully! Congratulations!’字样代表我们的Django项目已成功运行</p>\n<p>好了，安装创建一个最简单的Django应用就到此结束了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>由于之前关于Python的Web框架只接触过flask,正好这次需要用到Django来完成项目，因此记录下使用过程，若有错误，希望不吝赐教。</p>\n<p>1.安装Django</p>\n<p>前提是机器上已经安装了Python和pip(啪，还用你说吗)</p>\n<p>然后执行pip install django即可(需要科学上网环境，否则可能安装失败)</p>\n<p>验证是否安装成功方法：</p>\n<p>进入python环境后</p>\n<p>>&gt;&gt;import django<br>>&gt;&gt;print(django.get_version())<br>2.0.2</p>\n<p>正确输出了django的版本号，代表安装成功。</p>\n<p>2.创建Django项目</p>\n<p>为了保证不同项目之间依赖包不冲突，我们需要使用Python的虚拟环境，需要安装virtualenv</p>\n<p>pip install virtualenv</p>\n<p>执行</p>\n<p>virtualenv venv</p>\n<p>即创建了一个名为venv的文件夹(虚拟环境)</p>\n<p>执行 venv\\Scripts\\activate 即可进入虚拟环境</p>\n<p>接下来我们需要运行一些Django自带的脚本，它会生成一些文件夹及文件，在我们的项目中需要使用到它们。</p>\n<p>(venv) E:\\Maximum&gt;django-admin startproject mysite .</p>\n<p>注意不要忘记最后的小数点，它告诉脚本会将Django自动安装到当前目录中</p>\n<p>此时我们的目录结构应该是这样的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Maximum</span><br><span class=\"line\">├───manage.py</span><br><span class=\"line\">└───venv</span><br><span class=\"line\">└───mysite</span><br><span class=\"line\">        settings.py</span><br><span class=\"line\">        urls.py</span><br><span class=\"line\">        wsgi.py</span><br><span class=\"line\">        __init__.py</span><br></pre></td></tr></table></figure>\n<p><code>manage.py</code> 是一个帮助管理站点的脚本。在它的帮助下我们将能够在我们的计算机上启动一个 web 服务器，而无需安装任何东西。</p>\n<p><code>settings.py</code> 文件包含的您的网站的配置数据。</p>\n<p><code>urls.py</code> 文件包含该 Django 项目的 URL 声明; 一份由 Django 驱动的网站”目录”。</p>\n<p><code>__init__</code> 一个空文件，告诉 Python 该目录是一个 Python 包。</p>\n<p><code>wsgi.py</code> 一个 WSGI 兼容的 Web 服务器的入口，以便运行你的项目。</p>\n<p>3.启动Django</p>\n<p>进入到项目所在目录，命令行下执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure>\n<p>访问<a href=\"http://127.0.0.1:8000/\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:8000/</a></p>\n<p>出现’The install worked successfully! Congratulations!’字样代表我们的Django项目已成功运行</p>\n<p>好了，安装创建一个最简单的Django应用就到此结束了。</p>\n"},{"title":"ruby中\\1和$1的区别","date":"2018-03-28T15:19:30.000Z","_content":"\n在此之前要介绍下正则表达式中的组(group)和回溯引用(backreference)的含义\n\n##组和回溯引用\n\n在正则表达式中，每个括号括起来的部分叫做一个组，比如表达式\n\n```\n(\\d{2})([a-z])\n```\n\n组1为\\d{2}\n组2为[a-z]\n其中，还暗含了一个组0，即整个正则表达式。以11abcd为例，如果我们采用上面的正则表达式，则组1为11，组2为abcd有了组的概念后，我们便可以利用这个组来做文章，比如，如果我们要找重复了两次的数字，如11,22，可以写这样的表达式：\n\n```\n(\\d)\\1\n```\n\n它的意思是，第一个是数字，第二个数字跟第一个数字相同。正则表达式中，用了一个专门的术语来描述\\1这种概念，即**回溯引用**。比如参考链接中的例子\n“公司最近打算升级号码管理，针对VIP客户推出靓号服务，暂定靓号为6位，尾数AAAA的为靓号，比如118888是靓号。”\n在Ruby中我们就可以使用\n\n```\n/[1-9]\\d(\\d)\\1{3}/ \n```\n\n来匹配我们想要的号码\n\n简单来说，$1或者\\1包含的是正则表达式中从左侧开始的第一对小括号内的子模式所匹配的字符串\n\n同理$2和\\2表示的是第二对小括号匹配的字符串,比如\n\n```\nirb(main):171:0> /([a-z]+)([0-9]+)/.match('abc33')\n=> #<MatchData \"abc33\" 1:\"abc\" 2:\"33\">\nirb(main):172:0> $1\n=> \"abc\"\nirb(main):173:0> $2\n=> \"33\"\n```\n\n也可以像使用数组一样取出MatchData中符合各个子匹配的内容，比如\n\n```ruby\nirb(main):176:0> a=/([a-z]+)([0-9]+)/.match('abc33')\n=> #<MatchData \"abc33\" 1:\"abc\" 2:\"33\">\nirb(main):177:0> a[0]\n=> \"abc33\"\nirb(main):178:0> a[1]\n=> \"abc\"\nirb(main):179:0> a[2]\n=> \"33\"\n```\n\n其中a[0]返回匹配主表达式的字符串\n\n## \\1和$1的不同\n\n不的是两者的作用域\n\n回溯引用\\1只作用于方法sub或者gsub中，作用域有限\n\n```\n\"foobar\".sub(/foo(.*)/, '\\1\\1') # => \"barbar\"\n```\n\n而$1作为全局变量可以作用于接下来的代码\n\n```\nif \"foobar\" =~ /foo(.*)/ then \n  puts \"The matching word was #{$1}\"\nend\n```\n\n输出\n\n```\n\"The matching word was bar\"\n=> nil\n```\n\n参考链接\n\n[$1 and \\1 in Ruby](https://stackoverflow.com/questions/288573/1-and-1-in-ruby)\n\n[组（group）和回溯引用(backreference)](https://blog.csdn.net/hbr2014/article/details/47657937)\n","source":"_posts/ruby中1和$1的区别.md","raw":"---\ntitle: ruby中\\1和$1的区别\ndate: 2018-03-28 23:19:30\ntags: regex\ncategories: Ruby\n---\n\n在此之前要介绍下正则表达式中的组(group)和回溯引用(backreference)的含义\n\n##组和回溯引用\n\n在正则表达式中，每个括号括起来的部分叫做一个组，比如表达式\n\n```\n(\\d{2})([a-z])\n```\n\n组1为\\d{2}\n组2为[a-z]\n其中，还暗含了一个组0，即整个正则表达式。以11abcd为例，如果我们采用上面的正则表达式，则组1为11，组2为abcd有了组的概念后，我们便可以利用这个组来做文章，比如，如果我们要找重复了两次的数字，如11,22，可以写这样的表达式：\n\n```\n(\\d)\\1\n```\n\n它的意思是，第一个是数字，第二个数字跟第一个数字相同。正则表达式中，用了一个专门的术语来描述\\1这种概念，即**回溯引用**。比如参考链接中的例子\n“公司最近打算升级号码管理，针对VIP客户推出靓号服务，暂定靓号为6位，尾数AAAA的为靓号，比如118888是靓号。”\n在Ruby中我们就可以使用\n\n```\n/[1-9]\\d(\\d)\\1{3}/ \n```\n\n来匹配我们想要的号码\n\n简单来说，$1或者\\1包含的是正则表达式中从左侧开始的第一对小括号内的子模式所匹配的字符串\n\n同理$2和\\2表示的是第二对小括号匹配的字符串,比如\n\n```\nirb(main):171:0> /([a-z]+)([0-9]+)/.match('abc33')\n=> #<MatchData \"abc33\" 1:\"abc\" 2:\"33\">\nirb(main):172:0> $1\n=> \"abc\"\nirb(main):173:0> $2\n=> \"33\"\n```\n\n也可以像使用数组一样取出MatchData中符合各个子匹配的内容，比如\n\n```ruby\nirb(main):176:0> a=/([a-z]+)([0-9]+)/.match('abc33')\n=> #<MatchData \"abc33\" 1:\"abc\" 2:\"33\">\nirb(main):177:0> a[0]\n=> \"abc33\"\nirb(main):178:0> a[1]\n=> \"abc\"\nirb(main):179:0> a[2]\n=> \"33\"\n```\n\n其中a[0]返回匹配主表达式的字符串\n\n## \\1和$1的不同\n\n不的是两者的作用域\n\n回溯引用\\1只作用于方法sub或者gsub中，作用域有限\n\n```\n\"foobar\".sub(/foo(.*)/, '\\1\\1') # => \"barbar\"\n```\n\n而$1作为全局变量可以作用于接下来的代码\n\n```\nif \"foobar\" =~ /foo(.*)/ then \n  puts \"The matching word was #{$1}\"\nend\n```\n\n输出\n\n```\n\"The matching word was bar\"\n=> nil\n```\n\n参考链接\n\n[$1 and \\1 in Ruby](https://stackoverflow.com/questions/288573/1-and-1-in-ruby)\n\n[组（group）和回溯引用(backreference)](https://blog.csdn.net/hbr2014/article/details/47657937)\n","slug":"ruby中1和$1的区别","published":1,"updated":"2018-03-28T15:38:30.590Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq50003rbcus4k84uz3v","content":"<p>在此之前要介绍下正则表达式中的组(group)和回溯引用(backreference)的含义</p>\n<p>##组和回溯引用</p>\n<p>在正则表达式中，每个括号括起来的部分叫做一个组，比如表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(\\d&#123;2&#125;)([a-z])</span><br></pre></td></tr></table></figure>\n<p>组1为\\d{2}<br>组2为[a-z]<br>其中，还暗含了一个组0，即整个正则表达式。以11abcd为例，如果我们采用上面的正则表达式，则组1为11，组2为abcd有了组的概念后，我们便可以利用这个组来做文章，比如，如果我们要找重复了两次的数字，如11,22，可以写这样的表达式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(\\d)\\1</span><br></pre></td></tr></table></figure>\n<p>它的意思是，第一个是数字，第二个数字跟第一个数字相同。正则表达式中，用了一个专门的术语来描述\\1这种概念，即<strong>回溯引用</strong>。比如参考链接中的例子<br>“公司最近打算升级号码管理，针对VIP客户推出靓号服务，暂定靓号为6位，尾数AAAA的为靓号，比如118888是靓号。”<br>在Ruby中我们就可以使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/[1-9]\\d(\\d)\\1&#123;3&#125;/</span><br></pre></td></tr></table></figure>\n<p>来匹配我们想要的号码</p>\n<p>简单来说，$1或者\\1包含的是正则表达式中从左侧开始的第一对小括号内的子模式所匹配的字符串</p>\n<p>同理$2和\\2表示的是第二对小括号匹配的字符串,比如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">irb(main):171:0&gt; /([a-z]+)([0-9]+)/.match(&apos;abc33&apos;)</span><br><span class=\"line\">=&gt; #&lt;MatchData &quot;abc33&quot; 1:&quot;abc&quot; 2:&quot;33&quot;&gt;</span><br><span class=\"line\">irb(main):172:0&gt; $1</span><br><span class=\"line\">=&gt; &quot;abc&quot;</span><br><span class=\"line\">irb(main):173:0&gt; $2</span><br><span class=\"line\">=&gt; &quot;33&quot;</span><br></pre></td></tr></table></figure>\n<p>也可以像使用数组一样取出MatchData中符合各个子匹配的内容，比如</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">irb(main):176:0&gt;</span> a=<span class=\"regexp\">/([a-z]+)([0-9]+)/</span>.match(<span class=\"string\">'abc33'</span>)</span><br><span class=\"line\">=&gt; #&lt;MatchData \"abc33\" 1:\"abc\" 2:\"33\"&gt;</span><br><span class=\"line\"><span class=\"meta\">irb(main):177:0&gt;</span> a[<span class=\"number\">0</span>]</span><br><span class=\"line\">=&gt; <span class=\"string\">\"abc33\"</span></span><br><span class=\"line\"><span class=\"meta\">irb(main):178:0&gt;</span> a[<span class=\"number\">1</span>]</span><br><span class=\"line\">=&gt; <span class=\"string\">\"abc\"</span></span><br><span class=\"line\"><span class=\"meta\">irb(main):179:0&gt;</span> a[<span class=\"number\">2</span>]</span><br><span class=\"line\">=&gt; <span class=\"string\">\"33\"</span></span><br></pre></td></tr></table></figure>\n<p>其中a[0]返回匹配主表达式的字符串</p>\n<h2 id=\"1和-1的不同\"><a href=\"#1和-1的不同\" class=\"headerlink\" title=\"\\1和$1的不同\"></a>\\1和$1的不同</h2><p>不的是两者的作用域</p>\n<p>回溯引用\\1只作用于方法sub或者gsub中，作用域有限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;foobar&quot;.sub(/foo(.*)/, &apos;\\1\\1&apos;) # =&gt; &quot;barbar&quot;</span><br></pre></td></tr></table></figure>\n<p>而$1作为全局变量可以作用于接下来的代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if &quot;foobar&quot; =~ /foo(.*)/ then </span><br><span class=\"line\">  puts &quot;The matching word was #&#123;$1&#125;&quot;</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;The matching word was bar&quot;</span><br><span class=\"line\">=&gt; nil</span><br></pre></td></tr></table></figure>\n<p>参考链接</p>\n<p><a href=\"https://stackoverflow.com/questions/288573/1-and-1-in-ruby\" target=\"_blank\" rel=\"noopener\">$1 and \\1 in Ruby</a></p>\n<p><a href=\"https://blog.csdn.net/hbr2014/article/details/47657937\" target=\"_blank\" rel=\"noopener\">组（group）和回溯引用(backreference)</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在此之前要介绍下正则表达式中的组(group)和回溯引用(backreference)的含义</p>\n<p>##组和回溯引用</p>\n<p>在正则表达式中，每个括号括起来的部分叫做一个组，比如表达式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(\\d&#123;2&#125;)([a-z])</span><br></pre></td></tr></table></figure>\n<p>组1为\\d{2}<br>组2为[a-z]<br>其中，还暗含了一个组0，即整个正则表达式。以11abcd为例，如果我们采用上面的正则表达式，则组1为11，组2为abcd有了组的概念后，我们便可以利用这个组来做文章，比如，如果我们要找重复了两次的数字，如11,22，可以写这样的表达式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(\\d)\\1</span><br></pre></td></tr></table></figure>\n<p>它的意思是，第一个是数字，第二个数字跟第一个数字相同。正则表达式中，用了一个专门的术语来描述\\1这种概念，即<strong>回溯引用</strong>。比如参考链接中的例子<br>“公司最近打算升级号码管理，针对VIP客户推出靓号服务，暂定靓号为6位，尾数AAAA的为靓号，比如118888是靓号。”<br>在Ruby中我们就可以使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/[1-9]\\d(\\d)\\1&#123;3&#125;/</span><br></pre></td></tr></table></figure>\n<p>来匹配我们想要的号码</p>\n<p>简单来说，$1或者\\1包含的是正则表达式中从左侧开始的第一对小括号内的子模式所匹配的字符串</p>\n<p>同理$2和\\2表示的是第二对小括号匹配的字符串,比如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">irb(main):171:0&gt; /([a-z]+)([0-9]+)/.match(&apos;abc33&apos;)</span><br><span class=\"line\">=&gt; #&lt;MatchData &quot;abc33&quot; 1:&quot;abc&quot; 2:&quot;33&quot;&gt;</span><br><span class=\"line\">irb(main):172:0&gt; $1</span><br><span class=\"line\">=&gt; &quot;abc&quot;</span><br><span class=\"line\">irb(main):173:0&gt; $2</span><br><span class=\"line\">=&gt; &quot;33&quot;</span><br></pre></td></tr></table></figure>\n<p>也可以像使用数组一样取出MatchData中符合各个子匹配的内容，比如</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">irb(main):176:0&gt;</span> a=<span class=\"regexp\">/([a-z]+)([0-9]+)/</span>.match(<span class=\"string\">'abc33'</span>)</span><br><span class=\"line\">=&gt; #&lt;MatchData \"abc33\" 1:\"abc\" 2:\"33\"&gt;</span><br><span class=\"line\"><span class=\"meta\">irb(main):177:0&gt;</span> a[<span class=\"number\">0</span>]</span><br><span class=\"line\">=&gt; <span class=\"string\">\"abc33\"</span></span><br><span class=\"line\"><span class=\"meta\">irb(main):178:0&gt;</span> a[<span class=\"number\">1</span>]</span><br><span class=\"line\">=&gt; <span class=\"string\">\"abc\"</span></span><br><span class=\"line\"><span class=\"meta\">irb(main):179:0&gt;</span> a[<span class=\"number\">2</span>]</span><br><span class=\"line\">=&gt; <span class=\"string\">\"33\"</span></span><br></pre></td></tr></table></figure>\n<p>其中a[0]返回匹配主表达式的字符串</p>\n<h2 id=\"1和-1的不同\"><a href=\"#1和-1的不同\" class=\"headerlink\" title=\"\\1和$1的不同\"></a>\\1和$1的不同</h2><p>不的是两者的作用域</p>\n<p>回溯引用\\1只作用于方法sub或者gsub中，作用域有限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;foobar&quot;.sub(/foo(.*)/, &apos;\\1\\1&apos;) # =&gt; &quot;barbar&quot;</span><br></pre></td></tr></table></figure>\n<p>而$1作为全局变量可以作用于接下来的代码</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if &quot;foobar&quot; =~ /foo(.*)/ then </span><br><span class=\"line\">  puts &quot;The matching word was #&#123;$1&#125;&quot;</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;The matching word was bar&quot;</span><br><span class=\"line\">=&gt; nil</span><br></pre></td></tr></table></figure>\n<p>参考链接</p>\n<p><a href=\"https://stackoverflow.com/questions/288573/1-and-1-in-ruby\" target=\"_blank\" rel=\"noopener\">$1 and \\1 in Ruby</a></p>\n<p><a href=\"https://blog.csdn.net/hbr2014/article/details/47657937\" target=\"_blank\" rel=\"noopener\">组（group）和回溯引用(backreference)</a></p>\n"},{"title":"systemctl中的ctl代表含义","date":"2018-03-12T15:41:18.000Z","_content":"\nsystemctl命令是Linux系统服务管理器指令，它实际上将 service 和 chkconfig 这两个命令组合到一起\n\n举例子，开启MySql服务\n\n```\nsystemctl start mysqld #以前是service mysqld start\n```\n\n官方说明：\n\nsystemctl — Control the systemd system and service manager\n\n以前一直想systemctl中的ctl 什么意思，后来谷歌了下，发现是Control的意思啊\n\n还有 ps aux |grep python 中的ps代表 process status\n\n常见缩写i18n、addr、msg、btn等\n\n","source":"_posts/systemctl中的ctl代表含义.md","raw":"---\ntitle: systemctl中的ctl代表含义\ndate: 2018-03-12 23:41:18\ntags: Linux\ncategories: \n---\n\nsystemctl命令是Linux系统服务管理器指令，它实际上将 service 和 chkconfig 这两个命令组合到一起\n\n举例子，开启MySql服务\n\n```\nsystemctl start mysqld #以前是service mysqld start\n```\n\n官方说明：\n\nsystemctl — Control the systemd system and service manager\n\n以前一直想systemctl中的ctl 什么意思，后来谷歌了下，发现是Control的意思啊\n\n还有 ps aux |grep python 中的ps代表 process status\n\n常见缩写i18n、addr、msg、btn等\n\n","slug":"systemctl中的ctl代表含义","published":1,"updated":"2018-03-12T16:44:54.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq50003ubcushzknwokd","content":"<p>systemctl命令是Linux系统服务管理器指令，它实际上将 service 和 chkconfig 这两个命令组合到一起</p>\n<p>举例子，开启MySql服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mysqld #以前是service mysqld start</span><br></pre></td></tr></table></figure>\n<p>官方说明：</p>\n<p>systemctl — Control the systemd system and service manager</p>\n<p>以前一直想systemctl中的ctl 什么意思，后来谷歌了下，发现是Control的意思啊</p>\n<p>还有 ps aux |grep python 中的ps代表 process status</p>\n<p>常见缩写i18n、addr、msg、btn等</p>\n","site":{"data":{}},"excerpt":"","more":"<p>systemctl命令是Linux系统服务管理器指令，它实际上将 service 和 chkconfig 这两个命令组合到一起</p>\n<p>举例子，开启MySql服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mysqld #以前是service mysqld start</span><br></pre></td></tr></table></figure>\n<p>官方说明：</p>\n<p>systemctl — Control the systemd system and service manager</p>\n<p>以前一直想systemctl中的ctl 什么意思，后来谷歌了下，发现是Control的意思啊</p>\n<p>还有 ps aux |grep python 中的ps代表 process status</p>\n<p>常见缩写i18n、addr、msg、btn等</p>\n"},{"title":"一个例子搞懂Pythonh中的public，protected和private","date":"2017-12-19T15:27:15.000Z","_content":"\n关于Python中的private，protected和public：\nPython中方法属性是否私有取决于它的名字，以一个下划线开头的方法为protected，可以被该类以及它的子类所访问，已两个下划线开头的方法为private，只能被本类访问\n如果想访问private方法或者成员变量，可以新建一个public方法然后访问，或者在私有函数名前加上下划线和类名\"_ClassName__privateMetnod\"这样来访问\n\n\n```Python\n关于Python中的private，protected和public：\nPython中方法属性是否私有取决于它的名字，以一个下划线开头的方法为protected，可以被该类以及它的子类所访问，已两个下划线开头的方法为private，只能被本类访问\n如果想访问private方法或者成员变量，可以新建一个public方法然后访问，或者在私有函数名前加上下划线和类名\"_ClassName__privateMetnod\"这样来访问\nclass Foo:\n    __privateVar = \"this is a private variable\"\n    def __init__(self):\n        pass\n    def public_mehod(self):\n        print(\"this is a public method\")\n    def _protected_method(self):\n        print(\"this is a protected method\")\n    def __private_method(self):\n        print(\"this is a private method\")\n    def access_private(self):\n        self.__private_method()\n        print(self.__privateVar)\nclass SubFoo(Foo):\n    pass\ns = SubFoo()\ns.public_mehod()\ns._protected_method()\ns.access_private()\nf = Foo()\nf._Foo__private_method\nprint(f._Foo__privateVar)\n```\n参考链接[Private, protected and public in Python](http://radek.io/2011/07/21/private-protected-and-public-in-Python/)\n\n","source":"_posts/一个例子搞懂Pythonh中的public，protected和private.md","raw":"---\ntitle: 一个例子搞懂Pythonh中的public，protected和private\ndate: 2017-12-19 23:27:15\ntags: \ncategories: Python\n---\n\n关于Python中的private，protected和public：\nPython中方法属性是否私有取决于它的名字，以一个下划线开头的方法为protected，可以被该类以及它的子类所访问，已两个下划线开头的方法为private，只能被本类访问\n如果想访问private方法或者成员变量，可以新建一个public方法然后访问，或者在私有函数名前加上下划线和类名\"_ClassName__privateMetnod\"这样来访问\n\n\n```Python\n关于Python中的private，protected和public：\nPython中方法属性是否私有取决于它的名字，以一个下划线开头的方法为protected，可以被该类以及它的子类所访问，已两个下划线开头的方法为private，只能被本类访问\n如果想访问private方法或者成员变量，可以新建一个public方法然后访问，或者在私有函数名前加上下划线和类名\"_ClassName__privateMetnod\"这样来访问\nclass Foo:\n    __privateVar = \"this is a private variable\"\n    def __init__(self):\n        pass\n    def public_mehod(self):\n        print(\"this is a public method\")\n    def _protected_method(self):\n        print(\"this is a protected method\")\n    def __private_method(self):\n        print(\"this is a private method\")\n    def access_private(self):\n        self.__private_method()\n        print(self.__privateVar)\nclass SubFoo(Foo):\n    pass\ns = SubFoo()\ns.public_mehod()\ns._protected_method()\ns.access_private()\nf = Foo()\nf._Foo__private_method\nprint(f._Foo__privateVar)\n```\n参考链接[Private, protected and public in Python](http://radek.io/2011/07/21/private-protected-and-public-in-Python/)\n\n","slug":"一个例子搞懂Pythonh中的public，protected和private","published":1,"updated":"2018-03-01T17:20:48.006Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq5h003xbcus447a3koc","content":"<p>关于Python中的private，protected和public：<br>Python中方法属性是否私有取决于它的名字，以一个下划线开头的方法为protected，可以被该类以及它的子类所访问，已两个下划线开头的方法为private，只能被本类访问<br>如果想访问private方法或者成员变量，可以新建一个public方法然后访问，或者在私有函数名前加上下划线和类名”_ClassName__privateMetnod”这样来访问</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">关于Python中的private，protected和public：</span><br><span class=\"line\">Python中方法属性是否私有取决于它的名字，以一个下划线开头的方法为protected，可以被该类以及它的子类所访问，已两个下划线开头的方法为private，只能被本类访问</span><br><span class=\"line\">如果想访问private方法或者成员变量，可以新建一个public方法然后访问，或者在私有函数名前加上下划线和类名<span class=\"string\">\"_ClassName__privateMetnod\"</span>这样来访问</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span>:</span></span><br><span class=\"line\">    __privateVar = <span class=\"string\">\"this is a private variable\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">public_mehod</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"this is a public method\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_protected_method</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"this is a protected method\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__private_method</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"this is a private method\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">access_private</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.__private_method()</span><br><span class=\"line\">        print(self.__privateVar)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubFoo</span><span class=\"params\">(Foo)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\">s = SubFoo()</span><br><span class=\"line\">s.public_mehod()</span><br><span class=\"line\">s._protected_method()</span><br><span class=\"line\">s.access_private()</span><br><span class=\"line\">f = Foo()</span><br><span class=\"line\">f._Foo__private_method</span><br><span class=\"line\">print(f._Foo__privateVar)</span><br></pre></td></tr></table></figure>\n<p>参考链接<a href=\"http://radek.io/2011/07/21/private-protected-and-public-in-Python/\" target=\"_blank\" rel=\"noopener\">Private, protected and public in Python</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>关于Python中的private，protected和public：<br>Python中方法属性是否私有取决于它的名字，以一个下划线开头的方法为protected，可以被该类以及它的子类所访问，已两个下划线开头的方法为private，只能被本类访问<br>如果想访问private方法或者成员变量，可以新建一个public方法然后访问，或者在私有函数名前加上下划线和类名”_ClassName__privateMetnod”这样来访问</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">关于Python中的private，protected和public：</span><br><span class=\"line\">Python中方法属性是否私有取决于它的名字，以一个下划线开头的方法为protected，可以被该类以及它的子类所访问，已两个下划线开头的方法为private，只能被本类访问</span><br><span class=\"line\">如果想访问private方法或者成员变量，可以新建一个public方法然后访问，或者在私有函数名前加上下划线和类名<span class=\"string\">\"_ClassName__privateMetnod\"</span>这样来访问</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span>:</span></span><br><span class=\"line\">    __privateVar = <span class=\"string\">\"this is a private variable\"</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">public_mehod</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"this is a public method\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_protected_method</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"this is a protected method\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__private_method</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">\"this is a private method\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">access_private</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.__private_method()</span><br><span class=\"line\">        print(self.__privateVar)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubFoo</span><span class=\"params\">(Foo)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\">s = SubFoo()</span><br><span class=\"line\">s.public_mehod()</span><br><span class=\"line\">s._protected_method()</span><br><span class=\"line\">s.access_private()</span><br><span class=\"line\">f = Foo()</span><br><span class=\"line\">f._Foo__private_method</span><br><span class=\"line\">print(f._Foo__privateVar)</span><br></pre></td></tr></table></figure>\n<p>参考链接<a href=\"http://radek.io/2011/07/21/private-protected-and-public-in-Python/\" target=\"_blank\" rel=\"noopener\">Private, protected and public in Python</a></p>\n"},{"title":"一行ruby代码新建并写入内容至文件","date":"2018-03-19T13:58:47.000Z","_content":"\n一行ruby 代码写入文件\n\n```ruby\nopen('create-first-file.txt', 'w'){|f| f.write 'Ruby content'}\n```\n\n","source":"_posts/一行ruby代码新建并写入内容至文件.md","raw":"---\ntitle: 一行ruby代码新建并写入内容至文件\ndate: 2018-03-19 21:58:47\ntags:\ncategories: Ruby\n---\n\n一行ruby 代码写入文件\n\n```ruby\nopen('create-first-file.txt', 'w'){|f| f.write 'Ruby content'}\n```\n\n","slug":"一行ruby代码新建并写入内容至文件","published":1,"updated":"2018-03-19T13:59:50.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq5j0040bcusdcpdh73l","content":"<p>一行ruby 代码写入文件</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">open(<span class=\"string\">'create-first-file.txt'</span>, <span class=\"string\">'w'</span>)&#123;<span class=\"params\">|f|</span> f.write <span class=\"string\">'Ruby content'</span>&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>一行ruby 代码写入文件</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">open(<span class=\"string\">'create-first-file.txt'</span>, <span class=\"string\">'w'</span>)&#123;<span class=\"params\">|f|</span> f.write <span class=\"string\">'Ruby content'</span>&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"使用Python批量替换多个文件中的字符","date":"2018-03-01T16:08:22.000Z","_content":"\n先交代下背景：\n\n说起来有点惭愧，之前博客中'Python'中的'P'全部是小写的，最近意识到这样是不对的，因此想要将博客里的'python'全部改为'Python',不过写了也有大概五十篇左右的博客，而且每篇博客里的'python'可能还不止一处，遂放弃手动修改的想法，打算写个小程序批量修改。\n\n代码如下\n\n```python\n#!/usr/bin/python3\n# -*- coding:utf8 -*-\nimport os\nimport re\nimport chardet\n# 获取文件编码类型\ndef get_encoding(file):\n    # 二进制方式读取，获取字节数据，检测类型\n    with open(file, 'rb') as f:\n        return chardet.detect(f.read())['encoding']\nbase_dir = r\"C:\\capsbon.github.io\\source\\_posts\"\nos.chdir(base_dir)\nmulu = os.listdir(base_dir)\nfor md_file in mulu:\n    #print(md_file)\n    encoding_type = get_encoding(md_file)\n    #指定编码方式\n    f = open(md_file,'r',encoding=encoding_type)\n    lines = f.read()\n    f.close()\n    f = open(md_file,'w+',encoding=encoding_type)\n    #将'python'替换成'Python'\n    newline = re.sub('python','Python',lines)\n    f.write(newline)\n    f.close()\n```\n\n需要注意的是编码问题，因为有的文件编码方式是'gb2312',有的是'UTF-8'.在读取文件（f.read()）时会出现\"UnicodeDecodeError: 'utf-8' codec can't decode byte 0xd6 in position 16\"这种错误，因此我的想法时每次读取时指定编码方式，因此定义get_encoding()方法来获取文件编码方式，感觉这个方法可能较笨，如果读者有更好的方法，麻烦告知，不胜感激，可以在下面评论或者发邮件给我。","source":"_posts/使用Python批量替换多个文件中的字符.md","raw":"---\ntitle: 使用Python批量替换多个文件中的字符\ndate: 2018-03-02 00:08:22\ntags:\ncategories: Python\n---\n\n先交代下背景：\n\n说起来有点惭愧，之前博客中'Python'中的'P'全部是小写的，最近意识到这样是不对的，因此想要将博客里的'python'全部改为'Python',不过写了也有大概五十篇左右的博客，而且每篇博客里的'python'可能还不止一处，遂放弃手动修改的想法，打算写个小程序批量修改。\n\n代码如下\n\n```python\n#!/usr/bin/python3\n# -*- coding:utf8 -*-\nimport os\nimport re\nimport chardet\n# 获取文件编码类型\ndef get_encoding(file):\n    # 二进制方式读取，获取字节数据，检测类型\n    with open(file, 'rb') as f:\n        return chardet.detect(f.read())['encoding']\nbase_dir = r\"C:\\capsbon.github.io\\source\\_posts\"\nos.chdir(base_dir)\nmulu = os.listdir(base_dir)\nfor md_file in mulu:\n    #print(md_file)\n    encoding_type = get_encoding(md_file)\n    #指定编码方式\n    f = open(md_file,'r',encoding=encoding_type)\n    lines = f.read()\n    f.close()\n    f = open(md_file,'w+',encoding=encoding_type)\n    #将'python'替换成'Python'\n    newline = re.sub('python','Python',lines)\n    f.write(newline)\n    f.close()\n```\n\n需要注意的是编码问题，因为有的文件编码方式是'gb2312',有的是'UTF-8'.在读取文件（f.read()）时会出现\"UnicodeDecodeError: 'utf-8' codec can't decode byte 0xd6 in position 16\"这种错误，因此我的想法时每次读取时指定编码方式，因此定义get_encoding()方法来获取文件编码方式，感觉这个方法可能较笨，如果读者有更好的方法，麻烦告知，不胜感激，可以在下面评论或者发邮件给我。","slug":"使用Python批量替换多个文件中的字符","published":1,"updated":"2018-03-01T17:20:48.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq5k0043bcusm71opn9c","content":"<p>先交代下背景：</p>\n<p>说起来有点惭愧，之前博客中’Python’中的’P’全部是小写的，最近意识到这样是不对的，因此想要将博客里的’python’全部改为’Python’,不过写了也有大概五十篇左右的博客，而且每篇博客里的’python’可能还不止一处，遂放弃手动修改的想法，打算写个小程序批量修改。</p>\n<p>代码如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> chardet</span><br><span class=\"line\"><span class=\"comment\"># 获取文件编码类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_encoding</span><span class=\"params\">(file)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 二进制方式读取，获取字节数据，检测类型</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(file, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> chardet.detect(f.read())[<span class=\"string\">'encoding'</span>]</span><br><span class=\"line\">base_dir = <span class=\"string\">r\"C:\\capsbon.github.io\\source\\_posts\"</span></span><br><span class=\"line\">os.chdir(base_dir)</span><br><span class=\"line\">mulu = os.listdir(base_dir)</span><br><span class=\"line\"><span class=\"keyword\">for</span> md_file <span class=\"keyword\">in</span> mulu:</span><br><span class=\"line\">    <span class=\"comment\">#print(md_file)</span></span><br><span class=\"line\">    encoding_type = get_encoding(md_file)</span><br><span class=\"line\">    <span class=\"comment\">#指定编码方式</span></span><br><span class=\"line\">    f = open(md_file,<span class=\"string\">'r'</span>,encoding=encoding_type)</span><br><span class=\"line\">    lines = f.read()</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\">    f = open(md_file,<span class=\"string\">'w+'</span>,encoding=encoding_type)</span><br><span class=\"line\">    <span class=\"comment\">#将'python'替换成'Python'</span></span><br><span class=\"line\">    newline = re.sub(<span class=\"string\">'python'</span>,<span class=\"string\">'Python'</span>,lines)</span><br><span class=\"line\">    f.write(newline)</span><br><span class=\"line\">    f.close()</span><br></pre></td></tr></table></figure>\n<p>需要注意的是编码问题，因为有的文件编码方式是’gb2312’,有的是’UTF-8’.在读取文件（f.read()）时会出现”UnicodeDecodeError: ‘utf-8’ codec can’t decode byte 0xd6 in position 16”这种错误，因此我的想法时每次读取时指定编码方式，因此定义get_encoding()方法来获取文件编码方式，感觉这个方法可能较笨，如果读者有更好的方法，麻烦告知，不胜感激，可以在下面评论或者发邮件给我。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>先交代下背景：</p>\n<p>说起来有点惭愧，之前博客中’Python’中的’P’全部是小写的，最近意识到这样是不对的，因此想要将博客里的’python’全部改为’Python’,不过写了也有大概五十篇左右的博客，而且每篇博客里的’python’可能还不止一处，遂放弃手动修改的想法，打算写个小程序批量修改。</p>\n<p>代码如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"keyword\">import</span> chardet</span><br><span class=\"line\"><span class=\"comment\"># 获取文件编码类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_encoding</span><span class=\"params\">(file)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 二进制方式读取，获取字节数据，检测类型</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(file, <span class=\"string\">'rb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> chardet.detect(f.read())[<span class=\"string\">'encoding'</span>]</span><br><span class=\"line\">base_dir = <span class=\"string\">r\"C:\\capsbon.github.io\\source\\_posts\"</span></span><br><span class=\"line\">os.chdir(base_dir)</span><br><span class=\"line\">mulu = os.listdir(base_dir)</span><br><span class=\"line\"><span class=\"keyword\">for</span> md_file <span class=\"keyword\">in</span> mulu:</span><br><span class=\"line\">    <span class=\"comment\">#print(md_file)</span></span><br><span class=\"line\">    encoding_type = get_encoding(md_file)</span><br><span class=\"line\">    <span class=\"comment\">#指定编码方式</span></span><br><span class=\"line\">    f = open(md_file,<span class=\"string\">'r'</span>,encoding=encoding_type)</span><br><span class=\"line\">    lines = f.read()</span><br><span class=\"line\">    f.close()</span><br><span class=\"line\">    f = open(md_file,<span class=\"string\">'w+'</span>,encoding=encoding_type)</span><br><span class=\"line\">    <span class=\"comment\">#将'python'替换成'Python'</span></span><br><span class=\"line\">    newline = re.sub(<span class=\"string\">'python'</span>,<span class=\"string\">'Python'</span>,lines)</span><br><span class=\"line\">    f.write(newline)</span><br><span class=\"line\">    f.close()</span><br></pre></td></tr></table></figure>\n<p>需要注意的是编码问题，因为有的文件编码方式是’gb2312’,有的是’UTF-8’.在读取文件（f.read()）时会出现”UnicodeDecodeError: ‘utf-8’ codec can’t decode byte 0xd6 in position 16”这种错误，因此我的想法时每次读取时指定编码方式，因此定义get_encoding()方法来获取文件编码方式，感觉这个方法可能较笨，如果读者有更好的方法，麻烦告知，不胜感激，可以在下面评论或者发邮件给我。</p>\n"},{"title":"几个例子搞懂Python类里的self和__init__","date":"2017-12-19T15:12:06.000Z","_content":"Python中的self和\\_\\_init\\_\\_都是在类中使用的\n\n那么我们为什么要使用类呢？举个例子，让我们回到人类诞生前，现在你是女娲，\n想仿造自己造几个生物，造了几个之后发现他们看起来都差不多，于是把他们都归类为人这个物种。\n这时候我们可以把人看做一个类，其中女娲造的几个‘人’分别叫小红，小明，小华，他们三个分别都是‘人‘这个类的实例，\n人刚生下来总要哭几声，这相当于类的初始化方法，也就是\\_\\_init\\_\\_的由来\n让我们动手敲下吧，首先定义一个Python类class BaseClass:\n\n```Python\nclass BaseClass:\n    def __init__(self,name,age):\n        self.name = name\n        self.age = age\n        print(\"BaseClass is inited\")\n    def speak(self,name):\n        print('%s is speaking'%name)\nif __name__ == '__main__':\n    b = BaseClass('jim',16)   # 输出 BaseClass is inited\n    b.speak('tom')            # 输出 tom is speaking\n```\n如果没有手动创建\\_\\_init\\_\\_方法，，则Python会自动生成一个\\_\\_init_\\_方法，不过它什么也不干class BaseClass:\n\n```Python\nclass BaseClass:\n    # def __init__(self,name,age):\n    #     self.name = name\n    #     self.age = age\n    #     print(self.name)\n    #     print(\"BaseClass is inited \"+self.name)\n    def speak(self,name):\n        print('%s is speaking'%name)\nif __name__ == '__main__':\n    b = BaseClass()\n    # b.speak('tom')\n    print(b.__init__)\n```\n不过要注意创建实例的时候传入参数要和\\_\\_init_\\_方法接受的参数一致。\n\n关于Python的继承，在子类没有定义__init__方法时，会调用父类的__init__方法，其他方法同理。\n如果子类有定义的话会执行子类的方法，不执行父类中的方法。\n\n```Python\nclass BaseClass:\n    def __init__(self,name,age):\n        self.name = name\n        self.age = age\n        print(\"BaseClass is inited \")\n    def speak(self,name):\n        print('%s is speaking'%name)\nclass SubClass(BaseClass):\n    def __init__(self):\n        print('SubClass is inited')\n    # def speak(self,name,age):\n    #     print('name is %s,age is %s'%(name,age))\nif __name__ == '__main__':\n    a = SubClass()\n    a.speak('baby')\n```\n\n\n关于Python中的self，指的是当前类的实例。比如在b = BaseClass()此时的self 就代表 b\n从下面可以看出\n\n```Python\nclass BaseClass:\n    def __init__(self):\n        print(self)\nif __name__ == '__main__':\n    b = BaseClass()\n    print(b)\n    a = BaseClass()\n    print(a)\n```\n\n\n输出\n<__main__.BaseClass object at 0x00000000006E6B70>\n<__main__.BaseClass object at 0x00000000006E6B70>\n<__main__.BaseClass object at 0x0000000000ACBB38>\n<__main__.BaseClass object at 0x0000000000ACBB38>\n为什么要有self呢，向其他语言比如Ruby，就没有\n这应该和Python的设计哲学有关吧\n*Explicit is better than implicit*\n显式比隐式更好","source":"_posts/几个例子搞懂Python类里的self和-init.md","raw":"---\ntitle: 几个例子搞懂Python类里的self和__init__\ndate: 2017-12-19 23:12:06\ntags: \ncategories: Python\n---\nPython中的self和\\_\\_init\\_\\_都是在类中使用的\n\n那么我们为什么要使用类呢？举个例子，让我们回到人类诞生前，现在你是女娲，\n想仿造自己造几个生物，造了几个之后发现他们看起来都差不多，于是把他们都归类为人这个物种。\n这时候我们可以把人看做一个类，其中女娲造的几个‘人’分别叫小红，小明，小华，他们三个分别都是‘人‘这个类的实例，\n人刚生下来总要哭几声，这相当于类的初始化方法，也就是\\_\\_init\\_\\_的由来\n让我们动手敲下吧，首先定义一个Python类class BaseClass:\n\n```Python\nclass BaseClass:\n    def __init__(self,name,age):\n        self.name = name\n        self.age = age\n        print(\"BaseClass is inited\")\n    def speak(self,name):\n        print('%s is speaking'%name)\nif __name__ == '__main__':\n    b = BaseClass('jim',16)   # 输出 BaseClass is inited\n    b.speak('tom')            # 输出 tom is speaking\n```\n如果没有手动创建\\_\\_init\\_\\_方法，，则Python会自动生成一个\\_\\_init_\\_方法，不过它什么也不干class BaseClass:\n\n```Python\nclass BaseClass:\n    # def __init__(self,name,age):\n    #     self.name = name\n    #     self.age = age\n    #     print(self.name)\n    #     print(\"BaseClass is inited \"+self.name)\n    def speak(self,name):\n        print('%s is speaking'%name)\nif __name__ == '__main__':\n    b = BaseClass()\n    # b.speak('tom')\n    print(b.__init__)\n```\n不过要注意创建实例的时候传入参数要和\\_\\_init_\\_方法接受的参数一致。\n\n关于Python的继承，在子类没有定义__init__方法时，会调用父类的__init__方法，其他方法同理。\n如果子类有定义的话会执行子类的方法，不执行父类中的方法。\n\n```Python\nclass BaseClass:\n    def __init__(self,name,age):\n        self.name = name\n        self.age = age\n        print(\"BaseClass is inited \")\n    def speak(self,name):\n        print('%s is speaking'%name)\nclass SubClass(BaseClass):\n    def __init__(self):\n        print('SubClass is inited')\n    # def speak(self,name,age):\n    #     print('name is %s,age is %s'%(name,age))\nif __name__ == '__main__':\n    a = SubClass()\n    a.speak('baby')\n```\n\n\n关于Python中的self，指的是当前类的实例。比如在b = BaseClass()此时的self 就代表 b\n从下面可以看出\n\n```Python\nclass BaseClass:\n    def __init__(self):\n        print(self)\nif __name__ == '__main__':\n    b = BaseClass()\n    print(b)\n    a = BaseClass()\n    print(a)\n```\n\n\n输出\n<__main__.BaseClass object at 0x00000000006E6B70>\n<__main__.BaseClass object at 0x00000000006E6B70>\n<__main__.BaseClass object at 0x0000000000ACBB38>\n<__main__.BaseClass object at 0x0000000000ACBB38>\n为什么要有self呢，向其他语言比如Ruby，就没有\n这应该和Python的设计哲学有关吧\n*Explicit is better than implicit*\n显式比隐式更好","slug":"几个例子搞懂Python类里的self和-init","published":1,"updated":"2018-03-12T15:29:11.110Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq5m0045bcuspvgcmixz","content":"<p>Python中的self和__init__都是在类中使用的</p>\n<p>那么我们为什么要使用类呢？举个例子，让我们回到人类诞生前，现在你是女娲，<br>想仿造自己造几个生物，造了几个之后发现他们看起来都差不多，于是把他们都归类为人这个物种。<br>这时候我们可以把人看做一个类，其中女娲造的几个‘人’分别叫小红，小明，小华，他们三个分别都是‘人‘这个类的实例，<br>人刚生下来总要哭几声，这相当于类的初始化方法，也就是__init__的由来<br>让我们动手敲下吧，首先定义一个Python类class BaseClass:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseClass</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,age)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\">        print(<span class=\"string\">\"BaseClass is inited\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">speak</span><span class=\"params\">(self,name)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'%s is speaking'</span>%name)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    b = BaseClass(<span class=\"string\">'jim'</span>,<span class=\"number\">16</span>)   <span class=\"comment\"># 输出 BaseClass is inited</span></span><br><span class=\"line\">    b.speak(<span class=\"string\">'tom'</span>)            <span class=\"comment\"># 输出 tom is speaking</span></span><br></pre></td></tr></table></figure>\n<p>如果没有手动创建__init__方法，，则Python会自动生成一个__init__方法，不过它什么也不干class BaseClass:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseClass</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># def __init__(self,name,age):</span></span><br><span class=\"line\">    <span class=\"comment\">#     self.name = name</span></span><br><span class=\"line\">    <span class=\"comment\">#     self.age = age</span></span><br><span class=\"line\">    <span class=\"comment\">#     print(self.name)</span></span><br><span class=\"line\">    <span class=\"comment\">#     print(\"BaseClass is inited \"+self.name)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">speak</span><span class=\"params\">(self,name)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'%s is speaking'</span>%name)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    b = BaseClass()</span><br><span class=\"line\">    <span class=\"comment\"># b.speak('tom')</span></span><br><span class=\"line\">    print(b.__init__)</span><br></pre></td></tr></table></figure>\n<p>不过要注意创建实例的时候传入参数要和__init__方法接受的参数一致。</p>\n<p>关于Python的继承，在子类没有定义<strong>init</strong>方法时，会调用父类的<strong>init</strong>方法，其他方法同理。<br>如果子类有定义的话会执行子类的方法，不执行父类中的方法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseClass</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,age)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\">        print(<span class=\"string\">\"BaseClass is inited \"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">speak</span><span class=\"params\">(self,name)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'%s is speaking'</span>%name)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubClass</span><span class=\"params\">(BaseClass)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'SubClass is inited'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># def speak(self,name,age):</span></span><br><span class=\"line\">    <span class=\"comment\">#     print('name is %s,age is %s'%(name,age))</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    a = SubClass()</span><br><span class=\"line\">    a.speak(<span class=\"string\">'baby'</span>)</span><br></pre></td></tr></table></figure>\n<p>关于Python中的self，指的是当前类的实例。比如在b = BaseClass()此时的self 就代表 b<br>从下面可以看出</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseClass</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(self)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    b = BaseClass()</span><br><span class=\"line\">    print(b)</span><br><span class=\"line\">    a = BaseClass()</span><br><span class=\"line\">    print(a)</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<p>&lt;<strong>main</strong>.BaseClass object at 0x00000000006E6B70&gt;</p>\n<p>&lt;<strong>main</strong>.BaseClass object at 0x00000000006E6B70&gt;</p>\n<p>&lt;<strong>main</strong>.BaseClass object at 0x0000000000ACBB38&gt;</p>\n<p>&lt;<strong>main</strong>.BaseClass object at 0x0000000000ACBB38&gt;<br>为什么要有self呢，向其他语言比如Ruby，就没有<br>这应该和Python的设计哲学有关吧<br><em>Explicit is better than implicit</em><br>显式比隐式更好</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Python中的self和__init__都是在类中使用的</p>\n<p>那么我们为什么要使用类呢？举个例子，让我们回到人类诞生前，现在你是女娲，<br>想仿造自己造几个生物，造了几个之后发现他们看起来都差不多，于是把他们都归类为人这个物种。<br>这时候我们可以把人看做一个类，其中女娲造的几个‘人’分别叫小红，小明，小华，他们三个分别都是‘人‘这个类的实例，<br>人刚生下来总要哭几声，这相当于类的初始化方法，也就是__init__的由来<br>让我们动手敲下吧，首先定义一个Python类class BaseClass:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseClass</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,age)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\">        print(<span class=\"string\">\"BaseClass is inited\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">speak</span><span class=\"params\">(self,name)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'%s is speaking'</span>%name)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    b = BaseClass(<span class=\"string\">'jim'</span>,<span class=\"number\">16</span>)   <span class=\"comment\"># 输出 BaseClass is inited</span></span><br><span class=\"line\">    b.speak(<span class=\"string\">'tom'</span>)            <span class=\"comment\"># 输出 tom is speaking</span></span><br></pre></td></tr></table></figure>\n<p>如果没有手动创建__init__方法，，则Python会自动生成一个__init__方法，不过它什么也不干class BaseClass:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseClass</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># def __init__(self,name,age):</span></span><br><span class=\"line\">    <span class=\"comment\">#     self.name = name</span></span><br><span class=\"line\">    <span class=\"comment\">#     self.age = age</span></span><br><span class=\"line\">    <span class=\"comment\">#     print(self.name)</span></span><br><span class=\"line\">    <span class=\"comment\">#     print(\"BaseClass is inited \"+self.name)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">speak</span><span class=\"params\">(self,name)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'%s is speaking'</span>%name)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    b = BaseClass()</span><br><span class=\"line\">    <span class=\"comment\"># b.speak('tom')</span></span><br><span class=\"line\">    print(b.__init__)</span><br></pre></td></tr></table></figure>\n<p>不过要注意创建实例的时候传入参数要和__init__方法接受的参数一致。</p>\n<p>关于Python的继承，在子类没有定义<strong>init</strong>方法时，会调用父类的<strong>init</strong>方法，其他方法同理。<br>如果子类有定义的话会执行子类的方法，不执行父类中的方法。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseClass</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self,name,age)</span>:</span></span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">        self.age = age</span><br><span class=\"line\">        print(<span class=\"string\">\"BaseClass is inited \"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">speak</span><span class=\"params\">(self,name)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'%s is speaking'</span>%name)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SubClass</span><span class=\"params\">(BaseClass)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'SubClass is inited'</span>)</span><br><span class=\"line\">    <span class=\"comment\"># def speak(self,name,age):</span></span><br><span class=\"line\">    <span class=\"comment\">#     print('name is %s,age is %s'%(name,age))</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    a = SubClass()</span><br><span class=\"line\">    a.speak(<span class=\"string\">'baby'</span>)</span><br></pre></td></tr></table></figure>\n<p>关于Python中的self，指的是当前类的实例。比如在b = BaseClass()此时的self 就代表 b<br>从下面可以看出</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseClass</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        print(self)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    b = BaseClass()</span><br><span class=\"line\">    print(b)</span><br><span class=\"line\">    a = BaseClass()</span><br><span class=\"line\">    print(a)</span><br></pre></td></tr></table></figure>\n<p>输出</p>\n<p>&lt;<strong>main</strong>.BaseClass object at 0x00000000006E6B70&gt;</p>\n<p>&lt;<strong>main</strong>.BaseClass object at 0x00000000006E6B70&gt;</p>\n<p>&lt;<strong>main</strong>.BaseClass object at 0x0000000000ACBB38&gt;</p>\n<p>&lt;<strong>main</strong>.BaseClass object at 0x0000000000ACBB38&gt;<br>为什么要有self呢，向其他语言比如Ruby，就没有<br>这应该和Python的设计哲学有关吧<br><em>Explicit is better than implicit</em><br>显式比隐式更好</p>\n"},{"title":"关于Python中可变对象的赋值，浅拷贝和深拷贝","date":"2018-01-29T13:09:59.000Z","_content":"关于可变对象的赋值，浅拷贝和深拷贝\nPython中list ,dict为可变对象，int,string,float,tuple为不可变对象\n\n1.赋值\nlist_b = list_a\n修改list_a的同时list_b也会发生改变\n\n\\>>> list_a = [2,3]\n\\>>> list_b = list_a\n\\>>> list_a.append(5)\n\\>>> list_a\n\\>>> [2, 3, 5]\n\\>>> list_b\n\\>>> [2, 3, 5]\n\\>>>\n\n2.使用浅拷贝的话list_b就不会发生改变（在自身内部没有可变情况的情况下）\n使用浅拷贝\nlist_b = list_a.copy()或者\nimport copy\nlist_b = copy.copy(list_a)\n\n3.若list_a内有可变对象元素的话，若此时这个可变元素对象发生改变，则浅拷贝的list_b\n也会变化，\n此时我们可以采用深拷贝来避免这种情况\nimport copy\nlist_b = copy.deepcopy(list_a)","source":"_posts/关于Python中可变对象的赋值，浅拷贝和深拷贝.md","raw":"---\ntitle: 关于Python中可变对象的赋值，浅拷贝和深拷贝\ndate: 2018-01-29 21:09:59\ntags: \ncategories: Python\n---\n关于可变对象的赋值，浅拷贝和深拷贝\nPython中list ,dict为可变对象，int,string,float,tuple为不可变对象\n\n1.赋值\nlist_b = list_a\n修改list_a的同时list_b也会发生改变\n\n\\>>> list_a = [2,3]\n\\>>> list_b = list_a\n\\>>> list_a.append(5)\n\\>>> list_a\n\\>>> [2, 3, 5]\n\\>>> list_b\n\\>>> [2, 3, 5]\n\\>>>\n\n2.使用浅拷贝的话list_b就不会发生改变（在自身内部没有可变情况的情况下）\n使用浅拷贝\nlist_b = list_a.copy()或者\nimport copy\nlist_b = copy.copy(list_a)\n\n3.若list_a内有可变对象元素的话，若此时这个可变元素对象发生改变，则浅拷贝的list_b\n也会变化，\n此时我们可以采用深拷贝来避免这种情况\nimport copy\nlist_b = copy.deepcopy(list_a)","slug":"关于Python中可变对象的赋值，浅拷贝和深拷贝","published":1,"updated":"2018-03-01T17:20:48.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq5n0047bcuskxbd3zce","content":"<p>关于可变对象的赋值，浅拷贝和深拷贝<br>Python中list ,dict为可变对象，int,string,float,tuple为不可变对象</p>\n<p>1.赋值<br>list_b = list_a<br>修改list_a的同时list_b也会发生改变</p>\n<p>>&gt;&gt; list_a = [2,3]<br>>&gt;&gt; list_b = list_a<br>>&gt;&gt; list_a.append(5)<br>>&gt;&gt; list_a<br>>&gt;&gt; [2, 3, 5]<br>>&gt;&gt; list_b<br>>&gt;&gt; [2, 3, 5]<br>>&gt;&gt;</p>\n<p>2.使用浅拷贝的话list_b就不会发生改变（在自身内部没有可变情况的情况下）<br>使用浅拷贝<br>list_b = list_a.copy()或者<br>import copy<br>list_b = copy.copy(list_a)</p>\n<p>3.若list_a内有可变对象元素的话，若此时这个可变元素对象发生改变，则浅拷贝的list_b<br>也会变化，<br>此时我们可以采用深拷贝来避免这种情况<br>import copy<br>list_b = copy.deepcopy(list_a)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>关于可变对象的赋值，浅拷贝和深拷贝<br>Python中list ,dict为可变对象，int,string,float,tuple为不可变对象</p>\n<p>1.赋值<br>list_b = list_a<br>修改list_a的同时list_b也会发生改变</p>\n<p>>&gt;&gt; list_a = [2,3]<br>>&gt;&gt; list_b = list_a<br>>&gt;&gt; list_a.append(5)<br>>&gt;&gt; list_a<br>>&gt;&gt; [2, 3, 5]<br>>&gt;&gt; list_b<br>>&gt;&gt; [2, 3, 5]<br>>&gt;&gt;</p>\n<p>2.使用浅拷贝的话list_b就不会发生改变（在自身内部没有可变情况的情况下）<br>使用浅拷贝<br>list_b = list_a.copy()或者<br>import copy<br>list_b = copy.copy(list_a)</p>\n<p>3.若list_a内有可变对象元素的话，若此时这个可变元素对象发生改变，则浅拷贝的list_b<br>也会变化，<br>此时我们可以采用深拷贝来避免这种情况<br>import copy<br>list_b = copy.deepcopy(list_a)</p>\n"},{"title":"同步与异步阻塞与非阻塞的作用及区别","date":"2018-04-04T07:42:06.000Z","_content":"\n这篇文章主要介绍了同步([synchronous](http://www.iciba.com/synchronous))异步([asynchronous](http://www.iciba.com/asynchronous))\n\n阻塞(blocking) 非阻塞(non-blocking)它们之间的联系和区别，作记录用，如有错误还请告知。\n\n1. 在介绍之前我们首先要了解一个概念：**I/O**(Input/Output)\n\n对于I/O没有明确的定义而言，它取决于所处系统以及从哪个视角看待，是从用户，进程，还是内核的角度看待I/O呢\n\n- 如果从进程的角度看的话，可以说Linux下的一个I/O操作就是用来读写系统服务的，从这个意义上来说打开一个文件就不是I/O操作，因为它并没有读写进程中的数据。\n- 但是如果是从内核的角度看待，打开文件需要读取一个或多个目录的内容并且读取硬盘里的头文件信息，因此任何在硬盘和内存之间的数据改变都可以被视作I/O操作\n- 从一个用户的角度来说，I/O操作就是在处理器中读入或者读出数据。就我上面提到的而言,通过更新显存，计算机可以将内容写入到屏幕上，人们可能会在主存与显存之间进行区分，但从逻辑上来说，并不存在真正的数据移动。\n\n简而言之，决定一个操作是不是I/O操作取决于所处的视角。\n\n2. 同步异步阻塞非阻塞用来干嘛的呢？\n\n**同步与异步阻塞与非阻塞的作用：就是I/O操作时的工作模式 （I/O Models）**\n\n其中**同步和异步的区别**是的是I/O操作中交互（消息通信）机制的不同\n\n- 同步：调用者会主动等待调用结果\n- 异步：调用者发起一个异步调用，然后立即返回去做别的事。“被调用者”通过状态、通知、回调函数都手段来通知“调用者”。异步IO不是FIFO有序的，例如进程A与进程B先后对一个端口发起了异步读操作，有可能是进程B先得到读操作的结果。\n\n而**阻塞和非阻塞的区别**主要是调用者”线程在等待调用结果时的状态\n\n- 阻塞：线程被操作系统挂起\n\n- 非阻塞：线程不被操作系统挂起，可以处理其他的事情\n\n  > 在处理 IO 的时候，阻塞和非阻塞都是同步 IO。\n  >\n  > 只有使用了特殊的 API 才是异步 IO。\n\n  > 对unix来讲：阻塞式I/O(默认)，非阻塞式I/O(nonblock)，I/O复用(select/poll/epoll)都属于同步I/O，因为它们在数据由内核空间复制回进程缓冲区时都是阻塞的(不能干别的事)。只有异步I/O模型(AIO)是符合异步I/O操作的含义的，即在1数据准备完成、2由内核空间拷贝回缓冲区后 通知进程，在等待通知的这段时间里可以干别的事。\n\n用一个生活中的例子来说明\n\n>老张爱喝茶，废话不说，煮开水。\n\n> 出场人物：老张，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。\n> 1 老张把水壶放到火上，立等水开。（同步阻塞）\n> 老张觉得自己有点傻\n> 2 老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开没有。（同步非阻塞）\n> 老张还是觉得自己有点傻，于是变高端了，买了把会响笛的那种水壶。水开之后，能大声发出嘀~~~~的噪音。\n> 3 老张把响水壶放到火上，立等水开。（异步阻塞）\n> 老张觉得这样傻等意义不大\n> 4 老张把响水壶放到火上，去客厅看电视，水壶响之前不再去看它了，响了再去拿壶。（异步非阻塞）\n> 老张觉得自己聪明了。\n>\n> 所谓同步异步，只是对于水壶而言。\n> 普通水壶，同步；响水壶，异步。\n> 虽然都能干活，但响水壶可以在自己完工之后，提示老张水开了。这是普通水壶所不能及的。\n> 同步只能让调用者去轮询自己（情况2中），造成老张效率的低下。\n>\n> 所谓阻塞非阻塞，仅仅对于老张而言。\n> 立等的老张，阻塞；看电视的老张，非阻塞。\n> 情况1和情况3中老张就是阻塞的，媳妇喊他都不知道。虽然3中响水壶是异步的，可对于立等的老张没有太大的意义。所以一般异步是配合非阻塞使用的，这样才能发挥异步的效用。\n>\n> ——来源网络，作者不明。\n\n参考资料：\n\n[What is the definition of I/O, and what actions are classified as I/O?](https://stackoverflow.com/questions/41477425/what-is-the-definition-of-i-o-and-what-actions-are-classified-as-i-o)\n\n[I/O维基百科定义](https://zh.wikipedia.org/wiki/I/O)\n\n[怎样理解阻塞非阻塞与同步异步的区别？](https://www.zhihu.com/question/19732473)\n\n[I/O多路复用技术（multiplexing）是什么？](https://www.zhihu.com/question/28594409)\n\n","source":"_posts/同步与异步阻塞与非阻塞.md","raw":"---\ntitle: 同步与异步阻塞与非阻塞的作用及区别\ndate: 2018-04-04 15:42:06\ntags: I/O\ncategories: \n---\n\n这篇文章主要介绍了同步([synchronous](http://www.iciba.com/synchronous))异步([asynchronous](http://www.iciba.com/asynchronous))\n\n阻塞(blocking) 非阻塞(non-blocking)它们之间的联系和区别，作记录用，如有错误还请告知。\n\n1. 在介绍之前我们首先要了解一个概念：**I/O**(Input/Output)\n\n对于I/O没有明确的定义而言，它取决于所处系统以及从哪个视角看待，是从用户，进程，还是内核的角度看待I/O呢\n\n- 如果从进程的角度看的话，可以说Linux下的一个I/O操作就是用来读写系统服务的，从这个意义上来说打开一个文件就不是I/O操作，因为它并没有读写进程中的数据。\n- 但是如果是从内核的角度看待，打开文件需要读取一个或多个目录的内容并且读取硬盘里的头文件信息，因此任何在硬盘和内存之间的数据改变都可以被视作I/O操作\n- 从一个用户的角度来说，I/O操作就是在处理器中读入或者读出数据。就我上面提到的而言,通过更新显存，计算机可以将内容写入到屏幕上，人们可能会在主存与显存之间进行区分，但从逻辑上来说，并不存在真正的数据移动。\n\n简而言之，决定一个操作是不是I/O操作取决于所处的视角。\n\n2. 同步异步阻塞非阻塞用来干嘛的呢？\n\n**同步与异步阻塞与非阻塞的作用：就是I/O操作时的工作模式 （I/O Models）**\n\n其中**同步和异步的区别**是的是I/O操作中交互（消息通信）机制的不同\n\n- 同步：调用者会主动等待调用结果\n- 异步：调用者发起一个异步调用，然后立即返回去做别的事。“被调用者”通过状态、通知、回调函数都手段来通知“调用者”。异步IO不是FIFO有序的，例如进程A与进程B先后对一个端口发起了异步读操作，有可能是进程B先得到读操作的结果。\n\n而**阻塞和非阻塞的区别**主要是调用者”线程在等待调用结果时的状态\n\n- 阻塞：线程被操作系统挂起\n\n- 非阻塞：线程不被操作系统挂起，可以处理其他的事情\n\n  > 在处理 IO 的时候，阻塞和非阻塞都是同步 IO。\n  >\n  > 只有使用了特殊的 API 才是异步 IO。\n\n  > 对unix来讲：阻塞式I/O(默认)，非阻塞式I/O(nonblock)，I/O复用(select/poll/epoll)都属于同步I/O，因为它们在数据由内核空间复制回进程缓冲区时都是阻塞的(不能干别的事)。只有异步I/O模型(AIO)是符合异步I/O操作的含义的，即在1数据准备完成、2由内核空间拷贝回缓冲区后 通知进程，在等待通知的这段时间里可以干别的事。\n\n用一个生活中的例子来说明\n\n>老张爱喝茶，废话不说，煮开水。\n\n> 出场人物：老张，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。\n> 1 老张把水壶放到火上，立等水开。（同步阻塞）\n> 老张觉得自己有点傻\n> 2 老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开没有。（同步非阻塞）\n> 老张还是觉得自己有点傻，于是变高端了，买了把会响笛的那种水壶。水开之后，能大声发出嘀~~~~的噪音。\n> 3 老张把响水壶放到火上，立等水开。（异步阻塞）\n> 老张觉得这样傻等意义不大\n> 4 老张把响水壶放到火上，去客厅看电视，水壶响之前不再去看它了，响了再去拿壶。（异步非阻塞）\n> 老张觉得自己聪明了。\n>\n> 所谓同步异步，只是对于水壶而言。\n> 普通水壶，同步；响水壶，异步。\n> 虽然都能干活，但响水壶可以在自己完工之后，提示老张水开了。这是普通水壶所不能及的。\n> 同步只能让调用者去轮询自己（情况2中），造成老张效率的低下。\n>\n> 所谓阻塞非阻塞，仅仅对于老张而言。\n> 立等的老张，阻塞；看电视的老张，非阻塞。\n> 情况1和情况3中老张就是阻塞的，媳妇喊他都不知道。虽然3中响水壶是异步的，可对于立等的老张没有太大的意义。所以一般异步是配合非阻塞使用的，这样才能发挥异步的效用。\n>\n> ——来源网络，作者不明。\n\n参考资料：\n\n[What is the definition of I/O, and what actions are classified as I/O?](https://stackoverflow.com/questions/41477425/what-is-the-definition-of-i-o-and-what-actions-are-classified-as-i-o)\n\n[I/O维基百科定义](https://zh.wikipedia.org/wiki/I/O)\n\n[怎样理解阻塞非阻塞与同步异步的区别？](https://www.zhihu.com/question/19732473)\n\n[I/O多路复用技术（multiplexing）是什么？](https://www.zhihu.com/question/28594409)\n\n","slug":"同步与异步阻塞与非阻塞","published":1,"updated":"2018-04-09T15:16:34.559Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq5p0049bcus6e9eiug7","content":"<p>这篇文章主要介绍了同步(<a href=\"http://www.iciba.com/synchronous\" target=\"_blank\" rel=\"noopener\">synchronous</a>)异步(<a href=\"http://www.iciba.com/asynchronous\" target=\"_blank\" rel=\"noopener\">asynchronous</a>)</p>\n<p>阻塞(blocking) 非阻塞(non-blocking)它们之间的联系和区别，作记录用，如有错误还请告知。</p>\n<ol>\n<li>在介绍之前我们首先要了解一个概念：<strong>I/O</strong>(Input/Output)</li>\n</ol>\n<p>对于I/O没有明确的定义而言，它取决于所处系统以及从哪个视角看待，是从用户，进程，还是内核的角度看待I/O呢</p>\n<ul>\n<li>如果从进程的角度看的话，可以说Linux下的一个I/O操作就是用来读写系统服务的，从这个意义上来说打开一个文件就不是I/O操作，因为它并没有读写进程中的数据。</li>\n<li>但是如果是从内核的角度看待，打开文件需要读取一个或多个目录的内容并且读取硬盘里的头文件信息，因此任何在硬盘和内存之间的数据改变都可以被视作I/O操作</li>\n<li>从一个用户的角度来说，I/O操作就是在处理器中读入或者读出数据。就我上面提到的而言,通过更新显存，计算机可以将内容写入到屏幕上，人们可能会在主存与显存之间进行区分，但从逻辑上来说，并不存在真正的数据移动。</li>\n</ul>\n<p>简而言之，决定一个操作是不是I/O操作取决于所处的视角。</p>\n<ol start=\"2\">\n<li>同步异步阻塞非阻塞用来干嘛的呢？</li>\n</ol>\n<p><strong>同步与异步阻塞与非阻塞的作用：就是I/O操作时的工作模式 （I/O Models）</strong></p>\n<p>其中<strong>同步和异步的区别</strong>是的是I/O操作中交互（消息通信）机制的不同</p>\n<ul>\n<li>同步：调用者会主动等待调用结果</li>\n<li>异步：调用者发起一个异步调用，然后立即返回去做别的事。“被调用者”通过状态、通知、回调函数都手段来通知“调用者”。异步IO不是FIFO有序的，例如进程A与进程B先后对一个端口发起了异步读操作，有可能是进程B先得到读操作的结果。</li>\n</ul>\n<p>而<strong>阻塞和非阻塞的区别</strong>主要是调用者”线程在等待调用结果时的状态</p>\n<ul>\n<li><p>阻塞：线程被操作系统挂起</p>\n</li>\n<li><p>非阻塞：线程不被操作系统挂起，可以处理其他的事情</p>\n<blockquote>\n<p>在处理 IO 的时候，阻塞和非阻塞都是同步 IO。</p>\n<p>只有使用了特殊的 API 才是异步 IO。</p>\n</blockquote>\n<blockquote>\n<p>对unix来讲：阻塞式I/O(默认)，非阻塞式I/O(nonblock)，I/O复用(select/poll/epoll)都属于同步I/O，因为它们在数据由内核空间复制回进程缓冲区时都是阻塞的(不能干别的事)。只有异步I/O模型(AIO)是符合异步I/O操作的含义的，即在1数据准备完成、2由内核空间拷贝回缓冲区后 通知进程，在等待通知的这段时间里可以干别的事。</p>\n</blockquote>\n</li>\n</ul>\n<p>用一个生活中的例子来说明</p>\n<blockquote>\n<p>老张爱喝茶，废话不说，煮开水。</p>\n</blockquote>\n<blockquote>\n<p>出场人物：老张，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。<br>1 老张把水壶放到火上，立等水开。（同步阻塞）<br>老张觉得自己有点傻<br>2 老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开没有。（同步非阻塞）<br>老张还是觉得自己有点傻，于是变高端了，买了把会响笛的那种水壶。水开之后，能大声发出嘀~~~~的噪音。<br>3 老张把响水壶放到火上，立等水开。（异步阻塞）<br>老张觉得这样傻等意义不大<br>4 老张把响水壶放到火上，去客厅看电视，水壶响之前不再去看它了，响了再去拿壶。（异步非阻塞）<br>老张觉得自己聪明了。</p>\n<p>所谓同步异步，只是对于水壶而言。<br>普通水壶，同步；响水壶，异步。<br>虽然都能干活，但响水壶可以在自己完工之后，提示老张水开了。这是普通水壶所不能及的。<br>同步只能让调用者去轮询自己（情况2中），造成老张效率的低下。</p>\n<p>所谓阻塞非阻塞，仅仅对于老张而言。<br>立等的老张，阻塞；看电视的老张，非阻塞。<br>情况1和情况3中老张就是阻塞的，媳妇喊他都不知道。虽然3中响水壶是异步的，可对于立等的老张没有太大的意义。所以一般异步是配合非阻塞使用的，这样才能发挥异步的效用。</p>\n<p>——来源网络，作者不明。</p>\n</blockquote>\n<p>参考资料：</p>\n<p><a href=\"https://stackoverflow.com/questions/41477425/what-is-the-definition-of-i-o-and-what-actions-are-classified-as-i-o\" target=\"_blank\" rel=\"noopener\">What is the definition of I/O, and what actions are classified as I/O?</a></p>\n<p><a href=\"https://zh.wikipedia.org/wiki/I/O\" target=\"_blank\" rel=\"noopener\">I/O维基百科定义</a></p>\n<p><a href=\"https://www.zhihu.com/question/19732473\" target=\"_blank\" rel=\"noopener\">怎样理解阻塞非阻塞与同步异步的区别？</a></p>\n<p><a href=\"https://www.zhihu.com/question/28594409\" target=\"_blank\" rel=\"noopener\">I/O多路复用技术（multiplexing）是什么？</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>这篇文章主要介绍了同步(<a href=\"http://www.iciba.com/synchronous\" target=\"_blank\" rel=\"noopener\">synchronous</a>)异步(<a href=\"http://www.iciba.com/asynchronous\" target=\"_blank\" rel=\"noopener\">asynchronous</a>)</p>\n<p>阻塞(blocking) 非阻塞(non-blocking)它们之间的联系和区别，作记录用，如有错误还请告知。</p>\n<ol>\n<li>在介绍之前我们首先要了解一个概念：<strong>I/O</strong>(Input/Output)</li>\n</ol>\n<p>对于I/O没有明确的定义而言，它取决于所处系统以及从哪个视角看待，是从用户，进程，还是内核的角度看待I/O呢</p>\n<ul>\n<li>如果从进程的角度看的话，可以说Linux下的一个I/O操作就是用来读写系统服务的，从这个意义上来说打开一个文件就不是I/O操作，因为它并没有读写进程中的数据。</li>\n<li>但是如果是从内核的角度看待，打开文件需要读取一个或多个目录的内容并且读取硬盘里的头文件信息，因此任何在硬盘和内存之间的数据改变都可以被视作I/O操作</li>\n<li>从一个用户的角度来说，I/O操作就是在处理器中读入或者读出数据。就我上面提到的而言,通过更新显存，计算机可以将内容写入到屏幕上，人们可能会在主存与显存之间进行区分，但从逻辑上来说，并不存在真正的数据移动。</li>\n</ul>\n<p>简而言之，决定一个操作是不是I/O操作取决于所处的视角。</p>\n<ol start=\"2\">\n<li>同步异步阻塞非阻塞用来干嘛的呢？</li>\n</ol>\n<p><strong>同步与异步阻塞与非阻塞的作用：就是I/O操作时的工作模式 （I/O Models）</strong></p>\n<p>其中<strong>同步和异步的区别</strong>是的是I/O操作中交互（消息通信）机制的不同</p>\n<ul>\n<li>同步：调用者会主动等待调用结果</li>\n<li>异步：调用者发起一个异步调用，然后立即返回去做别的事。“被调用者”通过状态、通知、回调函数都手段来通知“调用者”。异步IO不是FIFO有序的，例如进程A与进程B先后对一个端口发起了异步读操作，有可能是进程B先得到读操作的结果。</li>\n</ul>\n<p>而<strong>阻塞和非阻塞的区别</strong>主要是调用者”线程在等待调用结果时的状态</p>\n<ul>\n<li><p>阻塞：线程被操作系统挂起</p>\n</li>\n<li><p>非阻塞：线程不被操作系统挂起，可以处理其他的事情</p>\n<blockquote>\n<p>在处理 IO 的时候，阻塞和非阻塞都是同步 IO。</p>\n<p>只有使用了特殊的 API 才是异步 IO。</p>\n</blockquote>\n<blockquote>\n<p>对unix来讲：阻塞式I/O(默认)，非阻塞式I/O(nonblock)，I/O复用(select/poll/epoll)都属于同步I/O，因为它们在数据由内核空间复制回进程缓冲区时都是阻塞的(不能干别的事)。只有异步I/O模型(AIO)是符合异步I/O操作的含义的，即在1数据准备完成、2由内核空间拷贝回缓冲区后 通知进程，在等待通知的这段时间里可以干别的事。</p>\n</blockquote>\n</li>\n</ul>\n<p>用一个生活中的例子来说明</p>\n<blockquote>\n<p>老张爱喝茶，废话不说，煮开水。</p>\n</blockquote>\n<blockquote>\n<p>出场人物：老张，水壶两把（普通水壶，简称水壶；会响的水壶，简称响水壶）。<br>1 老张把水壶放到火上，立等水开。（同步阻塞）<br>老张觉得自己有点傻<br>2 老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开没有。（同步非阻塞）<br>老张还是觉得自己有点傻，于是变高端了，买了把会响笛的那种水壶。水开之后，能大声发出嘀~~~~的噪音。<br>3 老张把响水壶放到火上，立等水开。（异步阻塞）<br>老张觉得这样傻等意义不大<br>4 老张把响水壶放到火上，去客厅看电视，水壶响之前不再去看它了，响了再去拿壶。（异步非阻塞）<br>老张觉得自己聪明了。</p>\n<p>所谓同步异步，只是对于水壶而言。<br>普通水壶，同步；响水壶，异步。<br>虽然都能干活，但响水壶可以在自己完工之后，提示老张水开了。这是普通水壶所不能及的。<br>同步只能让调用者去轮询自己（情况2中），造成老张效率的低下。</p>\n<p>所谓阻塞非阻塞，仅仅对于老张而言。<br>立等的老张，阻塞；看电视的老张，非阻塞。<br>情况1和情况3中老张就是阻塞的，媳妇喊他都不知道。虽然3中响水壶是异步的，可对于立等的老张没有太大的意义。所以一般异步是配合非阻塞使用的，这样才能发挥异步的效用。</p>\n<p>——来源网络，作者不明。</p>\n</blockquote>\n<p>参考资料：</p>\n<p><a href=\"https://stackoverflow.com/questions/41477425/what-is-the-definition-of-i-o-and-what-actions-are-classified-as-i-o\" target=\"_blank\" rel=\"noopener\">What is the definition of I/O, and what actions are classified as I/O?</a></p>\n<p><a href=\"https://zh.wikipedia.org/wiki/I/O\" target=\"_blank\" rel=\"noopener\">I/O维基百科定义</a></p>\n<p><a href=\"https://www.zhihu.com/question/19732473\" target=\"_blank\" rel=\"noopener\">怎样理解阻塞非阻塞与同步异步的区别？</a></p>\n<p><a href=\"https://www.zhihu.com/question/28594409\" target=\"_blank\" rel=\"noopener\">I/O多路复用技术（multiplexing）是什么？</a></p>\n"},{"title":"命令行运行Cpp文件","date":"2018-01-23T14:28:11.000Z","_content":"\n本篇文章主要介绍如何在命令行下运行cpp文件，当然前提是你安装了vs2017。下面的步骤是在win10系统下进行的\n\n1.打开VS 2017的开发人员命令提示符 \n\n首先点击桌面最左下角，进入程序列表找到\n\n在Visiual Studio2017文件夹下\n\n找到   VS 2017的开发人员命令提示符  并打开\n\n2.新建一个文件夹\n\n在VS 2017的开发人员命令提示符 打开的窗口下输入\n\nmd hello\n\ncd hello\n\n此时在hello目录下\n\n3.写代码\n\nnotepad hello.cpp\n\n会提示你找不到文件：hello.cpp。要创建新文件吗，回车就好。\n\n然后在hello.cpp上输入以下内容\n\n```c++\n#include<iostream>\nusing namespace std;\nint main(){\n    cout<<\"Hello, World!\"<<endl;\n    return 0;\n}\n```\n后保存\n\n4.运行hello.cpp\n\n输入cl /EHsc hello.cpp\n\n此时下面应该会显示以下内容\n\n'''\n\n用于 x86 的 Microsoft (R) C/C++ 优化编译器 19.11.25547 版\n版权所有(C) Microsoft Corporation。保留所有权利。\n\nhello.cpp\nMicrosoft (R) Incremental Linker Version 14.11.25547.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n/out:hello.exe\nhello.obj\n\n'''\n\n再输入hello\n\n就会出现激动人心的\n\nHello, World! \n\n了\n\n","source":"_posts/命令行运行Cpp文件.md","raw":"---\ntitle: 命令行运行Cpp文件\ndate: 2018-01-23 22:28:11\ntags: \ncategories: C++\n---\n\n本篇文章主要介绍如何在命令行下运行cpp文件，当然前提是你安装了vs2017。下面的步骤是在win10系统下进行的\n\n1.打开VS 2017的开发人员命令提示符 \n\n首先点击桌面最左下角，进入程序列表找到\n\n在Visiual Studio2017文件夹下\n\n找到   VS 2017的开发人员命令提示符  并打开\n\n2.新建一个文件夹\n\n在VS 2017的开发人员命令提示符 打开的窗口下输入\n\nmd hello\n\ncd hello\n\n此时在hello目录下\n\n3.写代码\n\nnotepad hello.cpp\n\n会提示你找不到文件：hello.cpp。要创建新文件吗，回车就好。\n\n然后在hello.cpp上输入以下内容\n\n```c++\n#include<iostream>\nusing namespace std;\nint main(){\n    cout<<\"Hello, World!\"<<endl;\n    return 0;\n}\n```\n后保存\n\n4.运行hello.cpp\n\n输入cl /EHsc hello.cpp\n\n此时下面应该会显示以下内容\n\n'''\n\n用于 x86 的 Microsoft (R) C/C++ 优化编译器 19.11.25547 版\n版权所有(C) Microsoft Corporation。保留所有权利。\n\nhello.cpp\nMicrosoft (R) Incremental Linker Version 14.11.25547.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n/out:hello.exe\nhello.obj\n\n'''\n\n再输入hello\n\n就会出现激动人心的\n\nHello, World! \n\n了\n\n","slug":"命令行运行Cpp文件","published":1,"updated":"2018-03-01T17:20:48.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq5q004bbcusozfltzqc","content":"<p>本篇文章主要介绍如何在命令行下运行cpp文件，当然前提是你安装了vs2017。下面的步骤是在win10系统下进行的</p>\n<p>1.打开VS 2017的开发人员命令提示符 </p>\n<p>首先点击桌面最左下角，进入程序列表找到</p>\n<p>在Visiual Studio2017文件夹下</p>\n<p>找到   VS 2017的开发人员命令提示符  并打开</p>\n<p>2.新建一个文件夹</p>\n<p>在VS 2017的开发人员命令提示符 打开的窗口下输入</p>\n<p>md hello</p>\n<p>cd hello</p>\n<p>此时在hello目录下</p>\n<p>3.写代码</p>\n<p>notepad hello.cpp</p>\n<p>会提示你找不到文件：hello.cpp。要创建新文件吗，回车就好。</p>\n<p>然后在hello.cpp上输入以下内容</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Hello, World!\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>后保存</p>\n<p>4.运行hello.cpp</p>\n<p>输入cl /EHsc hello.cpp</p>\n<p>此时下面应该会显示以下内容</p>\n<p>‘’’</p>\n<p>用于 x86 的 Microsoft (R) C/C++ 优化编译器 19.11.25547 版<br>版权所有(C) Microsoft Corporation。保留所有权利。</p>\n<p>hello.cpp<br>Microsoft (R) Incremental Linker Version 14.11.25547.0<br>Copyright (C) Microsoft Corporation.  All rights reserved.</p>\n<p>/out:hello.exe<br>hello.obj</p>\n<p>‘’’</p>\n<p>再输入hello</p>\n<p>就会出现激动人心的</p>\n<p>Hello, World! </p>\n<p>了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>本篇文章主要介绍如何在命令行下运行cpp文件，当然前提是你安装了vs2017。下面的步骤是在win10系统下进行的</p>\n<p>1.打开VS 2017的开发人员命令提示符 </p>\n<p>首先点击桌面最左下角，进入程序列表找到</p>\n<p>在Visiual Studio2017文件夹下</p>\n<p>找到   VS 2017的开发人员命令提示符  并打开</p>\n<p>2.新建一个文件夹</p>\n<p>在VS 2017的开发人员命令提示符 打开的窗口下输入</p>\n<p>md hello</p>\n<p>cd hello</p>\n<p>此时在hello目录下</p>\n<p>3.写代码</p>\n<p>notepad hello.cpp</p>\n<p>会提示你找不到文件：hello.cpp。要创建新文件吗，回车就好。</p>\n<p>然后在hello.cpp上输入以下内容</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"Hello, World!\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>后保存</p>\n<p>4.运行hello.cpp</p>\n<p>输入cl /EHsc hello.cpp</p>\n<p>此时下面应该会显示以下内容</p>\n<p>‘’’</p>\n<p>用于 x86 的 Microsoft (R) C/C++ 优化编译器 19.11.25547 版<br>版权所有(C) Microsoft Corporation。保留所有权利。</p>\n<p>hello.cpp<br>Microsoft (R) Incremental Linker Version 14.11.25547.0<br>Copyright (C) Microsoft Corporation.  All rights reserved.</p>\n<p>/out:hello.exe<br>hello.obj</p>\n<p>‘’’</p>\n<p>再输入hello</p>\n<p>就会出现激动人心的</p>\n<p>Hello, World! </p>\n<p>了</p>\n"},{"title":"改变putty终端字体大小及设置自动登录用户名","date":"2018-03-06T12:24:48.000Z","_content":"\n1.改变putty终端字体大小\n\n由于putty连接Linux终端后默认的字体太小，于是想修改下\n\n无奈修改完重新打开依然是以前的默认字体，搜索了下原来需\n\n要保存到session中，设置步骤如下：\n\n打开putty,进去到命令行页面，在空白处右击选择Change Settings:\n\n依次选择\n\nWindow ->Appearance -> Font settings -> Change\n\n点击Change后即可修改字体大小，我修改为14\n\n然后需要保存到Session中，否则下次打开putty后又是默认的字体\n\n了，\n\n点击Session,在Saved Sessions下面框框下输入你想要保存的名字，\n\n然后点击Save,最后Apply就大功告成了。\n\n2.putty设置自动登录用户名,\n\n打开putty,进去到命令行页面，在空白处右击选择Change Settings:\n\n\"Connection\"，\"Data\"，修改\"Auto-login username\"的值即可，这样就不用每次都输用户名了。","source":"_posts/如何改变putty终端字体大小.md","raw":"---\ntitle: 改变putty终端字体大小及设置自动登录用户名\ndate: 2018-03-06 20:24:48\ntags: Linux\ncategories: \n---\n\n1.改变putty终端字体大小\n\n由于putty连接Linux终端后默认的字体太小，于是想修改下\n\n无奈修改完重新打开依然是以前的默认字体，搜索了下原来需\n\n要保存到session中，设置步骤如下：\n\n打开putty,进去到命令行页面，在空白处右击选择Change Settings:\n\n依次选择\n\nWindow ->Appearance -> Font settings -> Change\n\n点击Change后即可修改字体大小，我修改为14\n\n然后需要保存到Session中，否则下次打开putty后又是默认的字体\n\n了，\n\n点击Session,在Saved Sessions下面框框下输入你想要保存的名字，\n\n然后点击Save,最后Apply就大功告成了。\n\n2.putty设置自动登录用户名,\n\n打开putty,进去到命令行页面，在空白处右击选择Change Settings:\n\n\"Connection\"，\"Data\"，修改\"Auto-login username\"的值即可，这样就不用每次都输用户名了。","slug":"如何改变putty终端字体大小","published":1,"updated":"2018-03-18T09:32:14.856Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq5q004ebcusexghm6dk","content":"<p>1.改变putty终端字体大小</p>\n<p>由于putty连接Linux终端后默认的字体太小，于是想修改下</p>\n<p>无奈修改完重新打开依然是以前的默认字体，搜索了下原来需</p>\n<p>要保存到session中，设置步骤如下：</p>\n<p>打开putty,进去到命令行页面，在空白处右击选择Change Settings:</p>\n<p>依次选择</p>\n<p>Window -&gt;Appearance -&gt; Font settings -&gt; Change</p>\n<p>点击Change后即可修改字体大小，我修改为14</p>\n<p>然后需要保存到Session中，否则下次打开putty后又是默认的字体</p>\n<p>了，</p>\n<p>点击Session,在Saved Sessions下面框框下输入你想要保存的名字，</p>\n<p>然后点击Save,最后Apply就大功告成了。</p>\n<p>2.putty设置自动登录用户名,</p>\n<p>打开putty,进去到命令行页面，在空白处右击选择Change Settings:</p>\n<p>“Connection”，”Data”，修改”Auto-login username”的值即可，这样就不用每次都输用户名了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.改变putty终端字体大小</p>\n<p>由于putty连接Linux终端后默认的字体太小，于是想修改下</p>\n<p>无奈修改完重新打开依然是以前的默认字体，搜索了下原来需</p>\n<p>要保存到session中，设置步骤如下：</p>\n<p>打开putty,进去到命令行页面，在空白处右击选择Change Settings:</p>\n<p>依次选择</p>\n<p>Window -&gt;Appearance -&gt; Font settings -&gt; Change</p>\n<p>点击Change后即可修改字体大小，我修改为14</p>\n<p>然后需要保存到Session中，否则下次打开putty后又是默认的字体</p>\n<p>了，</p>\n<p>点击Session,在Saved Sessions下面框框下输入你想要保存的名字，</p>\n<p>然后点击Save,最后Apply就大功告成了。</p>\n<p>2.putty设置自动登录用户名,</p>\n<p>打开putty,进去到命令行页面，在空白处右击选择Change Settings:</p>\n<p>“Connection”，”Data”，修改”Auto-login username”的值即可，这样就不用每次都输用户名了。</p>\n"},{"title":"如何理解Python中的蓝图","date":"2018-03-21T12:48:02.000Z","_content":"","source":"_posts/如何理解Python中的蓝图.md","raw":"---\ntitle: 如何理解Python中的蓝图\ndate: 2018-03-21 20:48:02\ntags:\ncategories:\n---\n","slug":"如何理解Python中的蓝图","published":1,"updated":"2018-03-21T12:48:02.312Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq5q004gbcusrwpo5z8s","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"如何使用pry-byebug调试ruby程序","date":"2018-03-19T13:54:53.000Z","_content":"\n调试ruby on rails需要使用到pry-byebug包\n在Gemfile文件中里添加\n\n```\ngem 'pry-byebug'\n```\n\n然后命令行下执行\n\n```\nbundle install\n```\n\n使用方法：\n在需要调试的代码地方添加\n\n```\nbinding.pry\n```\n\n实例\n\n```ruby\ndef some_method\n  puts 'Hello World' # Run 'step' in the console to move here\nend\n\nbinding.pry\nsome_method          # 在此处停止\nputs 'Goodbye World' # 命令行输入next执行下一步，也可在命令行输入想要查看的变量\n```\n\n参考官方文档\n\n[pry-byebug](https://github.com/deivid-rodriguez/pry-byebug)","source":"_posts/如何调试ruby程序.md","raw":"---\ntitle: 如何使用pry-byebug调试ruby程序\ndate: 2018-03-19 21:54:53\ntags:\ncategories: Ruby\n---\n\n调试ruby on rails需要使用到pry-byebug包\n在Gemfile文件中里添加\n\n```\ngem 'pry-byebug'\n```\n\n然后命令行下执行\n\n```\nbundle install\n```\n\n使用方法：\n在需要调试的代码地方添加\n\n```\nbinding.pry\n```\n\n实例\n\n```ruby\ndef some_method\n  puts 'Hello World' # Run 'step' in the console to move here\nend\n\nbinding.pry\nsome_method          # 在此处停止\nputs 'Goodbye World' # 命令行输入next执行下一步，也可在命令行输入想要查看的变量\n```\n\n参考官方文档\n\n[pry-byebug](https://github.com/deivid-rodriguez/pry-byebug)","slug":"如何调试ruby程序","published":1,"updated":"2018-03-19T13:57:30.016Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq5q004ibcusd2xs4emy","content":"<p>调试ruby on rails需要使用到pry-byebug包<br>在Gemfile文件中里添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem &apos;pry-byebug&apos;</span><br></pre></td></tr></table></figure>\n<p>然后命令行下执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bundle install</span><br></pre></td></tr></table></figure>\n<p>使用方法：<br>在需要调试的代码地方添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binding.pry</span><br></pre></td></tr></table></figure>\n<p>实例</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">some_method</span></span></span><br><span class=\"line\">  puts <span class=\"string\">'Hello World'</span> <span class=\"comment\"># Run 'step' in the console to move here</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">binding.pry</span><br><span class=\"line\">some_method          <span class=\"comment\"># 在此处停止</span></span><br><span class=\"line\">puts <span class=\"string\">'Goodbye World'</span> <span class=\"comment\"># 命令行输入next执行下一步，也可在命令行输入想要查看的变量</span></span><br></pre></td></tr></table></figure>\n<p>参考官方文档</p>\n<p><a href=\"https://github.com/deivid-rodriguez/pry-byebug\" target=\"_blank\" rel=\"noopener\">pry-byebug</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>调试ruby on rails需要使用到pry-byebug包<br>在Gemfile文件中里添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem &apos;pry-byebug&apos;</span><br></pre></td></tr></table></figure>\n<p>然后命令行下执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bundle install</span><br></pre></td></tr></table></figure>\n<p>使用方法：<br>在需要调试的代码地方添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binding.pry</span><br></pre></td></tr></table></figure>\n<p>实例</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">some_method</span></span></span><br><span class=\"line\">  puts <span class=\"string\">'Hello World'</span> <span class=\"comment\"># Run 'step' in the console to move here</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">binding.pry</span><br><span class=\"line\">some_method          <span class=\"comment\"># 在此处停止</span></span><br><span class=\"line\">puts <span class=\"string\">'Goodbye World'</span> <span class=\"comment\"># 命令行输入next执行下一步，也可在命令行输入想要查看的变量</span></span><br></pre></td></tr></table></figure>\n<p>参考官方文档</p>\n<p><a href=\"https://github.com/deivid-rodriguez/pry-byebug\" target=\"_blank\" rel=\"noopener\">pry-byebug</a></p>\n"},{"title":"小记","date":"2017-11-12T14:27:40.000Z","_content":"\n#### 莫避春阴上马迟，春来未有不阴时\n\n​       无意中看到这两句诗，想起了很多。想出发就出发吧，不用等到好天气的时候，颇有点“莫听\n\n穿林打叶声，何妨吟啸且徐行”的感觉。\n\n​        想起来以前在宿舍玩LOL，看盖伦跳舞都能看半天，觉得十分有趣。而如今再也没什么能让我\n\n早晨六点起来玩的游戏了，或者说，没什么可以玩时感到很愉快的游戏了。想到此处就略微庆幸\n\n当时玩了这么多时间的LOL，也算是一段开心的回忆了。\n\n​        \n\n\n\n","source":"_posts/小记.md","raw":"---\ntitle: 小记\ndate: 2017-11-12 22:27:40\ntags: \ncategories: 杂记\n---\n\n#### 莫避春阴上马迟，春来未有不阴时\n\n​       无意中看到这两句诗，想起了很多。想出发就出发吧，不用等到好天气的时候，颇有点“莫听\n\n穿林打叶声，何妨吟啸且徐行”的感觉。\n\n​        想起来以前在宿舍玩LOL，看盖伦跳舞都能看半天，觉得十分有趣。而如今再也没什么能让我\n\n早晨六点起来玩的游戏了，或者说，没什么可以玩时感到很愉快的游戏了。想到此处就略微庆幸\n\n当时玩了这么多时间的LOL，也算是一段开心的回忆了。\n\n​        \n\n\n\n","slug":"小记","published":1,"updated":"2018-03-12T15:29:56.913Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq5q004lbcushle9hfoc","content":"<h4 id=\"莫避春阴上马迟，春来未有不阴时\"><a href=\"#莫避春阴上马迟，春来未有不阴时\" class=\"headerlink\" title=\"莫避春阴上马迟，春来未有不阴时\"></a>莫避春阴上马迟，春来未有不阴时</h4><p>​       无意中看到这两句诗，想起了很多。想出发就出发吧，不用等到好天气的时候，颇有点“莫听</p>\n<p>穿林打叶声，何妨吟啸且徐行”的感觉。</p>\n<p>​        想起来以前在宿舍玩LOL，看盖伦跳舞都能看半天，觉得十分有趣。而如今再也没什么能让我</p>\n<p>早晨六点起来玩的游戏了，或者说，没什么可以玩时感到很愉快的游戏了。想到此处就略微庆幸</p>\n<p>当时玩了这么多时间的LOL，也算是一段开心的回忆了。</p>\n<p>​        </p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"莫避春阴上马迟，春来未有不阴时\"><a href=\"#莫避春阴上马迟，春来未有不阴时\" class=\"headerlink\" title=\"莫避春阴上马迟，春来未有不阴时\"></a>莫避春阴上马迟，春来未有不阴时</h4><p>​       无意中看到这两句诗，想起了很多。想出发就出发吧，不用等到好天气的时候，颇有点“莫听</p>\n<p>穿林打叶声，何妨吟啸且徐行”的感觉。</p>\n<p>​        想起来以前在宿舍玩LOL，看盖伦跳舞都能看半天，觉得十分有趣。而如今再也没什么能让我</p>\n<p>早晨六点起来玩的游戏了，或者说，没什么可以玩时感到很愉快的游戏了。想到此处就略微庆幸</p>\n<p>当时玩了这么多时间的LOL，也算是一段开心的回忆了。</p>\n<p>​        </p>\n"},{"title":"常用的git命令","date":"2018-03-19T14:09:44.000Z","_content":"\n设置用户名邮箱\n\n```\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email \"email@example.com\"\n```\n\n提交\n\n```\n#将“当前修改”移动到暂存区(stage)\n# git add .  将当前所有修改添加到暂存区\n$ git add somfile.txt\n#将暂存区修改提交\n$ git commit -m \"Add somfile.txt.\"\n```\n\n状态\n\n```\n$ git status\n$ git diff\n```\n\n远程操作\n\n```\n$ git remote add origin git@github.com:michaelliao/learngit.git\n# 第一次推送，-u(--set-upstream)指定默认上游\n$ git push -u origin master\n$ git push origin master\n```\n\n\n\n拉取远程仓库\n\n```\n$ mkdir git_work\n\n$ cd git_work\n\n$ git init\n\n$ git clone http://myrepo.xxx.com/project/.git \n\n$ cd project\n\n$ git branch -a #列出所有分支名称如下：\n           remotes/origin/dev\n           remotes/origin/release\n\n$ git checkout -b dev origin/dev  在本地新建并切换分支\n```\n\n","source":"_posts/常用的git命令.md","raw":"---\ntitle: 常用的git命令\ndate: 2018-03-19 22:09:44\ntags:\ncategories: tools\n---\n\n设置用户名邮箱\n\n```\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email \"email@example.com\"\n```\n\n提交\n\n```\n#将“当前修改”移动到暂存区(stage)\n# git add .  将当前所有修改添加到暂存区\n$ git add somfile.txt\n#将暂存区修改提交\n$ git commit -m \"Add somfile.txt.\"\n```\n\n状态\n\n```\n$ git status\n$ git diff\n```\n\n远程操作\n\n```\n$ git remote add origin git@github.com:michaelliao/learngit.git\n# 第一次推送，-u(--set-upstream)指定默认上游\n$ git push -u origin master\n$ git push origin master\n```\n\n\n\n拉取远程仓库\n\n```\n$ mkdir git_work\n\n$ cd git_work\n\n$ git init\n\n$ git clone http://myrepo.xxx.com/project/.git \n\n$ cd project\n\n$ git branch -a #列出所有分支名称如下：\n           remotes/origin/dev\n           remotes/origin/release\n\n$ git checkout -b dev origin/dev  在本地新建并切换分支\n```\n\n","slug":"常用的git命令","published":1,"updated":"2018-03-19T14:18:28.966Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq5q004mbcus1vfs1hmo","content":"<p>设置用户名邮箱</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name &quot;Your Name&quot;</span><br><span class=\"line\">$ git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure>\n<p>提交</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#将“当前修改”移动到暂存区(stage)</span><br><span class=\"line\"># git add .  将当前所有修改添加到暂存区</span><br><span class=\"line\">$ git add somfile.txt</span><br><span class=\"line\">#将暂存区修改提交</span><br><span class=\"line\">$ git commit -m &quot;Add somfile.txt.&quot;</span><br></pre></td></tr></table></figure>\n<p>状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">$ git diff</span><br></pre></td></tr></table></figure>\n<p>远程操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin git@github.com:michaelliao/learngit.git</span><br><span class=\"line\"># 第一次推送，-u(--set-upstream)指定默认上游</span><br><span class=\"line\">$ git push -u origin master</span><br><span class=\"line\">$ git push origin master</span><br></pre></td></tr></table></figure>\n<p>拉取远程仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir git_work</span><br><span class=\"line\"></span><br><span class=\"line\">$ cd git_work</span><br><span class=\"line\"></span><br><span class=\"line\">$ git init</span><br><span class=\"line\"></span><br><span class=\"line\">$ git clone http://myrepo.xxx.com/project/.git </span><br><span class=\"line\"></span><br><span class=\"line\">$ cd project</span><br><span class=\"line\"></span><br><span class=\"line\">$ git branch -a #列出所有分支名称如下：</span><br><span class=\"line\">           remotes/origin/dev</span><br><span class=\"line\">           remotes/origin/release</span><br><span class=\"line\"></span><br><span class=\"line\">$ git checkout -b dev origin/dev  在本地新建并切换分支</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>设置用户名邮箱</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name &quot;Your Name&quot;</span><br><span class=\"line\">$ git config --global user.email &quot;email@example.com&quot;</span><br></pre></td></tr></table></figure>\n<p>提交</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#将“当前修改”移动到暂存区(stage)</span><br><span class=\"line\"># git add .  将当前所有修改添加到暂存区</span><br><span class=\"line\">$ git add somfile.txt</span><br><span class=\"line\">#将暂存区修改提交</span><br><span class=\"line\">$ git commit -m &quot;Add somfile.txt.&quot;</span><br></pre></td></tr></table></figure>\n<p>状态</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git status</span><br><span class=\"line\">$ git diff</span><br></pre></td></tr></table></figure>\n<p>远程操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin git@github.com:michaelliao/learngit.git</span><br><span class=\"line\"># 第一次推送，-u(--set-upstream)指定默认上游</span><br><span class=\"line\">$ git push -u origin master</span><br><span class=\"line\">$ git push origin master</span><br></pre></td></tr></table></figure>\n<p>拉取远程仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ mkdir git_work</span><br><span class=\"line\"></span><br><span class=\"line\">$ cd git_work</span><br><span class=\"line\"></span><br><span class=\"line\">$ git init</span><br><span class=\"line\"></span><br><span class=\"line\">$ git clone http://myrepo.xxx.com/project/.git </span><br><span class=\"line\"></span><br><span class=\"line\">$ cd project</span><br><span class=\"line\"></span><br><span class=\"line\">$ git branch -a #列出所有分支名称如下：</span><br><span class=\"line\">           remotes/origin/dev</span><br><span class=\"line\">           remotes/origin/release</span><br><span class=\"line\"></span><br><span class=\"line\">$ git checkout -b dev origin/dev  在本地新建并切换分支</span><br></pre></td></tr></table></figure>\n"},{"title":"换新电脑更新hexo博客过程","date":"2017-11-08T14:42:55.000Z","_content":"\n新电脑下更新hexo博客\n1.安装git\n在[git](https://git-scm.com/)下载并安装git\n\n2.生产SSH密钥\n打开git bash，输入 \n\nssh-keygen -t rsa -C \"youremail@example.com\" \n\n其中youremail@example.com是你自己的邮件地址\n\n然后一直回车。\n\n登陆github，\n\n找到Settings,点击 SSH and GPG keys \n\n然后点击new SSH key\n\nTitle任意\n\nKey内容粘贴公钥id_rsa.pub文件里的内容\n\n点击Add SSH key，输入密码确认完即可\n\n3.克隆自己的库到本地\n\ngit clone git@github.com:capsbon/capsbon.github.io.git\n\n切换分支到hexo\n\ngit checkout hexo\n\n4.安装nodejs\n\n去[nodejs](https://nodejs.org/en/)下载并安装node.js\n\n5.安装hexo，\n\n依次执行\n\nnpm install -g hexo-cli\n\nnpm install hexo-deployer-git –save\n\n因为我的主题[maupassant-hexo](https://github.com/tufu9441/maupassant-hexo)的原因，还需要运行以下命令\n\nnpm install hexo-renderer-jade@0.3.0 --save\n\nnpm install hexo-renderer-sass --save\n\n6.远程部署\n\ngit config --global user.email \"1147274920@qq.com\"\ngit config --global user.name \"capsbon\"\n\n\n执行hexo s -g 启动本地服务，查看效果\n\nhexo d -g 部署到github上\n\n注意！！！\n\nhexo--d部署失败 出现\nfatal: in unpopulated submodule ‘.deploy_git’\n将.deploy_git文件夹删掉重新hexo g;hexo d即可\n\n终极解决办法：\n在所建的hexo分支下新建一个.gitignore文件\n在里面添加.deploy_*\n在上传的时候就会自动忽略deplot_git文件夹\n\nhexo执行命令时总是出现node:9976) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.\n提示信息\n注释掉node_modules\\hexo-fs\\lib\\fs.js中\n第718行exports.SyncWriteStream = fs.SyncWriteStream;就行了","source":"_posts/换新电脑更新hexo博客过程.md","raw":"---\ntitle: 换新电脑更新hexo博客过程\ndate: 2017-11-08 22:42:55\ntags: hexo\n---\n\n新电脑下更新hexo博客\n1.安装git\n在[git](https://git-scm.com/)下载并安装git\n\n2.生产SSH密钥\n打开git bash，输入 \n\nssh-keygen -t rsa -C \"youremail@example.com\" \n\n其中youremail@example.com是你自己的邮件地址\n\n然后一直回车。\n\n登陆github，\n\n找到Settings,点击 SSH and GPG keys \n\n然后点击new SSH key\n\nTitle任意\n\nKey内容粘贴公钥id_rsa.pub文件里的内容\n\n点击Add SSH key，输入密码确认完即可\n\n3.克隆自己的库到本地\n\ngit clone git@github.com:capsbon/capsbon.github.io.git\n\n切换分支到hexo\n\ngit checkout hexo\n\n4.安装nodejs\n\n去[nodejs](https://nodejs.org/en/)下载并安装node.js\n\n5.安装hexo，\n\n依次执行\n\nnpm install -g hexo-cli\n\nnpm install hexo-deployer-git –save\n\n因为我的主题[maupassant-hexo](https://github.com/tufu9441/maupassant-hexo)的原因，还需要运行以下命令\n\nnpm install hexo-renderer-jade@0.3.0 --save\n\nnpm install hexo-renderer-sass --save\n\n6.远程部署\n\ngit config --global user.email \"1147274920@qq.com\"\ngit config --global user.name \"capsbon\"\n\n\n执行hexo s -g 启动本地服务，查看效果\n\nhexo d -g 部署到github上\n\n注意！！！\n\nhexo--d部署失败 出现\nfatal: in unpopulated submodule ‘.deploy_git’\n将.deploy_git文件夹删掉重新hexo g;hexo d即可\n\n终极解决办法：\n在所建的hexo分支下新建一个.gitignore文件\n在里面添加.deploy_*\n在上传的时候就会自动忽略deplot_git文件夹\n\nhexo执行命令时总是出现node:9976) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.\n提示信息\n注释掉node_modules\\hexo-fs\\lib\\fs.js中\n第718行exports.SyncWriteStream = fs.SyncWriteStream;就行了","slug":"换新电脑更新hexo博客过程","published":1,"updated":"2018-03-01T17:20:48.104Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq5q004obcusmqdm0yon","content":"<p>新电脑下更新hexo博客<br>1.安装git<br>在<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">git</a>下载并安装git</p>\n<p>2.生产SSH密钥<br>打开git bash，输入 </p>\n<p>ssh-keygen -t rsa -C “<a href=\"mailto:youremail@example.com\" target=\"_blank\" rel=\"noopener\">youremail@example.com</a>“ </p>\n<p>其中<a href=\"mailto:youremail@example.com\" target=\"_blank\" rel=\"noopener\">youremail@example.com</a>是你自己的邮件地址</p>\n<p>然后一直回车。</p>\n<p>登陆github，</p>\n<p>找到Settings,点击 SSH and GPG keys </p>\n<p>然后点击new SSH key</p>\n<p>Title任意</p>\n<p>Key内容粘贴公钥id_rsa.pub文件里的内容</p>\n<p>点击Add SSH key，输入密码确认完即可</p>\n<p>3.克隆自己的库到本地</p>\n<p>git clone <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:capsbon/capsbon.github.io.git</p>\n<p>切换分支到hexo</p>\n<p>git checkout hexo</p>\n<p>4.安装nodejs</p>\n<p>去<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">nodejs</a>下载并安装node.js</p>\n<p>5.安装hexo，</p>\n<p>依次执行</p>\n<p>npm install -g hexo-cli</p>\n<p>npm install hexo-deployer-git –save</p>\n<p>因为我的主题<a href=\"https://github.com/tufu9441/maupassant-hexo\" target=\"_blank\" rel=\"noopener\">maupassant-hexo</a>的原因，还需要运行以下命令</p>\n<p>npm install <a href=\"mailto:hexo-renderer-jade@0.3.0\" target=\"_blank\" rel=\"noopener\">hexo-renderer-jade@0.3.0</a> –save</p>\n<p>npm install hexo-renderer-sass –save</p>\n<p>6.远程部署</p>\n<p>git config –global user.email “<a href=\"mailto:1147274920@qq.com\" target=\"_blank\" rel=\"noopener\">1147274920@qq.com</a>“<br>git config –global user.name “capsbon”</p>\n<p>执行hexo s -g 启动本地服务，查看效果</p>\n<p>hexo d -g 部署到github上</p>\n<p>注意！！！</p>\n<p>hexo–d部署失败 出现<br>fatal: in unpopulated submodule ‘.deploy_git’<br>将.deploy_git文件夹删掉重新hexo g;hexo d即可</p>\n<p>终极解决办法：<br>在所建的hexo分支下新建一个.gitignore文件<br>在里面添加.deploy_*<br>在上传的时候就会自动忽略deplot_git文件夹</p>\n<p>hexo执行命令时总是出现node:9976) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.<br>提示信息<br>注释掉node_modules\\hexo-fs\\lib\\fs.js中<br>第718行exports.SyncWriteStream = fs.SyncWriteStream;就行了</p>\n","site":{"data":{}},"excerpt":"","more":"<p>新电脑下更新hexo博客<br>1.安装git<br>在<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\">git</a>下载并安装git</p>\n<p>2.生产SSH密钥<br>打开git bash，输入 </p>\n<p>ssh-keygen -t rsa -C “<a href=\"mailto:youremail@example.com\" target=\"_blank\" rel=\"noopener\">youremail@example.com</a>“ </p>\n<p>其中<a href=\"mailto:youremail@example.com\" target=\"_blank\" rel=\"noopener\">youremail@example.com</a>是你自己的邮件地址</p>\n<p>然后一直回车。</p>\n<p>登陆github，</p>\n<p>找到Settings,点击 SSH and GPG keys </p>\n<p>然后点击new SSH key</p>\n<p>Title任意</p>\n<p>Key内容粘贴公钥id_rsa.pub文件里的内容</p>\n<p>点击Add SSH key，输入密码确认完即可</p>\n<p>3.克隆自己的库到本地</p>\n<p>git clone <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:capsbon/capsbon.github.io.git</p>\n<p>切换分支到hexo</p>\n<p>git checkout hexo</p>\n<p>4.安装nodejs</p>\n<p>去<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\">nodejs</a>下载并安装node.js</p>\n<p>5.安装hexo，</p>\n<p>依次执行</p>\n<p>npm install -g hexo-cli</p>\n<p>npm install hexo-deployer-git –save</p>\n<p>因为我的主题<a href=\"https://github.com/tufu9441/maupassant-hexo\" target=\"_blank\" rel=\"noopener\">maupassant-hexo</a>的原因，还需要运行以下命令</p>\n<p>npm install <a href=\"mailto:hexo-renderer-jade@0.3.0\" target=\"_blank\" rel=\"noopener\">hexo-renderer-jade@0.3.0</a> –save</p>\n<p>npm install hexo-renderer-sass –save</p>\n<p>6.远程部署</p>\n<p>git config –global user.email “<a href=\"mailto:1147274920@qq.com\" target=\"_blank\" rel=\"noopener\">1147274920@qq.com</a>“<br>git config –global user.name “capsbon”</p>\n<p>执行hexo s -g 启动本地服务，查看效果</p>\n<p>hexo d -g 部署到github上</p>\n<p>注意！！！</p>\n<p>hexo–d部署失败 出现<br>fatal: in unpopulated submodule ‘.deploy_git’<br>将.deploy_git文件夹删掉重新hexo g;hexo d即可</p>\n<p>终极解决办法：<br>在所建的hexo分支下新建一个.gitignore文件<br>在里面添加.deploy_*<br>在上传的时候就会自动忽略deplot_git文件夹</p>\n<p>hexo执行命令时总是出现node:9976) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.<br>提示信息<br>注释掉node_modules\\hexo-fs\\lib\\fs.js中<br>第718行exports.SyncWriteStream = fs.SyncWriteStream;就行了</p>\n"},{"title":"欧拉计划第一题","date":"2017-09-10T01:53:00.000Z","_content":"\nIf we list all the natural numbers below 10 that are multiples of 3 or 5,\nwe get 3, 5, 6 and 9. The sum of these multiples is 23.\nFind the sum of all the multiples of 3 or 5 below 1000.\n求1000以内内被3和5整除的自然数的和\n\nRuby代码\n\n```Ruby\nclass Euler_2nd\n  def Multiple3and5Sum\n    sum = 0\n    number = 3...1000\n    number.each do |n|\n      sum += n if n%3 ==0 ||n%5 ==0\n    end\n    puts \"The sum is #{sum}\"\n  end\nend\n\nel = Euler_2nd.new\nel.Multiple3and5Sum()\n```\n输出结果:  \n\n```Ruby\nThe sum is 233168\n```\n\n","source":"_posts/欧拉计划第一题.md","raw":"---\ntitle: 欧拉计划第一题\ndate: 2017-09-10 09:53:00\ntags: Euler\ncategories: problems\n---\n\nIf we list all the natural numbers below 10 that are multiples of 3 or 5,\nwe get 3, 5, 6 and 9. The sum of these multiples is 23.\nFind the sum of all the multiples of 3 or 5 below 1000.\n求1000以内内被3和5整除的自然数的和\n\nRuby代码\n\n```Ruby\nclass Euler_2nd\n  def Multiple3and5Sum\n    sum = 0\n    number = 3...1000\n    number.each do |n|\n      sum += n if n%3 ==0 ||n%5 ==0\n    end\n    puts \"The sum is #{sum}\"\n  end\nend\n\nel = Euler_2nd.new\nel.Multiple3and5Sum()\n```\n输出结果:  \n\n```Ruby\nThe sum is 233168\n```\n\n","slug":"欧拉计划第一题","published":1,"updated":"2018-03-01T17:20:48.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq5q004qbcusgzvzveu6","content":"<p>If we list all the natural numbers below 10 that are multiples of 3 or 5,<br>we get 3, 5, 6 and 9. The sum of these multiples is 23.<br>Find the sum of all the multiples of 3 or 5 below 1000.<br>求1000以内内被3和5整除的自然数的和</p>\n<p>Ruby代码</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Euler_2nd</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Multiple3and5Sum</span></span></span><br><span class=\"line\">    sum = <span class=\"number\">0</span></span><br><span class=\"line\">    number = <span class=\"number\">3</span>...<span class=\"number\">1000</span></span><br><span class=\"line\">    number.each <span class=\"keyword\">do</span> <span class=\"params\">|n|</span></span><br><span class=\"line\">      sum += n <span class=\"keyword\">if</span> n%<span class=\"number\">3</span> ==<span class=\"number\">0</span> <span class=\"params\">||</span>n%<span class=\"number\">5</span> ==<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    puts <span class=\"string\">\"The sum is <span class=\"subst\">#&#123;sum&#125;</span>\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">el = Euler_2nd.new</span><br><span class=\"line\">el.Multiple3and5Sum()</span><br></pre></td></tr></table></figure>\n<p>输出结果:  </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The sum is <span class=\"number\">233168</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>If we list all the natural numbers below 10 that are multiples of 3 or 5,<br>we get 3, 5, 6 and 9. The sum of these multiples is 23.<br>Find the sum of all the multiples of 3 or 5 below 1000.<br>求1000以内内被3和5整除的自然数的和</p>\n<p>Ruby代码</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Euler_2nd</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Multiple3and5Sum</span></span></span><br><span class=\"line\">    sum = <span class=\"number\">0</span></span><br><span class=\"line\">    number = <span class=\"number\">3</span>...<span class=\"number\">1000</span></span><br><span class=\"line\">    number.each <span class=\"keyword\">do</span> <span class=\"params\">|n|</span></span><br><span class=\"line\">      sum += n <span class=\"keyword\">if</span> n%<span class=\"number\">3</span> ==<span class=\"number\">0</span> <span class=\"params\">||</span>n%<span class=\"number\">5</span> ==<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    puts <span class=\"string\">\"The sum is <span class=\"subst\">#&#123;sum&#125;</span>\"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">el = Euler_2nd.new</span><br><span class=\"line\">el.Multiple3and5Sum()</span><br></pre></td></tr></table></figure>\n<p>输出结果:  </p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The sum is <span class=\"number\">233168</span></span><br></pre></td></tr></table></figure>\n"},{"title":"欧拉计划第七题","date":"2017-11-17T15:03:55.000Z","_content":"\nBy listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.\n\nWhat is the 10 001st prime number?\n\n题意：求第10001个素数\n\n判断一个数是否为素数，主要看它是否有质因子，比如看12 = 2*6,就不是素数。\n\n这个数的平方根则在两个质因子的中间或者就是平方根本身，按照这个思路遍历自然数即可。\n\n```Python\nfrom itertools import count\nimport math\nimport time\ncountNum =4\nt0 = time.clock()\nfor i in count(11):\n    sqrtNum = int(math.sqrt(i))\n    flag = False\n    for j in range(2,sqrtNum+1):\n        if i%j ==0:\n            flag=True\n    if not flag:\n         countNum+=1\n\n    if countNum==10001:\n        print(time.clock()-t0)\n        print(i)\n        break\n```\n\n最后结果是104743\n\n耗时2.27s","source":"_posts/欧拉计划第七题.md","raw":"---\ntitle: 欧拉计划第七题\ndate: 2017-11-17 23:03:55\ntags: Euler\ncategories: problems\n---\n\nBy listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.\n\nWhat is the 10 001st prime number?\n\n题意：求第10001个素数\n\n判断一个数是否为素数，主要看它是否有质因子，比如看12 = 2*6,就不是素数。\n\n这个数的平方根则在两个质因子的中间或者就是平方根本身，按照这个思路遍历自然数即可。\n\n```Python\nfrom itertools import count\nimport math\nimport time\ncountNum =4\nt0 = time.clock()\nfor i in count(11):\n    sqrtNum = int(math.sqrt(i))\n    flag = False\n    for j in range(2,sqrtNum+1):\n        if i%j ==0:\n            flag=True\n    if not flag:\n         countNum+=1\n\n    if countNum==10001:\n        print(time.clock()-t0)\n        print(i)\n        break\n```\n\n最后结果是104743\n\n耗时2.27s","slug":"欧拉计划第七题","published":1,"updated":"2018-03-01T17:20:48.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq65004sbcusgts8unya","content":"<p>By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.</p>\n<p>What is the 10 001st prime number?</p>\n<p>题意：求第10001个素数</p>\n<p>判断一个数是否为素数，主要看它是否有质因子，比如看12 = 2*6,就不是素数。</p>\n<p>这个数的平方根则在两个质因子的中间或者就是平方根本身，按照这个思路遍历自然数即可。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> count</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">countNum =<span class=\"number\">4</span></span><br><span class=\"line\">t0 = time.clock()</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> count(<span class=\"number\">11</span>):</span><br><span class=\"line\">    sqrtNum = int(math.sqrt(i))</span><br><span class=\"line\">    flag = <span class=\"keyword\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>,sqrtNum+<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i%j ==<span class=\"number\">0</span>:</span><br><span class=\"line\">            flag=<span class=\"keyword\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> flag:</span><br><span class=\"line\">         countNum+=<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> countNum==<span class=\"number\">10001</span>:</span><br><span class=\"line\">        print(time.clock()-t0)</span><br><span class=\"line\">        print(i)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n<p>最后结果是104743</p>\n<p>耗时2.27s</p>\n","site":{"data":{}},"excerpt":"","more":"<p>By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.</p>\n<p>What is the 10 001st prime number?</p>\n<p>题意：求第10001个素数</p>\n<p>判断一个数是否为素数，主要看它是否有质因子，比如看12 = 2*6,就不是素数。</p>\n<p>这个数的平方根则在两个质因子的中间或者就是平方根本身，按照这个思路遍历自然数即可。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> count</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">countNum =<span class=\"number\">4</span></span><br><span class=\"line\">t0 = time.clock()</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> count(<span class=\"number\">11</span>):</span><br><span class=\"line\">    sqrtNum = int(math.sqrt(i))</span><br><span class=\"line\">    flag = <span class=\"keyword\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>,sqrtNum+<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i%j ==<span class=\"number\">0</span>:</span><br><span class=\"line\">            flag=<span class=\"keyword\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> flag:</span><br><span class=\"line\">         countNum+=<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> countNum==<span class=\"number\">10001</span>:</span><br><span class=\"line\">        print(time.clock()-t0)</span><br><span class=\"line\">        print(i)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n<p>最后结果是104743</p>\n<p>耗时2.27s</p>\n"},{"title":"欧拉计划第三题","date":"2017-09-10T16:58:37.000Z","_content":"Euler 3. Largest prime factor\nThe prime factors of 13195 are 5, 7, 13 and 29.\nWhat is the largest prime factor of the number 600851475143 ?\n即是求数字600851475143的最大质因子。\n\nRuby代码:\n```Ruby\nclass Euler_3rd\n  def max_prime(num)\n    a = 2\n    while a < num\n      if num%a ==0\n        num /= a\n      else\n        a +=1\n      end\n    end\n    puts \"the largest prime factor is #{num} \"\n  end\nend\nel = Euler_3rd.new\nel.max_prime(600851475143)\n```\n输出结果\n```Ruby\nthe largest prime factor is 6857 \n```","source":"_posts/欧拉计划第三题.md","raw":"---\ntitle: 欧拉计划第三题\ndate: 2017-09-11 00:58:37\ntags: Euler\ncategories: problems\n---\nEuler 3. Largest prime factor\nThe prime factors of 13195 are 5, 7, 13 and 29.\nWhat is the largest prime factor of the number 600851475143 ?\n即是求数字600851475143的最大质因子。\n\nRuby代码:\n```Ruby\nclass Euler_3rd\n  def max_prime(num)\n    a = 2\n    while a < num\n      if num%a ==0\n        num /= a\n      else\n        a +=1\n      end\n    end\n    puts \"the largest prime factor is #{num} \"\n  end\nend\nel = Euler_3rd.new\nel.max_prime(600851475143)\n```\n输出结果\n```Ruby\nthe largest prime factor is 6857 \n```","slug":"欧拉计划第三题","published":1,"updated":"2018-03-01T17:20:48.107Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq65004vbcus940gbg5j","content":"<p>Euler 3. Largest prime factor<br>The prime factors of 13195 are 5, 7, 13 and 29.<br>What is the largest prime factor of the number 600851475143 ?<br>即是求数字600851475143的最大质因子。</p>\n<p>Ruby代码:<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Euler_3rd</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">max_prime</span><span class=\"params\">(num)</span></span></span><br><span class=\"line\">    a = <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> a &lt; num</span><br><span class=\"line\">      <span class=\"keyword\">if</span> num%a ==<span class=\"number\">0</span></span><br><span class=\"line\">        num /= a</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        a +=<span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    puts <span class=\"string\">\"the largest prime factor is <span class=\"subst\">#&#123;num&#125;</span> \"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">el = Euler_3rd.new</span><br><span class=\"line\">el.max_prime(<span class=\"number\">600851475143</span>)</span><br></pre></td></tr></table></figure></p>\n<p>输出结果<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">the largest prime factor is <span class=\"number\">6857</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Euler 3. Largest prime factor<br>The prime factors of 13195 are 5, 7, 13 and 29.<br>What is the largest prime factor of the number 600851475143 ?<br>即是求数字600851475143的最大质因子。</p>\n<p>Ruby代码:<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Euler_3rd</span></span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">max_prime</span><span class=\"params\">(num)</span></span></span><br><span class=\"line\">    a = <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> a &lt; num</span><br><span class=\"line\">      <span class=\"keyword\">if</span> num%a ==<span class=\"number\">0</span></span><br><span class=\"line\">        num /= a</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        a +=<span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    puts <span class=\"string\">\"the largest prime factor is <span class=\"subst\">#&#123;num&#125;</span> \"</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">el = Euler_3rd.new</span><br><span class=\"line\">el.max_prime(<span class=\"number\">600851475143</span>)</span><br></pre></td></tr></table></figure></p>\n<p>输出结果<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">the largest prime factor is <span class=\"number\">6857</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"欧拉计划第九题","date":"2017-11-18T15:55:30.000Z","_content":"\nA Pythagorean triplet is a set of three natural numbers, a < b < c, for which,\n\na^2 + b^2 = c^2\n\nFor example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.\n\nThere exists exactly one Pythagorean triplet for which a + b + c = 1000.\nFind the product abc.\n\n题意：已知a+ b + c = 1000且a^2 + b^2 = c^2,求a*b*c的值\n\n分析：刚开始最直观的想法是三次循环全部遍历一遍，发现耗时好像超过了一分钟，仔细思考的话可\n\n以发现如果a^2 + b^2 = c^2，其中最小的值一定小于a+ b + c的1/3，中间的值一定小于a+ b + c的一半，简化代码如下：\n\n```Python\nimport math\nimport time\nt0 = time.clock()\nfor i in range(1,334):\n    for j in range(334,500):\n        k=1000-i-j\n        if i*i+j*j==k*k:\n            print(i*j*k)\n            print(time.clock()-t0)\n```\n\n结果abc是31875000\n\n其中a,b,c分别是200，375，425\n\n总结：写代码之前别一上来就写，想清楚规划好再动手","source":"_posts/欧拉计划第九题.md","raw":"---\ntitle: 欧拉计划第九题\ndate: 2017-11-18 23:55:30\ntags: Euler\ncategories: problems\n---\n\nA Pythagorean triplet is a set of three natural numbers, a < b < c, for which,\n\na^2 + b^2 = c^2\n\nFor example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.\n\nThere exists exactly one Pythagorean triplet for which a + b + c = 1000.\nFind the product abc.\n\n题意：已知a+ b + c = 1000且a^2 + b^2 = c^2,求a*b*c的值\n\n分析：刚开始最直观的想法是三次循环全部遍历一遍，发现耗时好像超过了一分钟，仔细思考的话可\n\n以发现如果a^2 + b^2 = c^2，其中最小的值一定小于a+ b + c的1/3，中间的值一定小于a+ b + c的一半，简化代码如下：\n\n```Python\nimport math\nimport time\nt0 = time.clock()\nfor i in range(1,334):\n    for j in range(334,500):\n        k=1000-i-j\n        if i*i+j*j==k*k:\n            print(i*j*k)\n            print(time.clock()-t0)\n```\n\n结果abc是31875000\n\n其中a,b,c分别是200，375，425\n\n总结：写代码之前别一上来就写，想清楚规划好再动手","slug":"欧拉计划第九题","published":1,"updated":"2018-03-01T17:20:48.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq65004wbcusyjate617","content":"<p>A Pythagorean triplet is a set of three natural numbers, a &lt; b &lt; c, for which,</p>\n<p>a^2 + b^2 = c^2</p>\n<p>For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.</p>\n<p>There exists exactly one Pythagorean triplet for which a + b + c = 1000.<br>Find the product abc.</p>\n<p>题意：已知a+ b + c = 1000且a^2 + b^2 = c^2,求a<em>b</em>c的值</p>\n<p>分析：刚开始最直观的想法是三次循环全部遍历一遍，发现耗时好像超过了一分钟，仔细思考的话可</p>\n<p>以发现如果a^2 + b^2 = c^2，其中最小的值一定小于a+ b + c的1/3，中间的值一定小于a+ b + c的一半，简化代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">t0 = time.clock()</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">334</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">334</span>,<span class=\"number\">500</span>):</span><br><span class=\"line\">        k=<span class=\"number\">1000</span>-i-j</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i*i+j*j==k*k:</span><br><span class=\"line\">            print(i*j*k)</span><br><span class=\"line\">            print(time.clock()-t0)</span><br></pre></td></tr></table></figure>\n<p>结果abc是31875000</p>\n<p>其中a,b,c分别是200，375，425</p>\n<p>总结：写代码之前别一上来就写，想清楚规划好再动手</p>\n","site":{"data":{}},"excerpt":"","more":"<p>A Pythagorean triplet is a set of three natural numbers, a &lt; b &lt; c, for which,</p>\n<p>a^2 + b^2 = c^2</p>\n<p>For example, 3^2 + 4^2 = 9 + 16 = 25 = 5^2.</p>\n<p>There exists exactly one Pythagorean triplet for which a + b + c = 1000.<br>Find the product abc.</p>\n<p>题意：已知a+ b + c = 1000且a^2 + b^2 = c^2,求a<em>b</em>c的值</p>\n<p>分析：刚开始最直观的想法是三次循环全部遍历一遍，发现耗时好像超过了一分钟，仔细思考的话可</p>\n<p>以发现如果a^2 + b^2 = c^2，其中最小的值一定小于a+ b + c的1/3，中间的值一定小于a+ b + c的一半，简化代码如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">t0 = time.clock()</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">334</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">334</span>,<span class=\"number\">500</span>):</span><br><span class=\"line\">        k=<span class=\"number\">1000</span>-i-j</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i*i+j*j==k*k:</span><br><span class=\"line\">            print(i*j*k)</span><br><span class=\"line\">            print(time.clock()-t0)</span><br></pre></td></tr></table></figure>\n<p>结果abc是31875000</p>\n<p>其中a,b,c分别是200，375，425</p>\n<p>总结：写代码之前别一上来就写，想清楚规划好再动手</p>\n"},{"title":"欧拉计划第二题","_content":"\nEach new term in the Fibonacci sequence is generated by adding the previous two terms. \nBy starting with 1 and 2, the first 10 terms will be:\n1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\nBy considering the terms in the Fibonacci sequence whose values do not exceed four million,\nfind the sum of the even-valued terms.\n翻译下：就是在斐波那契数列中找到小于4000000的那个数，然后求它之前的所有偶数的和并打印出来\neven-valued terms 偶数\nodd-valued terms 奇数\nRuby代码：\n```Ruby\ndef fabonacci\n  firstNum,secondNum = 0, 1\n  sumNum = 0\n\n  while secondNum < 4000000\n    firstNum, secondNum = secondNum, firstNum + secondNum\n\n    sumNum += secondNum if secondNum % 2 ==0\n  end\n  puts \"The sum of all even-valued is #{sumNum}\"\nend\nfabonacci()\n```\n输出结果：\n```Ruby\nThe sum of all even-valued is 4613732\n```\n","source":"_posts/欧拉计划第二题.md","raw":"---\ntitle: 欧拉计划第二题\ntags: Euler\ncategories: problems\n---\n\nEach new term in the Fibonacci sequence is generated by adding the previous two terms. \nBy starting with 1 and 2, the first 10 terms will be:\n1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\nBy considering the terms in the Fibonacci sequence whose values do not exceed four million,\nfind the sum of the even-valued terms.\n翻译下：就是在斐波那契数列中找到小于4000000的那个数，然后求它之前的所有偶数的和并打印出来\neven-valued terms 偶数\nodd-valued terms 奇数\nRuby代码：\n```Ruby\ndef fabonacci\n  firstNum,secondNum = 0, 1\n  sumNum = 0\n\n  while secondNum < 4000000\n    firstNum, secondNum = secondNum, firstNum + secondNum\n\n    sumNum += secondNum if secondNum % 2 ==0\n  end\n  puts \"The sum of all even-valued is #{sumNum}\"\nend\nfabonacci()\n```\n输出结果：\n```Ruby\nThe sum of all even-valued is 4613732\n```\n","slug":"欧拉计划第二题","published":1,"date":"2018-05-04T08:51:05.168Z","updated":"2018-03-01T17:20:48.137Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq65004ybcusq8qo0n95","content":"<p>Each new term in the Fibonacci sequence is generated by adding the previous two terms.<br>By starting with 1 and 2, the first 10 terms will be:<br>1, 2, 3, 5, 8, 13, 21, 34, 55, 89, …<br>By considering the terms in the Fibonacci sequence whose values do not exceed four million,<br>find the sum of the even-valued terms.<br>翻译下：就是在斐波那契数列中找到小于4000000的那个数，然后求它之前的所有偶数的和并打印出来<br>even-valued terms 偶数<br>odd-valued terms 奇数<br>Ruby代码：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fabonacci</span></span></span><br><span class=\"line\">  firstNum,secondNum = <span class=\"number\">0</span>, <span class=\"number\">1</span></span><br><span class=\"line\">  sumNum = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> secondNum &lt; <span class=\"number\">4000000</span></span><br><span class=\"line\">    firstNum, secondNum = secondNum, firstNum + secondNum</span><br><span class=\"line\"></span><br><span class=\"line\">    sumNum += secondNum <span class=\"keyword\">if</span> secondNum % <span class=\"number\">2</span> ==<span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">  puts <span class=\"string\">\"The sum of all even-valued is <span class=\"subst\">#&#123;sumNum&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">fabonacci()</span><br></pre></td></tr></table></figure></p>\n<p>输出结果：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The sum of all even-valued is <span class=\"number\">4613732</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Each new term in the Fibonacci sequence is generated by adding the previous two terms.<br>By starting with 1 and 2, the first 10 terms will be:<br>1, 2, 3, 5, 8, 13, 21, 34, 55, 89, …<br>By considering the terms in the Fibonacci sequence whose values do not exceed four million,<br>find the sum of the even-valued terms.<br>翻译下：就是在斐波那契数列中找到小于4000000的那个数，然后求它之前的所有偶数的和并打印出来<br>even-valued terms 偶数<br>odd-valued terms 奇数<br>Ruby代码：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">fabonacci</span></span></span><br><span class=\"line\">  firstNum,secondNum = <span class=\"number\">0</span>, <span class=\"number\">1</span></span><br><span class=\"line\">  sumNum = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> secondNum &lt; <span class=\"number\">4000000</span></span><br><span class=\"line\">    firstNum, secondNum = secondNum, firstNum + secondNum</span><br><span class=\"line\"></span><br><span class=\"line\">    sumNum += secondNum <span class=\"keyword\">if</span> secondNum % <span class=\"number\">2</span> ==<span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\">  puts <span class=\"string\">\"The sum of all even-valued is <span class=\"subst\">#&#123;sumNum&#125;</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">fabonacci()</span><br></pre></td></tr></table></figure></p>\n<p>输出结果：<br><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The sum of all even-valued is <span class=\"number\">4613732</span></span><br></pre></td></tr></table></figure></p>\n"},{"title":"欧拉计划第五题","date":"2017-11-14T14:09:29.000Z","_content":"\n2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.\n\nWhat is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?\n\n简单来说，就是求1到20的最小公倍数\n\n解答：\n\n'''\n\n```Python\nfrom functools import reduce\n# 求两个数的最小公倍数\ndef lcm(m,n):\n    if m>n:\n        m,n=n,m\n    r=1\n    tiple = m*n\n    while r!=0:\n        r = n%m\n        n = m\n        m = r\n    lcmNum = tiple/n\n    return lcmNum\nprint(reduce(lcm,[11,12,13,14,15,16,17,18,19,20]))\n```\n\n'''\n\n答案是232792560.0\n\n","source":"_posts/欧拉计划第五题.md","raw":"---\ntitle: 欧拉计划第五题\ndate: 2017-11-14 22:09:29\ntags: Euler\ncategories: problems\n---\n\n2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.\n\nWhat is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?\n\n简单来说，就是求1到20的最小公倍数\n\n解答：\n\n'''\n\n```Python\nfrom functools import reduce\n# 求两个数的最小公倍数\ndef lcm(m,n):\n    if m>n:\n        m,n=n,m\n    r=1\n    tiple = m*n\n    while r!=0:\n        r = n%m\n        n = m\n        m = r\n    lcmNum = tiple/n\n    return lcmNum\nprint(reduce(lcm,[11,12,13,14,15,16,17,18,19,20]))\n```\n\n'''\n\n答案是232792560.0\n\n","slug":"欧拉计划第五题","published":1,"updated":"2018-03-01T17:20:48.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq650052bcus1klvm2mn","content":"<p>2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.</p>\n<p>What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?</p>\n<p>简单来说，就是求1到20的最小公倍数</p>\n<p>解答：</p>\n<p>‘’’</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> reduce</span><br><span class=\"line\"><span class=\"comment\"># 求两个数的最小公倍数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">lcm</span><span class=\"params\">(m,n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> m&gt;n:</span><br><span class=\"line\">        m,n=n,m</span><br><span class=\"line\">    r=<span class=\"number\">1</span></span><br><span class=\"line\">    tiple = m*n</span><br><span class=\"line\">    <span class=\"keyword\">while</span> r!=<span class=\"number\">0</span>:</span><br><span class=\"line\">        r = n%m</span><br><span class=\"line\">        n = m</span><br><span class=\"line\">        m = r</span><br><span class=\"line\">    lcmNum = tiple/n</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lcmNum</span><br><span class=\"line\">print(reduce(lcm,[<span class=\"number\">11</span>,<span class=\"number\">12</span>,<span class=\"number\">13</span>,<span class=\"number\">14</span>,<span class=\"number\">15</span>,<span class=\"number\">16</span>,<span class=\"number\">17</span>,<span class=\"number\">18</span>,<span class=\"number\">19</span>,<span class=\"number\">20</span>]))</span><br></pre></td></tr></table></figure>\n<p>‘’’</p>\n<p>答案是232792560.0</p>\n","site":{"data":{}},"excerpt":"","more":"<p>2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.</p>\n<p>What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?</p>\n<p>简单来说，就是求1到20的最小公倍数</p>\n<p>解答：</p>\n<p>‘’’</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> reduce</span><br><span class=\"line\"><span class=\"comment\"># 求两个数的最小公倍数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">lcm</span><span class=\"params\">(m,n)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> m&gt;n:</span><br><span class=\"line\">        m,n=n,m</span><br><span class=\"line\">    r=<span class=\"number\">1</span></span><br><span class=\"line\">    tiple = m*n</span><br><span class=\"line\">    <span class=\"keyword\">while</span> r!=<span class=\"number\">0</span>:</span><br><span class=\"line\">        r = n%m</span><br><span class=\"line\">        n = m</span><br><span class=\"line\">        m = r</span><br><span class=\"line\">    lcmNum = tiple/n</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lcmNum</span><br><span class=\"line\">print(reduce(lcm,[<span class=\"number\">11</span>,<span class=\"number\">12</span>,<span class=\"number\">13</span>,<span class=\"number\">14</span>,<span class=\"number\">15</span>,<span class=\"number\">16</span>,<span class=\"number\">17</span>,<span class=\"number\">18</span>,<span class=\"number\">19</span>,<span class=\"number\">20</span>]))</span><br></pre></td></tr></table></figure>\n<p>‘’’</p>\n<p>答案是232792560.0</p>\n"},{"title":"欧拉计划第六题","date":"2017-11-18T12:06:08.000Z","_content":"\nThe sum of the squares of the first ten natural numbers is,\n\n12 + 22 + ... + 102 = 385\n\nThe square of the sum of the first ten natural numbers is,\n\n(1 + 2 + ... + 10)2 = 552 = 3025\n\nHence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.\n\nFind the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.\n\n这题比较简单，就直接放代码了\n\n```Python\ndef euler6():\n    sumSquare =0\n    squareSum=0\n    for i in range(1,101):\n        sumSquare+=i*i\n        squareSum+=i\n\n    squareSum = squareSum*squareSum\n    difference = squareSum - sumSquare\n    print(difference)\neuler6()\n```\n\n答案是25164150","source":"_posts/欧拉计划第六题.md","raw":"---\ntitle: 欧拉计划第六题\ndate: 2017-11-18 20:06:08\ntags: Euler\ncategories: problems\n---\n\nThe sum of the squares of the first ten natural numbers is,\n\n12 + 22 + ... + 102 = 385\n\nThe square of the sum of the first ten natural numbers is,\n\n(1 + 2 + ... + 10)2 = 552 = 3025\n\nHence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.\n\nFind the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.\n\n这题比较简单，就直接放代码了\n\n```Python\ndef euler6():\n    sumSquare =0\n    squareSum=0\n    for i in range(1,101):\n        sumSquare+=i*i\n        squareSum+=i\n\n    squareSum = squareSum*squareSum\n    difference = squareSum - sumSquare\n    print(difference)\neuler6()\n```\n\n答案是25164150","slug":"欧拉计划第六题","published":1,"updated":"2018-03-01T17:20:48.152Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq650055bcusb5sq14uo","content":"<p>The sum of the squares of the first ten natural numbers is,</p>\n<p>12 + 22 + … + 102 = 385</p>\n<p>The square of the sum of the first ten natural numbers is,</p>\n<p>(1 + 2 + … + 10)2 = 552 = 3025</p>\n<p>Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.</p>\n<p>Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.</p>\n<p>这题比较简单，就直接放代码了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">euler6</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    sumSquare =<span class=\"number\">0</span></span><br><span class=\"line\">    squareSum=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">101</span>):</span><br><span class=\"line\">        sumSquare+=i*i</span><br><span class=\"line\">        squareSum+=i</span><br><span class=\"line\"></span><br><span class=\"line\">    squareSum = squareSum*squareSum</span><br><span class=\"line\">    difference = squareSum - sumSquare</span><br><span class=\"line\">    print(difference)</span><br><span class=\"line\">euler6()</span><br></pre></td></tr></table></figure>\n<p>答案是25164150</p>\n","site":{"data":{}},"excerpt":"","more":"<p>The sum of the squares of the first ten natural numbers is,</p>\n<p>12 + 22 + … + 102 = 385</p>\n<p>The square of the sum of the first ten natural numbers is,</p>\n<p>(1 + 2 + … + 10)2 = 552 = 3025</p>\n<p>Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.</p>\n<p>Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.</p>\n<p>这题比较简单，就直接放代码了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">euler6</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    sumSquare =<span class=\"number\">0</span></span><br><span class=\"line\">    squareSum=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">101</span>):</span><br><span class=\"line\">        sumSquare+=i*i</span><br><span class=\"line\">        squareSum+=i</span><br><span class=\"line\"></span><br><span class=\"line\">    squareSum = squareSum*squareSum</span><br><span class=\"line\">    difference = squareSum - sumSquare</span><br><span class=\"line\">    print(difference)</span><br><span class=\"line\">euler6()</span><br></pre></td></tr></table></figure>\n<p>答案是25164150</p>\n"},{"title":"欧拉计划第十一题","date":"2017-11-20T11:39:21.000Z","_content":"\nLargest product in a grid\n\nIn the 20×20 grid below, four numbers along a diagonal line have been marked in red.\n\n08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\n49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00\n81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65\n52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91\n22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80\n24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50\n32 98 81 28 64 23 67 10 **26** 38 40 67 59 54 70 66 18 38 64 70\n67 26 20 68 02 62 12 20 95 **63** 94 39 63 08 40 91 66 49 94 21\n24 55 58 05 66 73 99 26 97 17 **78** 78 96 83 14 88 34 89 63 72\n21 36 23 09 75 00 76 44 20 45 35 **14** 00 61 33 97 34 31 33 95\n78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92\n16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57\n86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58\n19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40\n04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66\n88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69\n04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36\n20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16\n20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54\n01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48\n\nThe product of these numbers is 26 × 63 × 78 × 14 = 1788696.\n\nWhat is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?\n\n题意：求相邻上下左右及对角线四个数的乘积的最大值\n\n分析：先将给出的数据放到txt文件中，读取后放到一个二维数组中，\n\n再分别计算每个数的上，下，左对角线，右对角线的四个数的乘积，比较大小后找出最大的值\n\n```Python\nimport time\nt0 = time.clock()\nf = open('euler11.txt')\nb=[]\na = f.read().splitlines()\n#print(a)\nfor i in a:\n    j =i.split()\n    b.append(j)\n#print(b)\nc=[]\nfor i in range(0,17):\n    for j in range(0,17):\n        up = int(b[i][j])*int(b[i][j+1])*int(b[i][j+2])*int(b[i][j+3])\n        down = int(b[i][j])*int(b[i+1][j])*int(b[i+2][j])*int(b[i+3][j])\n        diagonal = int(b[i][j])*int(b[i+1][j+1])*int(b[i+2][j+2])*int(b[i+3][j+3])\n        diagonal2 = int(b[i][j+3])*int(b[i+1][j+2])*int(b[i+2][j+1])*int(b[i+3][j])\n        c.append(max(up,down,diagonal,diagonal2))\nc.sort()\nprint(c[-1])\nprint(time.clock()-t0)\n```\n\n结果为70600674\n\n注意：刚开始没注意题意，只计算了上下及右对角线的值，算出结果有误，把左对角线加上后计算出正确结果","source":"_posts/欧拉计划第十一题.md","raw":"---\ntitle: 欧拉计划第十一题\ndate: 2017-11-20 19:39:21\ntags: Euler\ncategories: problems\n---\n\nLargest product in a grid\n\nIn the 20×20 grid below, four numbers along a diagonal line have been marked in red.\n\n08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08\n49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00\n81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65\n52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91\n22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80\n24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50\n32 98 81 28 64 23 67 10 **26** 38 40 67 59 54 70 66 18 38 64 70\n67 26 20 68 02 62 12 20 95 **63** 94 39 63 08 40 91 66 49 94 21\n24 55 58 05 66 73 99 26 97 17 **78** 78 96 83 14 88 34 89 63 72\n21 36 23 09 75 00 76 44 20 45 35 **14** 00 61 33 97 34 31 33 95\n78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92\n16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57\n86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58\n19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40\n04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66\n88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69\n04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36\n20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16\n20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54\n01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48\n\nThe product of these numbers is 26 × 63 × 78 × 14 = 1788696.\n\nWhat is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?\n\n题意：求相邻上下左右及对角线四个数的乘积的最大值\n\n分析：先将给出的数据放到txt文件中，读取后放到一个二维数组中，\n\n再分别计算每个数的上，下，左对角线，右对角线的四个数的乘积，比较大小后找出最大的值\n\n```Python\nimport time\nt0 = time.clock()\nf = open('euler11.txt')\nb=[]\na = f.read().splitlines()\n#print(a)\nfor i in a:\n    j =i.split()\n    b.append(j)\n#print(b)\nc=[]\nfor i in range(0,17):\n    for j in range(0,17):\n        up = int(b[i][j])*int(b[i][j+1])*int(b[i][j+2])*int(b[i][j+3])\n        down = int(b[i][j])*int(b[i+1][j])*int(b[i+2][j])*int(b[i+3][j])\n        diagonal = int(b[i][j])*int(b[i+1][j+1])*int(b[i+2][j+2])*int(b[i+3][j+3])\n        diagonal2 = int(b[i][j+3])*int(b[i+1][j+2])*int(b[i+2][j+1])*int(b[i+3][j])\n        c.append(max(up,down,diagonal,diagonal2))\nc.sort()\nprint(c[-1])\nprint(time.clock()-t0)\n```\n\n结果为70600674\n\n注意：刚开始没注意题意，只计算了上下及右对角线的值，算出结果有误，把左对角线加上后计算出正确结果","slug":"欧拉计划第十一题","published":1,"updated":"2018-03-01T17:20:48.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq650059bcus2wjib5wy","content":"<p>Largest product in a grid</p>\n<p>In the 20×20 grid below, four numbers along a diagonal line have been marked in red.</p>\n<p>08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08<br>49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00<br>81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65<br>52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91<br>22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80<br>24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50<br>32 98 81 28 64 23 67 10 <strong>26</strong> 38 40 67 59 54 70 66 18 38 64 70<br>67 26 20 68 02 62 12 20 95 <strong>63</strong> 94 39 63 08 40 91 66 49 94 21<br>24 55 58 05 66 73 99 26 97 17 <strong>78</strong> 78 96 83 14 88 34 89 63 72<br>21 36 23 09 75 00 76 44 20 45 35 <strong>14</strong> 00 61 33 97 34 31 33 95<br>78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92<br>16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57<br>86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58<br>19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40<br>04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66<br>88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69<br>04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36<br>20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16<br>20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54<br>01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48</p>\n<p>The product of these numbers is 26 × 63 × 78 × 14 = 1788696.</p>\n<p>What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?</p>\n<p>题意：求相邻上下左右及对角线四个数的乘积的最大值</p>\n<p>分析：先将给出的数据放到txt文件中，读取后放到一个二维数组中，</p>\n<p>再分别计算每个数的上，下，左对角线，右对角线的四个数的乘积，比较大小后找出最大的值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">t0 = time.clock()</span><br><span class=\"line\">f = open(<span class=\"string\">'euler11.txt'</span>)</span><br><span class=\"line\">b=[]</span><br><span class=\"line\">a = f.read().splitlines()</span><br><span class=\"line\"><span class=\"comment\">#print(a)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> a:</span><br><span class=\"line\">    j =i.split()</span><br><span class=\"line\">    b.append(j)</span><br><span class=\"line\"><span class=\"comment\">#print(b)</span></span><br><span class=\"line\">c=[]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,<span class=\"number\">17</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,<span class=\"number\">17</span>):</span><br><span class=\"line\">        up = int(b[i][j])*int(b[i][j+<span class=\"number\">1</span>])*int(b[i][j+<span class=\"number\">2</span>])*int(b[i][j+<span class=\"number\">3</span>])</span><br><span class=\"line\">        down = int(b[i][j])*int(b[i+<span class=\"number\">1</span>][j])*int(b[i+<span class=\"number\">2</span>][j])*int(b[i+<span class=\"number\">3</span>][j])</span><br><span class=\"line\">        diagonal = int(b[i][j])*int(b[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>])*int(b[i+<span class=\"number\">2</span>][j+<span class=\"number\">2</span>])*int(b[i+<span class=\"number\">3</span>][j+<span class=\"number\">3</span>])</span><br><span class=\"line\">        diagonal2 = int(b[i][j+<span class=\"number\">3</span>])*int(b[i+<span class=\"number\">1</span>][j+<span class=\"number\">2</span>])*int(b[i+<span class=\"number\">2</span>][j+<span class=\"number\">1</span>])*int(b[i+<span class=\"number\">3</span>][j])</span><br><span class=\"line\">        c.append(max(up,down,diagonal,diagonal2))</span><br><span class=\"line\">c.sort()</span><br><span class=\"line\">print(c[<span class=\"number\">-1</span>])</span><br><span class=\"line\">print(time.clock()-t0)</span><br></pre></td></tr></table></figure>\n<p>结果为70600674</p>\n<p>注意：刚开始没注意题意，只计算了上下及右对角线的值，算出结果有误，把左对角线加上后计算出正确结果</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Largest product in a grid</p>\n<p>In the 20×20 grid below, four numbers along a diagonal line have been marked in red.</p>\n<p>08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08<br>49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00<br>81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65<br>52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91<br>22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80<br>24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50<br>32 98 81 28 64 23 67 10 <strong>26</strong> 38 40 67 59 54 70 66 18 38 64 70<br>67 26 20 68 02 62 12 20 95 <strong>63</strong> 94 39 63 08 40 91 66 49 94 21<br>24 55 58 05 66 73 99 26 97 17 <strong>78</strong> 78 96 83 14 88 34 89 63 72<br>21 36 23 09 75 00 76 44 20 45 35 <strong>14</strong> 00 61 33 97 34 31 33 95<br>78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92<br>16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57<br>86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58<br>19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40<br>04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66<br>88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69<br>04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36<br>20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16<br>20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54<br>01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48</p>\n<p>The product of these numbers is 26 × 63 × 78 × 14 = 1788696.</p>\n<p>What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?</p>\n<p>题意：求相邻上下左右及对角线四个数的乘积的最大值</p>\n<p>分析：先将给出的数据放到txt文件中，读取后放到一个二维数组中，</p>\n<p>再分别计算每个数的上，下，左对角线，右对角线的四个数的乘积，比较大小后找出最大的值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">t0 = time.clock()</span><br><span class=\"line\">f = open(<span class=\"string\">'euler11.txt'</span>)</span><br><span class=\"line\">b=[]</span><br><span class=\"line\">a = f.read().splitlines()</span><br><span class=\"line\"><span class=\"comment\">#print(a)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> a:</span><br><span class=\"line\">    j =i.split()</span><br><span class=\"line\">    b.append(j)</span><br><span class=\"line\"><span class=\"comment\">#print(b)</span></span><br><span class=\"line\">c=[]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,<span class=\"number\">17</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,<span class=\"number\">17</span>):</span><br><span class=\"line\">        up = int(b[i][j])*int(b[i][j+<span class=\"number\">1</span>])*int(b[i][j+<span class=\"number\">2</span>])*int(b[i][j+<span class=\"number\">3</span>])</span><br><span class=\"line\">        down = int(b[i][j])*int(b[i+<span class=\"number\">1</span>][j])*int(b[i+<span class=\"number\">2</span>][j])*int(b[i+<span class=\"number\">3</span>][j])</span><br><span class=\"line\">        diagonal = int(b[i][j])*int(b[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>])*int(b[i+<span class=\"number\">2</span>][j+<span class=\"number\">2</span>])*int(b[i+<span class=\"number\">3</span>][j+<span class=\"number\">3</span>])</span><br><span class=\"line\">        diagonal2 = int(b[i][j+<span class=\"number\">3</span>])*int(b[i+<span class=\"number\">1</span>][j+<span class=\"number\">2</span>])*int(b[i+<span class=\"number\">2</span>][j+<span class=\"number\">1</span>])*int(b[i+<span class=\"number\">3</span>][j])</span><br><span class=\"line\">        c.append(max(up,down,diagonal,diagonal2))</span><br><span class=\"line\">c.sort()</span><br><span class=\"line\">print(c[<span class=\"number\">-1</span>])</span><br><span class=\"line\">print(time.clock()-t0)</span><br></pre></td></tr></table></figure>\n<p>结果为70600674</p>\n<p>注意：刚开始没注意题意，只计算了上下及右对角线的值，算出结果有误，把左对角线加上后计算出正确结果</p>\n"},{"title":"欧拉计划第八题","date":"2017-11-18T06:34:10.000Z","_content":"\nThe four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.\n\n73167176531330624919225119674426574742355349194934\n96983520312774506326239578318016984801869478851843\n85861560789112949495459501737958331952853208805511\n12540698747158523863050715693290963295227443043557\n66896648950445244523161731856403098711121722383113\n62229893423380308135336276614282806444486645238749\n30358907296290491560440772390713810515859307960866\n70172427121883998797908792274921901699720888093776\n65727333001053367881220235421809751254540594752243\n52584907711670556013604839586446706324415722155397\n53697817977846174064955149290862569321978468622482\n83972241375657056057490261407972968652414535100474\n82166370484403199890008895243450658541227588666881\n16427171479924442928230863465674813919123162824586\n17866458359124566529476545682848912883142607690042\n24219022671055626321111109370544217506941658960408\n07198403850962455444362981230987879927244284909188\n84580156166097919133875499200524063689912560717606\n05886116467109405077541002256983155200055935729725\n71636269561882670428252483600823257530420752963450\n\nFind the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?\n\n题意：求出以上数字中相邻13个数成绩乘积的最大值\n\n\n\n分析：刚开始我是把这些数字放到一个txt文件里，然后读取它，再转化成int型放在列表里，把每个相邻13项的乘积算出来找出最大的那个；后来发现Python中多行字符可以用三个双引号表示。\n\n解答如下，注释是我刚开始的做法，两样都可以，没什么差别。\n\n```Python\nfrom functools import reduce\n# f=open(r'euler8.txt')\n# a=f.read()\n# f.close()\n# a=a.replace('\\n', '')\na = \"\"\"73167176531330624919225119674426574742355349194934\n96983520312774506326239578318016984801869478851843\n85861560789112949495459501737958331952853208805511\n12540698747158523863050715693290963295227443043557\n66896648950445244523161731856403098711121722383113\n62229893423380308135336276614282806444486645238749\n30358907296290491560440772390713810515859307960866\n70172427121883998797908792274921901699720888093776\n65727333001053367881220235421809751254540594752243\n52584907711670556013604839586446706324415722155397\n53697817977846174064955149290862569321978468622482\n83972241375657056057490261407972968652414535100474\n82166370484403199890008895243450658541227588666881\n16427171479924442928230863465674813919123162824586\n17866458359124566529476545682848912883142607690042\n24219022671055626321111109370544217506941658960408\n07198403850962455444362981230987879927244284909188\n84580156166097919133875499200524063689912560717606\n05886116467109405077541002256983155200055935729725\n71636269561882670428252483600823257530420752963450\"\"\"\na=a.replace('\\n', '')\nlista = list(a)\nintLista = list(map(lambda x:int(x),lista))\nb=[]\nfor i in  range(0,988):\n    j = reduce(lambda a,b:a*b,intLista[i:i+13])\n    b.append(j)\nb.sort()\nprint(b[-1])\n\n```\n\n算出来答案是23514624000","source":"_posts/欧拉计划第八题.md","raw":"---\ntitle: 欧拉计划第八题\ndate: 2017-11-18 14:34:10\ntags: Euler\ncategories: problems\n---\n\nThe four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.\n\n73167176531330624919225119674426574742355349194934\n96983520312774506326239578318016984801869478851843\n85861560789112949495459501737958331952853208805511\n12540698747158523863050715693290963295227443043557\n66896648950445244523161731856403098711121722383113\n62229893423380308135336276614282806444486645238749\n30358907296290491560440772390713810515859307960866\n70172427121883998797908792274921901699720888093776\n65727333001053367881220235421809751254540594752243\n52584907711670556013604839586446706324415722155397\n53697817977846174064955149290862569321978468622482\n83972241375657056057490261407972968652414535100474\n82166370484403199890008895243450658541227588666881\n16427171479924442928230863465674813919123162824586\n17866458359124566529476545682848912883142607690042\n24219022671055626321111109370544217506941658960408\n07198403850962455444362981230987879927244284909188\n84580156166097919133875499200524063689912560717606\n05886116467109405077541002256983155200055935729725\n71636269561882670428252483600823257530420752963450\n\nFind the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?\n\n题意：求出以上数字中相邻13个数成绩乘积的最大值\n\n\n\n分析：刚开始我是把这些数字放到一个txt文件里，然后读取它，再转化成int型放在列表里，把每个相邻13项的乘积算出来找出最大的那个；后来发现Python中多行字符可以用三个双引号表示。\n\n解答如下，注释是我刚开始的做法，两样都可以，没什么差别。\n\n```Python\nfrom functools import reduce\n# f=open(r'euler8.txt')\n# a=f.read()\n# f.close()\n# a=a.replace('\\n', '')\na = \"\"\"73167176531330624919225119674426574742355349194934\n96983520312774506326239578318016984801869478851843\n85861560789112949495459501737958331952853208805511\n12540698747158523863050715693290963295227443043557\n66896648950445244523161731856403098711121722383113\n62229893423380308135336276614282806444486645238749\n30358907296290491560440772390713810515859307960866\n70172427121883998797908792274921901699720888093776\n65727333001053367881220235421809751254540594752243\n52584907711670556013604839586446706324415722155397\n53697817977846174064955149290862569321978468622482\n83972241375657056057490261407972968652414535100474\n82166370484403199890008895243450658541227588666881\n16427171479924442928230863465674813919123162824586\n17866458359124566529476545682848912883142607690042\n24219022671055626321111109370544217506941658960408\n07198403850962455444362981230987879927244284909188\n84580156166097919133875499200524063689912560717606\n05886116467109405077541002256983155200055935729725\n71636269561882670428252483600823257530420752963450\"\"\"\na=a.replace('\\n', '')\nlista = list(a)\nintLista = list(map(lambda x:int(x),lista))\nb=[]\nfor i in  range(0,988):\n    j = reduce(lambda a,b:a*b,intLista[i:i+13])\n    b.append(j)\nb.sort()\nprint(b[-1])\n\n```\n\n算出来答案是23514624000","slug":"欧拉计划第八题","published":1,"updated":"2018-03-01T17:20:48.152Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq65005cbcusmf9orbsa","content":"<p>The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.</p>\n<p>73167176531330624919225119674426574742355349194934<br>96983520312774506326239578318016984801869478851843<br>85861560789112949495459501737958331952853208805511<br>12540698747158523863050715693290963295227443043557<br>66896648950445244523161731856403098711121722383113<br>62229893423380308135336276614282806444486645238749<br>30358907296290491560440772390713810515859307960866<br>70172427121883998797908792274921901699720888093776<br>65727333001053367881220235421809751254540594752243<br>52584907711670556013604839586446706324415722155397<br>53697817977846174064955149290862569321978468622482<br>83972241375657056057490261407972968652414535100474<br>82166370484403199890008895243450658541227588666881<br>16427171479924442928230863465674813919123162824586<br>17866458359124566529476545682848912883142607690042<br>24219022671055626321111109370544217506941658960408<br>07198403850962455444362981230987879927244284909188<br>84580156166097919133875499200524063689912560717606<br>05886116467109405077541002256983155200055935729725<br>71636269561882670428252483600823257530420752963450</p>\n<p>Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?</p>\n<p>题意：求出以上数字中相邻13个数成绩乘积的最大值</p>\n<p>分析：刚开始我是把这些数字放到一个txt文件里，然后读取它，再转化成int型放在列表里，把每个相邻13项的乘积算出来找出最大的那个；后来发现Python中多行字符可以用三个双引号表示。</p>\n<p>解答如下，注释是我刚开始的做法，两样都可以，没什么差别。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> reduce</span><br><span class=\"line\"><span class=\"comment\"># f=open(r'euler8.txt')</span></span><br><span class=\"line\"><span class=\"comment\"># a=f.read()</span></span><br><span class=\"line\"><span class=\"comment\"># f.close()</span></span><br><span class=\"line\"><span class=\"comment\"># a=a.replace('\\n', '')</span></span><br><span class=\"line\">a = <span class=\"string\">\"\"\"73167176531330624919225119674426574742355349194934</span></span><br><span class=\"line\"><span class=\"string\">96983520312774506326239578318016984801869478851843</span></span><br><span class=\"line\"><span class=\"string\">85861560789112949495459501737958331952853208805511</span></span><br><span class=\"line\"><span class=\"string\">12540698747158523863050715693290963295227443043557</span></span><br><span class=\"line\"><span class=\"string\">66896648950445244523161731856403098711121722383113</span></span><br><span class=\"line\"><span class=\"string\">62229893423380308135336276614282806444486645238749</span></span><br><span class=\"line\"><span class=\"string\">30358907296290491560440772390713810515859307960866</span></span><br><span class=\"line\"><span class=\"string\">70172427121883998797908792274921901699720888093776</span></span><br><span class=\"line\"><span class=\"string\">65727333001053367881220235421809751254540594752243</span></span><br><span class=\"line\"><span class=\"string\">52584907711670556013604839586446706324415722155397</span></span><br><span class=\"line\"><span class=\"string\">53697817977846174064955149290862569321978468622482</span></span><br><span class=\"line\"><span class=\"string\">83972241375657056057490261407972968652414535100474</span></span><br><span class=\"line\"><span class=\"string\">82166370484403199890008895243450658541227588666881</span></span><br><span class=\"line\"><span class=\"string\">16427171479924442928230863465674813919123162824586</span></span><br><span class=\"line\"><span class=\"string\">17866458359124566529476545682848912883142607690042</span></span><br><span class=\"line\"><span class=\"string\">24219022671055626321111109370544217506941658960408</span></span><br><span class=\"line\"><span class=\"string\">07198403850962455444362981230987879927244284909188</span></span><br><span class=\"line\"><span class=\"string\">84580156166097919133875499200524063689912560717606</span></span><br><span class=\"line\"><span class=\"string\">05886116467109405077541002256983155200055935729725</span></span><br><span class=\"line\"><span class=\"string\">71636269561882670428252483600823257530420752963450\"\"\"</span></span><br><span class=\"line\">a=a.replace(<span class=\"string\">'\\n'</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">lista = list(a)</span><br><span class=\"line\">intLista = list(map(<span class=\"keyword\">lambda</span> x:int(x),lista))</span><br><span class=\"line\">b=[]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span>  range(<span class=\"number\">0</span>,<span class=\"number\">988</span>):</span><br><span class=\"line\">    j = reduce(<span class=\"keyword\">lambda</span> a,b:a*b,intLista[i:i+<span class=\"number\">13</span>])</span><br><span class=\"line\">    b.append(j)</span><br><span class=\"line\">b.sort()</span><br><span class=\"line\">print(b[<span class=\"number\">-1</span>])</span><br></pre></td></tr></table></figure>\n<p>算出来答案是23514624000</p>\n","site":{"data":{}},"excerpt":"","more":"<p>The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.</p>\n<p>73167176531330624919225119674426574742355349194934<br>96983520312774506326239578318016984801869478851843<br>85861560789112949495459501737958331952853208805511<br>12540698747158523863050715693290963295227443043557<br>66896648950445244523161731856403098711121722383113<br>62229893423380308135336276614282806444486645238749<br>30358907296290491560440772390713810515859307960866<br>70172427121883998797908792274921901699720888093776<br>65727333001053367881220235421809751254540594752243<br>52584907711670556013604839586446706324415722155397<br>53697817977846174064955149290862569321978468622482<br>83972241375657056057490261407972968652414535100474<br>82166370484403199890008895243450658541227588666881<br>16427171479924442928230863465674813919123162824586<br>17866458359124566529476545682848912883142607690042<br>24219022671055626321111109370544217506941658960408<br>07198403850962455444362981230987879927244284909188<br>84580156166097919133875499200524063689912560717606<br>05886116467109405077541002256983155200055935729725<br>71636269561882670428252483600823257530420752963450</p>\n<p>Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?</p>\n<p>题意：求出以上数字中相邻13个数成绩乘积的最大值</p>\n<p>分析：刚开始我是把这些数字放到一个txt文件里，然后读取它，再转化成int型放在列表里，把每个相邻13项的乘积算出来找出最大的那个；后来发现Python中多行字符可以用三个双引号表示。</p>\n<p>解答如下，注释是我刚开始的做法，两样都可以，没什么差别。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> reduce</span><br><span class=\"line\"><span class=\"comment\"># f=open(r'euler8.txt')</span></span><br><span class=\"line\"><span class=\"comment\"># a=f.read()</span></span><br><span class=\"line\"><span class=\"comment\"># f.close()</span></span><br><span class=\"line\"><span class=\"comment\"># a=a.replace('\\n', '')</span></span><br><span class=\"line\">a = <span class=\"string\">\"\"\"73167176531330624919225119674426574742355349194934</span></span><br><span class=\"line\"><span class=\"string\">96983520312774506326239578318016984801869478851843</span></span><br><span class=\"line\"><span class=\"string\">85861560789112949495459501737958331952853208805511</span></span><br><span class=\"line\"><span class=\"string\">12540698747158523863050715693290963295227443043557</span></span><br><span class=\"line\"><span class=\"string\">66896648950445244523161731856403098711121722383113</span></span><br><span class=\"line\"><span class=\"string\">62229893423380308135336276614282806444486645238749</span></span><br><span class=\"line\"><span class=\"string\">30358907296290491560440772390713810515859307960866</span></span><br><span class=\"line\"><span class=\"string\">70172427121883998797908792274921901699720888093776</span></span><br><span class=\"line\"><span class=\"string\">65727333001053367881220235421809751254540594752243</span></span><br><span class=\"line\"><span class=\"string\">52584907711670556013604839586446706324415722155397</span></span><br><span class=\"line\"><span class=\"string\">53697817977846174064955149290862569321978468622482</span></span><br><span class=\"line\"><span class=\"string\">83972241375657056057490261407972968652414535100474</span></span><br><span class=\"line\"><span class=\"string\">82166370484403199890008895243450658541227588666881</span></span><br><span class=\"line\"><span class=\"string\">16427171479924442928230863465674813919123162824586</span></span><br><span class=\"line\"><span class=\"string\">17866458359124566529476545682848912883142607690042</span></span><br><span class=\"line\"><span class=\"string\">24219022671055626321111109370544217506941658960408</span></span><br><span class=\"line\"><span class=\"string\">07198403850962455444362981230987879927244284909188</span></span><br><span class=\"line\"><span class=\"string\">84580156166097919133875499200524063689912560717606</span></span><br><span class=\"line\"><span class=\"string\">05886116467109405077541002256983155200055935729725</span></span><br><span class=\"line\"><span class=\"string\">71636269561882670428252483600823257530420752963450\"\"\"</span></span><br><span class=\"line\">a=a.replace(<span class=\"string\">'\\n'</span>, <span class=\"string\">''</span>)</span><br><span class=\"line\">lista = list(a)</span><br><span class=\"line\">intLista = list(map(<span class=\"keyword\">lambda</span> x:int(x),lista))</span><br><span class=\"line\">b=[]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span>  range(<span class=\"number\">0</span>,<span class=\"number\">988</span>):</span><br><span class=\"line\">    j = reduce(<span class=\"keyword\">lambda</span> a,b:a*b,intLista[i:i+<span class=\"number\">13</span>])</span><br><span class=\"line\">    b.append(j)</span><br><span class=\"line\">b.sort()</span><br><span class=\"line\">print(b[<span class=\"number\">-1</span>])</span><br></pre></td></tr></table></figure>\n<p>算出来答案是23514624000</p>\n"},{"title":"欧拉计划第十三题","date":"2017-11-26T06:25:47.000Z","_content":"\nLarge sum\n\nWork out the first ten digits of the sum of the following one-hundred 50-digit numbers.\n\n37107287533902102798797998220837590246510135740250\n46376937677490009712648124896970078050417018260538\n74324986199524741059474233309513058123726617309629\n91942213363574161572522430563301811072406154908250\n23067588207539346171171980310421047513778063246676\n89261670696623633820136378418383684178734361726757\n28112879812849979408065481931592621691275889832738\n44274228917432520321923589422876796487670272189318\n47451445736001306439091167216856844588711603153276\n70386486105843025439939619828917593665686757934951\n62176457141856560629502157223196586755079324193331\n64906352462741904929101432445813822663347944758178\n92575867718337217661963751590579239728245598838407\n58203565325359399008402633568948830189458628227828\n80181199384826282014278194139940567587151170094390\n35398664372827112653829987240784473053190104293586\n86515506006295864861532075273371959191420517255829\n71693888707715466499115593487603532921714970056938\n54370070576826684624621495650076471787294438377604\n53282654108756828443191190634694037855217779295145\n36123272525000296071075082563815656710885258350721\n45876576172410976447339110607218265236877223636045\n17423706905851860660448207621209813287860733969412\n81142660418086830619328460811191061556940512689692\n51934325451728388641918047049293215058642563049483\n62467221648435076201727918039944693004732956340691\n15732444386908125794514089057706229429197107928209\n55037687525678773091862540744969844508330393682126\n18336384825330154686196124348767681297534375946515\n80386287592878490201521685554828717201219257766954\n78182833757993103614740356856449095527097864797581\n16726320100436897842553539920931837441497806860984\n48403098129077791799088218795327364475675590848030\n87086987551392711854517078544161852424320693150332\n59959406895756536782107074926966537676326235447210\n69793950679652694742597709739166693763042633987085\n41052684708299085211399427365734116182760315001271\n65378607361501080857009149939512557028198746004375\n35829035317434717326932123578154982629742552737307\n94953759765105305946966067683156574377167401875275\n88902802571733229619176668713819931811048770190271\n25267680276078003013678680992525463401061632866526\n36270218540497705585629946580636237993140746255962\n24074486908231174977792365466257246923322810917141\n91430288197103288597806669760892938638285025333403\n34413065578016127815921815005561868836468420090470\n23053081172816430487623791969842487255036638784583\n11487696932154902810424020138335124462181441773470\n63783299490636259666498587618221225225512486764533\n67720186971698544312419572409913959008952310058822\n95548255300263520781532296796249481641953868218774\n76085327132285723110424803456124867697064507995236\n37774242535411291684276865538926205024910326572967\n23701913275725675285653248258265463092207058596522\n29798860272258331913126375147341994889534765745501\n18495701454879288984856827726077713721403798879715\n38298203783031473527721580348144513491373226651381\n34829543829199918180278916522431027392251122869539\n40957953066405232632538044100059654939159879593635\n29746152185502371307642255121183693803580388584903\n41698116222072977186158236678424689157993532961922\n62467957194401269043877107275048102390895523597457\n23189706772547915061505504953922979530901129967519\n86188088225875314529584099251203829009407770775672\n11306739708304724483816533873502340845647058077308\n82959174767140363198008187129011875491310547126581\n97623331044818386269515456334926366572897563400500\n42846280183517070527831839425882145521227251250327\n55121603546981200581762165212827652751691296897789\n32238195734329339946437501907836945765883352399886\n75506164965184775180738168837861091527357929701337\n62177842752192623401942399639168044983993173312731\n32924185707147349566916674687634660915035914677504\n99518671430235219628894890102423325116913619626622\n73267460800591547471830798392868535206946944540724\n76841822524674417161514036427982273348055556214818\n97142617910342598647204516893989422179826088076852\n87783646182799346313767754307809363333018982642090\n10848802521674670883215120185883543223812876952786\n71329612474782464538636993009049310363619763878039\n62184073572399794223406235393808339651327408011116\n66627891981488087797941876876144230030984490851411\n60661826293682836764744779239180335110989069790714\n85786944089552990653640447425576083659976645795096\n66024396409905389607120198219976047599490197230297\n64913982680032973156037120041377903785566085089252\n16730939319872750275468906903707539413042652315011\n94809377245048795150954100921645863754710598436791\n78639167021187492431995700641917969777599028300699\n15368713711936614952811305876380278410754449733078\n40789923115535562561142322423255033685442488917353\n44889911501440648020369068063960672322193204149535\n41503128880339536053299340368006977710650566631954\n81234880673210146739058568557934581403627822703280\n82616570773948327592232845941706525094512325230608\n22918802058777319719839450180888072429661980811197\n77158542502016545090413245809786882778948721859617\n72107838435069186155435662884062257473692284509516\n20849603980134001723930671666823555245252804609722\n53503534226472524250874054075591789781264330331690\n\n题意：求下列100个50位数的和的前十位数字\n\n分析：只是求前十位数字，不必把所有五十位数相加，比如107282+458761的前两位只由前四位甚至前三位决定，因此我们只求100个50位数当中前20（保险）个数相加即可求得答案。\n\n```Python\nimport time\nt0 = time.clock()\n# 这边把上面的100个50位数存在euler13.txt文件中，然后读取它，放入txt列表中\nwith open(\"euler13.txt\") as f:\n    txt = f.read()\n    txt = txt.split(\"\\n\")\n    while \"\" in txt:      \n        txt.remove(\"\")\n    print(txt)\nsum = 0\nfor i in txt:\n    sum += int(i[:15])\nprint(str(sum)[:10])\nprint(time.clock()-t0)\n#全部相加得出的结果是5537376230390876637302048746832985971773659831892672\n\n```\n\n答案是5537376230","source":"_posts/欧拉计划第十三题.md","raw":"---\ntitle: 欧拉计划第十三题\ndate: 2017-11-26 14:25:47\ntags: Euler\ncategories: problems\n---\n\nLarge sum\n\nWork out the first ten digits of the sum of the following one-hundred 50-digit numbers.\n\n37107287533902102798797998220837590246510135740250\n46376937677490009712648124896970078050417018260538\n74324986199524741059474233309513058123726617309629\n91942213363574161572522430563301811072406154908250\n23067588207539346171171980310421047513778063246676\n89261670696623633820136378418383684178734361726757\n28112879812849979408065481931592621691275889832738\n44274228917432520321923589422876796487670272189318\n47451445736001306439091167216856844588711603153276\n70386486105843025439939619828917593665686757934951\n62176457141856560629502157223196586755079324193331\n64906352462741904929101432445813822663347944758178\n92575867718337217661963751590579239728245598838407\n58203565325359399008402633568948830189458628227828\n80181199384826282014278194139940567587151170094390\n35398664372827112653829987240784473053190104293586\n86515506006295864861532075273371959191420517255829\n71693888707715466499115593487603532921714970056938\n54370070576826684624621495650076471787294438377604\n53282654108756828443191190634694037855217779295145\n36123272525000296071075082563815656710885258350721\n45876576172410976447339110607218265236877223636045\n17423706905851860660448207621209813287860733969412\n81142660418086830619328460811191061556940512689692\n51934325451728388641918047049293215058642563049483\n62467221648435076201727918039944693004732956340691\n15732444386908125794514089057706229429197107928209\n55037687525678773091862540744969844508330393682126\n18336384825330154686196124348767681297534375946515\n80386287592878490201521685554828717201219257766954\n78182833757993103614740356856449095527097864797581\n16726320100436897842553539920931837441497806860984\n48403098129077791799088218795327364475675590848030\n87086987551392711854517078544161852424320693150332\n59959406895756536782107074926966537676326235447210\n69793950679652694742597709739166693763042633987085\n41052684708299085211399427365734116182760315001271\n65378607361501080857009149939512557028198746004375\n35829035317434717326932123578154982629742552737307\n94953759765105305946966067683156574377167401875275\n88902802571733229619176668713819931811048770190271\n25267680276078003013678680992525463401061632866526\n36270218540497705585629946580636237993140746255962\n24074486908231174977792365466257246923322810917141\n91430288197103288597806669760892938638285025333403\n34413065578016127815921815005561868836468420090470\n23053081172816430487623791969842487255036638784583\n11487696932154902810424020138335124462181441773470\n63783299490636259666498587618221225225512486764533\n67720186971698544312419572409913959008952310058822\n95548255300263520781532296796249481641953868218774\n76085327132285723110424803456124867697064507995236\n37774242535411291684276865538926205024910326572967\n23701913275725675285653248258265463092207058596522\n29798860272258331913126375147341994889534765745501\n18495701454879288984856827726077713721403798879715\n38298203783031473527721580348144513491373226651381\n34829543829199918180278916522431027392251122869539\n40957953066405232632538044100059654939159879593635\n29746152185502371307642255121183693803580388584903\n41698116222072977186158236678424689157993532961922\n62467957194401269043877107275048102390895523597457\n23189706772547915061505504953922979530901129967519\n86188088225875314529584099251203829009407770775672\n11306739708304724483816533873502340845647058077308\n82959174767140363198008187129011875491310547126581\n97623331044818386269515456334926366572897563400500\n42846280183517070527831839425882145521227251250327\n55121603546981200581762165212827652751691296897789\n32238195734329339946437501907836945765883352399886\n75506164965184775180738168837861091527357929701337\n62177842752192623401942399639168044983993173312731\n32924185707147349566916674687634660915035914677504\n99518671430235219628894890102423325116913619626622\n73267460800591547471830798392868535206946944540724\n76841822524674417161514036427982273348055556214818\n97142617910342598647204516893989422179826088076852\n87783646182799346313767754307809363333018982642090\n10848802521674670883215120185883543223812876952786\n71329612474782464538636993009049310363619763878039\n62184073572399794223406235393808339651327408011116\n66627891981488087797941876876144230030984490851411\n60661826293682836764744779239180335110989069790714\n85786944089552990653640447425576083659976645795096\n66024396409905389607120198219976047599490197230297\n64913982680032973156037120041377903785566085089252\n16730939319872750275468906903707539413042652315011\n94809377245048795150954100921645863754710598436791\n78639167021187492431995700641917969777599028300699\n15368713711936614952811305876380278410754449733078\n40789923115535562561142322423255033685442488917353\n44889911501440648020369068063960672322193204149535\n41503128880339536053299340368006977710650566631954\n81234880673210146739058568557934581403627822703280\n82616570773948327592232845941706525094512325230608\n22918802058777319719839450180888072429661980811197\n77158542502016545090413245809786882778948721859617\n72107838435069186155435662884062257473692284509516\n20849603980134001723930671666823555245252804609722\n53503534226472524250874054075591789781264330331690\n\n题意：求下列100个50位数的和的前十位数字\n\n分析：只是求前十位数字，不必把所有五十位数相加，比如107282+458761的前两位只由前四位甚至前三位决定，因此我们只求100个50位数当中前20（保险）个数相加即可求得答案。\n\n```Python\nimport time\nt0 = time.clock()\n# 这边把上面的100个50位数存在euler13.txt文件中，然后读取它，放入txt列表中\nwith open(\"euler13.txt\") as f:\n    txt = f.read()\n    txt = txt.split(\"\\n\")\n    while \"\" in txt:      \n        txt.remove(\"\")\n    print(txt)\nsum = 0\nfor i in txt:\n    sum += int(i[:15])\nprint(str(sum)[:10])\nprint(time.clock()-t0)\n#全部相加得出的结果是5537376230390876637302048746832985971773659831892672\n\n```\n\n答案是5537376230","slug":"欧拉计划第十三题","published":1,"updated":"2018-03-01T17:20:48.183Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq65005fbcuso7tt31s7","content":"<p>Large sum</p>\n<p>Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.</p>\n<p>37107287533902102798797998220837590246510135740250<br>46376937677490009712648124896970078050417018260538<br>74324986199524741059474233309513058123726617309629<br>91942213363574161572522430563301811072406154908250<br>23067588207539346171171980310421047513778063246676<br>89261670696623633820136378418383684178734361726757<br>28112879812849979408065481931592621691275889832738<br>44274228917432520321923589422876796487670272189318<br>47451445736001306439091167216856844588711603153276<br>70386486105843025439939619828917593665686757934951<br>62176457141856560629502157223196586755079324193331<br>64906352462741904929101432445813822663347944758178<br>92575867718337217661963751590579239728245598838407<br>58203565325359399008402633568948830189458628227828<br>80181199384826282014278194139940567587151170094390<br>35398664372827112653829987240784473053190104293586<br>86515506006295864861532075273371959191420517255829<br>71693888707715466499115593487603532921714970056938<br>54370070576826684624621495650076471787294438377604<br>53282654108756828443191190634694037855217779295145<br>36123272525000296071075082563815656710885258350721<br>45876576172410976447339110607218265236877223636045<br>17423706905851860660448207621209813287860733969412<br>81142660418086830619328460811191061556940512689692<br>51934325451728388641918047049293215058642563049483<br>62467221648435076201727918039944693004732956340691<br>15732444386908125794514089057706229429197107928209<br>55037687525678773091862540744969844508330393682126<br>18336384825330154686196124348767681297534375946515<br>80386287592878490201521685554828717201219257766954<br>78182833757993103614740356856449095527097864797581<br>16726320100436897842553539920931837441497806860984<br>48403098129077791799088218795327364475675590848030<br>87086987551392711854517078544161852424320693150332<br>59959406895756536782107074926966537676326235447210<br>69793950679652694742597709739166693763042633987085<br>41052684708299085211399427365734116182760315001271<br>65378607361501080857009149939512557028198746004375<br>35829035317434717326932123578154982629742552737307<br>94953759765105305946966067683156574377167401875275<br>88902802571733229619176668713819931811048770190271<br>25267680276078003013678680992525463401061632866526<br>36270218540497705585629946580636237993140746255962<br>24074486908231174977792365466257246923322810917141<br>91430288197103288597806669760892938638285025333403<br>34413065578016127815921815005561868836468420090470<br>23053081172816430487623791969842487255036638784583<br>11487696932154902810424020138335124462181441773470<br>63783299490636259666498587618221225225512486764533<br>67720186971698544312419572409913959008952310058822<br>95548255300263520781532296796249481641953868218774<br>76085327132285723110424803456124867697064507995236<br>37774242535411291684276865538926205024910326572967<br>23701913275725675285653248258265463092207058596522<br>29798860272258331913126375147341994889534765745501<br>18495701454879288984856827726077713721403798879715<br>38298203783031473527721580348144513491373226651381<br>34829543829199918180278916522431027392251122869539<br>40957953066405232632538044100059654939159879593635<br>29746152185502371307642255121183693803580388584903<br>41698116222072977186158236678424689157993532961922<br>62467957194401269043877107275048102390895523597457<br>23189706772547915061505504953922979530901129967519<br>86188088225875314529584099251203829009407770775672<br>11306739708304724483816533873502340845647058077308<br>82959174767140363198008187129011875491310547126581<br>97623331044818386269515456334926366572897563400500<br>42846280183517070527831839425882145521227251250327<br>55121603546981200581762165212827652751691296897789<br>32238195734329339946437501907836945765883352399886<br>75506164965184775180738168837861091527357929701337<br>62177842752192623401942399639168044983993173312731<br>32924185707147349566916674687634660915035914677504<br>99518671430235219628894890102423325116913619626622<br>73267460800591547471830798392868535206946944540724<br>76841822524674417161514036427982273348055556214818<br>97142617910342598647204516893989422179826088076852<br>87783646182799346313767754307809363333018982642090<br>10848802521674670883215120185883543223812876952786<br>71329612474782464538636993009049310363619763878039<br>62184073572399794223406235393808339651327408011116<br>66627891981488087797941876876144230030984490851411<br>60661826293682836764744779239180335110989069790714<br>85786944089552990653640447425576083659976645795096<br>66024396409905389607120198219976047599490197230297<br>64913982680032973156037120041377903785566085089252<br>16730939319872750275468906903707539413042652315011<br>94809377245048795150954100921645863754710598436791<br>78639167021187492431995700641917969777599028300699<br>15368713711936614952811305876380278410754449733078<br>40789923115535562561142322423255033685442488917353<br>44889911501440648020369068063960672322193204149535<br>41503128880339536053299340368006977710650566631954<br>81234880673210146739058568557934581403627822703280<br>82616570773948327592232845941706525094512325230608<br>22918802058777319719839450180888072429661980811197<br>77158542502016545090413245809786882778948721859617<br>72107838435069186155435662884062257473692284509516<br>20849603980134001723930671666823555245252804609722<br>53503534226472524250874054075591789781264330331690</p>\n<p>题意：求下列100个50位数的和的前十位数字</p>\n<p>分析：只是求前十位数字，不必把所有五十位数相加，比如107282+458761的前两位只由前四位甚至前三位决定，因此我们只求100个50位数当中前20（保险）个数相加即可求得答案。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">t0 = time.clock()</span><br><span class=\"line\"><span class=\"comment\"># 这边把上面的100个50位数存在euler13.txt文件中，然后读取它，放入txt列表中</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">\"euler13.txt\"</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    txt = f.read()</span><br><span class=\"line\">    txt = txt.split(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"string\">\"\"</span> <span class=\"keyword\">in</span> txt:      </span><br><span class=\"line\">        txt.remove(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">    print(txt)</span><br><span class=\"line\">sum = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> txt:</span><br><span class=\"line\">    sum += int(i[:<span class=\"number\">15</span>])</span><br><span class=\"line\">print(str(sum)[:<span class=\"number\">10</span>])</span><br><span class=\"line\">print(time.clock()-t0)</span><br><span class=\"line\"><span class=\"comment\">#全部相加得出的结果是5537376230390876637302048746832985971773659831892672</span></span><br></pre></td></tr></table></figure>\n<p>答案是5537376230</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Large sum</p>\n<p>Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.</p>\n<p>37107287533902102798797998220837590246510135740250<br>46376937677490009712648124896970078050417018260538<br>74324986199524741059474233309513058123726617309629<br>91942213363574161572522430563301811072406154908250<br>23067588207539346171171980310421047513778063246676<br>89261670696623633820136378418383684178734361726757<br>28112879812849979408065481931592621691275889832738<br>44274228917432520321923589422876796487670272189318<br>47451445736001306439091167216856844588711603153276<br>70386486105843025439939619828917593665686757934951<br>62176457141856560629502157223196586755079324193331<br>64906352462741904929101432445813822663347944758178<br>92575867718337217661963751590579239728245598838407<br>58203565325359399008402633568948830189458628227828<br>80181199384826282014278194139940567587151170094390<br>35398664372827112653829987240784473053190104293586<br>86515506006295864861532075273371959191420517255829<br>71693888707715466499115593487603532921714970056938<br>54370070576826684624621495650076471787294438377604<br>53282654108756828443191190634694037855217779295145<br>36123272525000296071075082563815656710885258350721<br>45876576172410976447339110607218265236877223636045<br>17423706905851860660448207621209813287860733969412<br>81142660418086830619328460811191061556940512689692<br>51934325451728388641918047049293215058642563049483<br>62467221648435076201727918039944693004732956340691<br>15732444386908125794514089057706229429197107928209<br>55037687525678773091862540744969844508330393682126<br>18336384825330154686196124348767681297534375946515<br>80386287592878490201521685554828717201219257766954<br>78182833757993103614740356856449095527097864797581<br>16726320100436897842553539920931837441497806860984<br>48403098129077791799088218795327364475675590848030<br>87086987551392711854517078544161852424320693150332<br>59959406895756536782107074926966537676326235447210<br>69793950679652694742597709739166693763042633987085<br>41052684708299085211399427365734116182760315001271<br>65378607361501080857009149939512557028198746004375<br>35829035317434717326932123578154982629742552737307<br>94953759765105305946966067683156574377167401875275<br>88902802571733229619176668713819931811048770190271<br>25267680276078003013678680992525463401061632866526<br>36270218540497705585629946580636237993140746255962<br>24074486908231174977792365466257246923322810917141<br>91430288197103288597806669760892938638285025333403<br>34413065578016127815921815005561868836468420090470<br>23053081172816430487623791969842487255036638784583<br>11487696932154902810424020138335124462181441773470<br>63783299490636259666498587618221225225512486764533<br>67720186971698544312419572409913959008952310058822<br>95548255300263520781532296796249481641953868218774<br>76085327132285723110424803456124867697064507995236<br>37774242535411291684276865538926205024910326572967<br>23701913275725675285653248258265463092207058596522<br>29798860272258331913126375147341994889534765745501<br>18495701454879288984856827726077713721403798879715<br>38298203783031473527721580348144513491373226651381<br>34829543829199918180278916522431027392251122869539<br>40957953066405232632538044100059654939159879593635<br>29746152185502371307642255121183693803580388584903<br>41698116222072977186158236678424689157993532961922<br>62467957194401269043877107275048102390895523597457<br>23189706772547915061505504953922979530901129967519<br>86188088225875314529584099251203829009407770775672<br>11306739708304724483816533873502340845647058077308<br>82959174767140363198008187129011875491310547126581<br>97623331044818386269515456334926366572897563400500<br>42846280183517070527831839425882145521227251250327<br>55121603546981200581762165212827652751691296897789<br>32238195734329339946437501907836945765883352399886<br>75506164965184775180738168837861091527357929701337<br>62177842752192623401942399639168044983993173312731<br>32924185707147349566916674687634660915035914677504<br>99518671430235219628894890102423325116913619626622<br>73267460800591547471830798392868535206946944540724<br>76841822524674417161514036427982273348055556214818<br>97142617910342598647204516893989422179826088076852<br>87783646182799346313767754307809363333018982642090<br>10848802521674670883215120185883543223812876952786<br>71329612474782464538636993009049310363619763878039<br>62184073572399794223406235393808339651327408011116<br>66627891981488087797941876876144230030984490851411<br>60661826293682836764744779239180335110989069790714<br>85786944089552990653640447425576083659976645795096<br>66024396409905389607120198219976047599490197230297<br>64913982680032973156037120041377903785566085089252<br>16730939319872750275468906903707539413042652315011<br>94809377245048795150954100921645863754710598436791<br>78639167021187492431995700641917969777599028300699<br>15368713711936614952811305876380278410754449733078<br>40789923115535562561142322423255033685442488917353<br>44889911501440648020369068063960672322193204149535<br>41503128880339536053299340368006977710650566631954<br>81234880673210146739058568557934581403627822703280<br>82616570773948327592232845941706525094512325230608<br>22918802058777319719839450180888072429661980811197<br>77158542502016545090413245809786882778948721859617<br>72107838435069186155435662884062257473692284509516<br>20849603980134001723930671666823555245252804609722<br>53503534226472524250874054075591789781264330331690</p>\n<p>题意：求下列100个50位数的和的前十位数字</p>\n<p>分析：只是求前十位数字，不必把所有五十位数相加，比如107282+458761的前两位只由前四位甚至前三位决定，因此我们只求100个50位数当中前20（保险）个数相加即可求得答案。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">t0 = time.clock()</span><br><span class=\"line\"><span class=\"comment\"># 这边把上面的100个50位数存在euler13.txt文件中，然后读取它，放入txt列表中</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">\"euler13.txt\"</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    txt = f.read()</span><br><span class=\"line\">    txt = txt.split(<span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"string\">\"\"</span> <span class=\"keyword\">in</span> txt:      </span><br><span class=\"line\">        txt.remove(<span class=\"string\">\"\"</span>)</span><br><span class=\"line\">    print(txt)</span><br><span class=\"line\">sum = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> txt:</span><br><span class=\"line\">    sum += int(i[:<span class=\"number\">15</span>])</span><br><span class=\"line\">print(str(sum)[:<span class=\"number\">10</span>])</span><br><span class=\"line\">print(time.clock()-t0)</span><br><span class=\"line\"><span class=\"comment\">#全部相加得出的结果是5537376230390876637302048746832985971773659831892672</span></span><br></pre></td></tr></table></figure>\n<p>答案是5537376230</p>\n"},{"title":"欧拉计划第十题","date":"2017-11-18T16:15:22.000Z","_content":"\nSummation of primes\n\nThe sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.\n\nFind the sum of all the primes below two million.\n\n题意：求2000000内的素数之和\n\n1.自己优化后的代码\n\n```Python\nimport time\nt0 = time.clock()\ndef primeJudge(n):\n    sqrtNum = int(n**0.5)\n    for i in range(3,sqrtNum+1,2):\n        if n%i == 0:\n            return False\n    return True\nsum=17\nfor i in range(11,2000000,2):\n    if primeJudge(i):\n        sum+=i\nprint(sum)\nprint(time.clock()-t0)\n```\n\n答案142913828922\n\n耗时7.5s左右\n\n\n\n2.使用sieve of euler(欧拉筛算法)后的代码\n\n```Python\nimport time\nt0= time.clock()\npn = 2000000\nprimes = []\nis_prime = [True for i in range(pn)]\nis_prime[0] = False\nis_prime[1] = False\nfor i in range(2, pn):\n    if is_prime[i]: primes.append(i)\n    for j in primes:\n        if i * j >= pn:\n            break\n        is_prime[i * j] = False\n        if i % j == 0: break\nsum =0\nfor i in primes:\n    sum+=i\nprint(sum)\nprint(time.clock()-t0)\n```\n\n耗时1.31s\n\n\n\n3.使用了[链接在这](https://projecteuler.net/thread=10;page=5)的Lucy_Hedgehog的方法\n\n```Python\nimport time\ndef P10(n):\n   r = int(n**0.5)\n#  assert r*r <= n and (r+1)**2 > n\n   V = [n//i for i in range(1,r+1)]\n   #print(V)\n   V += list(range(V[-1]-1,0,-1))\n   #print(V)\n   S = {i:i*(i+1)//2-1 for i in V}\n   #print(S)\n   for p in range(2,r+1):\n      if S[p] > S[p-1]:  # p is prime\n         sp = S[p-1]  # sum of primes smaller than p\n         p2 = p*p\n         for v in V:\n            if v < p2: break\n            S[v] -= p*(S[v//p] - sp)\n   return S[n]\nt0 = time.clock()\nN = 2000000\nprint(P10(N))\nprint(time.clock()-t0)\n```\n\n耗时0.012s\n\n算十亿内的质数和也只使用1.07s，可以参见这的解释 [点这](https://www.zhihu.com/question/29580448)","source":"_posts/欧拉计划第十题.md","raw":"---\ntitle: 欧拉计划第十题\ndate: 2017-11-19 00:15:22\ntags: Euler\ncategories: problems\n---\n\nSummation of primes\n\nThe sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.\n\nFind the sum of all the primes below two million.\n\n题意：求2000000内的素数之和\n\n1.自己优化后的代码\n\n```Python\nimport time\nt0 = time.clock()\ndef primeJudge(n):\n    sqrtNum = int(n**0.5)\n    for i in range(3,sqrtNum+1,2):\n        if n%i == 0:\n            return False\n    return True\nsum=17\nfor i in range(11,2000000,2):\n    if primeJudge(i):\n        sum+=i\nprint(sum)\nprint(time.clock()-t0)\n```\n\n答案142913828922\n\n耗时7.5s左右\n\n\n\n2.使用sieve of euler(欧拉筛算法)后的代码\n\n```Python\nimport time\nt0= time.clock()\npn = 2000000\nprimes = []\nis_prime = [True for i in range(pn)]\nis_prime[0] = False\nis_prime[1] = False\nfor i in range(2, pn):\n    if is_prime[i]: primes.append(i)\n    for j in primes:\n        if i * j >= pn:\n            break\n        is_prime[i * j] = False\n        if i % j == 0: break\nsum =0\nfor i in primes:\n    sum+=i\nprint(sum)\nprint(time.clock()-t0)\n```\n\n耗时1.31s\n\n\n\n3.使用了[链接在这](https://projecteuler.net/thread=10;page=5)的Lucy_Hedgehog的方法\n\n```Python\nimport time\ndef P10(n):\n   r = int(n**0.5)\n#  assert r*r <= n and (r+1)**2 > n\n   V = [n//i for i in range(1,r+1)]\n   #print(V)\n   V += list(range(V[-1]-1,0,-1))\n   #print(V)\n   S = {i:i*(i+1)//2-1 for i in V}\n   #print(S)\n   for p in range(2,r+1):\n      if S[p] > S[p-1]:  # p is prime\n         sp = S[p-1]  # sum of primes smaller than p\n         p2 = p*p\n         for v in V:\n            if v < p2: break\n            S[v] -= p*(S[v//p] - sp)\n   return S[n]\nt0 = time.clock()\nN = 2000000\nprint(P10(N))\nprint(time.clock()-t0)\n```\n\n耗时0.012s\n\n算十亿内的质数和也只使用1.07s，可以参见这的解释 [点这](https://www.zhihu.com/question/29580448)","slug":"欧拉计划第十题","published":1,"updated":"2018-03-01T17:20:48.207Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq65005ibcushoq9rw3z","content":"<p>Summation of primes</p>\n<p>The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.</p>\n<p>Find the sum of all the primes below two million.</p>\n<p>题意：求2000000内的素数之和</p>\n<p>1.自己优化后的代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">t0 = time.clock()</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">primeJudge</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    sqrtNum = int(n**<span class=\"number\">0.5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">3</span>,sqrtNum+<span class=\"number\">1</span>,<span class=\"number\">2</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> n%i == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">sum=<span class=\"number\">17</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">11</span>,<span class=\"number\">2000000</span>,<span class=\"number\">2</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> primeJudge(i):</span><br><span class=\"line\">        sum+=i</span><br><span class=\"line\">print(sum)</span><br><span class=\"line\">print(time.clock()-t0)</span><br></pre></td></tr></table></figure>\n<p>答案142913828922</p>\n<p>耗时7.5s左右</p>\n<p>2.使用sieve of euler(欧拉筛算法)后的代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">t0= time.clock()</span><br><span class=\"line\">pn = <span class=\"number\">2000000</span></span><br><span class=\"line\">primes = []</span><br><span class=\"line\">is_prime = [<span class=\"keyword\">True</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(pn)]</span><br><span class=\"line\">is_prime[<span class=\"number\">0</span>] = <span class=\"keyword\">False</span></span><br><span class=\"line\">is_prime[<span class=\"number\">1</span>] = <span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>, pn):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_prime[i]: primes.append(i)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> primes:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i * j &gt;= pn:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        is_prime[i * j] = <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i % j == <span class=\"number\">0</span>: <span class=\"keyword\">break</span></span><br><span class=\"line\">sum =<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> primes:</span><br><span class=\"line\">    sum+=i</span><br><span class=\"line\">print(sum)</span><br><span class=\"line\">print(time.clock()-t0)</span><br></pre></td></tr></table></figure>\n<p>耗时1.31s</p>\n<p>3.使用了<a href=\"https://projecteuler.net/thread=10;page=5\" target=\"_blank\" rel=\"noopener\">链接在这</a>的Lucy_Hedgehog的方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">P10</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">   r = int(n**<span class=\"number\">0.5</span>)</span><br><span class=\"line\"><span class=\"comment\">#  assert r*r &lt;= n and (r+1)**2 &gt; n</span></span><br><span class=\"line\">   V = [n//i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,r+<span class=\"number\">1</span>)]</span><br><span class=\"line\">   <span class=\"comment\">#print(V)</span></span><br><span class=\"line\">   V += list(range(V[<span class=\"number\">-1</span>]<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>))</span><br><span class=\"line\">   <span class=\"comment\">#print(V)</span></span><br><span class=\"line\">   S = &#123;i:i*(i+<span class=\"number\">1</span>)//<span class=\"number\">2</span><span class=\"number\">-1</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> V&#125;</span><br><span class=\"line\">   <span class=\"comment\">#print(S)</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>,r+<span class=\"number\">1</span>):</span><br><span class=\"line\">      <span class=\"keyword\">if</span> S[p] &gt; S[p<span class=\"number\">-1</span>]:  <span class=\"comment\"># p is prime</span></span><br><span class=\"line\">         sp = S[p<span class=\"number\">-1</span>]  <span class=\"comment\"># sum of primes smaller than p</span></span><br><span class=\"line\">         p2 = p*p</span><br><span class=\"line\">         <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> V:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> v &lt; p2: <span class=\"keyword\">break</span></span><br><span class=\"line\">            S[v] -= p*(S[v//p] - sp)</span><br><span class=\"line\">   <span class=\"keyword\">return</span> S[n]</span><br><span class=\"line\">t0 = time.clock()</span><br><span class=\"line\">N = <span class=\"number\">2000000</span></span><br><span class=\"line\">print(P10(N))</span><br><span class=\"line\">print(time.clock()-t0)</span><br></pre></td></tr></table></figure>\n<p>耗时0.012s</p>\n<p>算十亿内的质数和也只使用1.07s，可以参见这的解释 <a href=\"https://www.zhihu.com/question/29580448\" target=\"_blank\" rel=\"noopener\">点这</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Summation of primes</p>\n<p>The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.</p>\n<p>Find the sum of all the primes below two million.</p>\n<p>题意：求2000000内的素数之和</p>\n<p>1.自己优化后的代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">t0 = time.clock()</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">primeJudge</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">    sqrtNum = int(n**<span class=\"number\">0.5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">3</span>,sqrtNum+<span class=\"number\">1</span>,<span class=\"number\">2</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> n%i == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">sum=<span class=\"number\">17</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">11</span>,<span class=\"number\">2000000</span>,<span class=\"number\">2</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> primeJudge(i):</span><br><span class=\"line\">        sum+=i</span><br><span class=\"line\">print(sum)</span><br><span class=\"line\">print(time.clock()-t0)</span><br></pre></td></tr></table></figure>\n<p>答案142913828922</p>\n<p>耗时7.5s左右</p>\n<p>2.使用sieve of euler(欧拉筛算法)后的代码</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">t0= time.clock()</span><br><span class=\"line\">pn = <span class=\"number\">2000000</span></span><br><span class=\"line\">primes = []</span><br><span class=\"line\">is_prime = [<span class=\"keyword\">True</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(pn)]</span><br><span class=\"line\">is_prime[<span class=\"number\">0</span>] = <span class=\"keyword\">False</span></span><br><span class=\"line\">is_prime[<span class=\"number\">1</span>] = <span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>, pn):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> is_prime[i]: primes.append(i)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> primes:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i * j &gt;= pn:</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        is_prime[i * j] = <span class=\"keyword\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i % j == <span class=\"number\">0</span>: <span class=\"keyword\">break</span></span><br><span class=\"line\">sum =<span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> primes:</span><br><span class=\"line\">    sum+=i</span><br><span class=\"line\">print(sum)</span><br><span class=\"line\">print(time.clock()-t0)</span><br></pre></td></tr></table></figure>\n<p>耗时1.31s</p>\n<p>3.使用了<a href=\"https://projecteuler.net/thread=10;page=5\" target=\"_blank\" rel=\"noopener\">链接在这</a>的Lucy_Hedgehog的方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">P10</span><span class=\"params\">(n)</span>:</span></span><br><span class=\"line\">   r = int(n**<span class=\"number\">0.5</span>)</span><br><span class=\"line\"><span class=\"comment\">#  assert r*r &lt;= n and (r+1)**2 &gt; n</span></span><br><span class=\"line\">   V = [n//i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,r+<span class=\"number\">1</span>)]</span><br><span class=\"line\">   <span class=\"comment\">#print(V)</span></span><br><span class=\"line\">   V += list(range(V[<span class=\"number\">-1</span>]<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>))</span><br><span class=\"line\">   <span class=\"comment\">#print(V)</span></span><br><span class=\"line\">   S = &#123;i:i*(i+<span class=\"number\">1</span>)//<span class=\"number\">2</span><span class=\"number\">-1</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> V&#125;</span><br><span class=\"line\">   <span class=\"comment\">#print(S)</span></span><br><span class=\"line\">   <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>,r+<span class=\"number\">1</span>):</span><br><span class=\"line\">      <span class=\"keyword\">if</span> S[p] &gt; S[p<span class=\"number\">-1</span>]:  <span class=\"comment\"># p is prime</span></span><br><span class=\"line\">         sp = S[p<span class=\"number\">-1</span>]  <span class=\"comment\"># sum of primes smaller than p</span></span><br><span class=\"line\">         p2 = p*p</span><br><span class=\"line\">         <span class=\"keyword\">for</span> v <span class=\"keyword\">in</span> V:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> v &lt; p2: <span class=\"keyword\">break</span></span><br><span class=\"line\">            S[v] -= p*(S[v//p] - sp)</span><br><span class=\"line\">   <span class=\"keyword\">return</span> S[n]</span><br><span class=\"line\">t0 = time.clock()</span><br><span class=\"line\">N = <span class=\"number\">2000000</span></span><br><span class=\"line\">print(P10(N))</span><br><span class=\"line\">print(time.clock()-t0)</span><br></pre></td></tr></table></figure>\n<p>耗时0.012s</p>\n<p>算十亿内的质数和也只使用1.07s，可以参见这的解释 <a href=\"https://www.zhihu.com/question/29580448\" target=\"_blank\" rel=\"noopener\">点这</a></p>\n"},{"title":"欧拉计划第十二题","date":"2017-11-24T13:38:40.000Z","_content":"\nHighly divisible triangular number\n\nThe sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:\n\n1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...\n\nLet us list the factors of the first seven triangle numbers:\n\n> **1**: 1\n> **3**: 1,3\n> **6**: 1,2,3,6\n> **10**: 1,2,5,10\n> **15**: 1,3,5,15\n> **21**: 1,3,7,21\n> **28**: 1,2,4,7,14,28\n\nWe can see that 28 is the first triangle number to have over five divisors.\n\nWhat is the value of the first triangle number to have over five hundred divisors?\n\n题意：定义三角形数为1到n之内所有数的和，求第一个有超过500个约数的三角形数是多少？\n\n分析：遍历求三角形数的约数和，直到大于500为止，打印出此时的三角形数\n\n```Python\nfrom itertools import count\nimport time\nt0 = time.clock()\nfor i in count(1):\n    countNum = 0\n    sum = 0\n    for num in range(1,i):\n        sum += num\n    sqrt = int(sum**0.5)\n    for j in range(2,sqrt+1):\n        if sum % j == 0:\n            countNum += 1\n    result = countNum*2+2\n    if result > 500:\n        print(sum)\n        print(time.clock()-t0)\n        break\n```\n\n答案是76576500","source":"_posts/欧拉计划第十二题.md","raw":"---\ntitle: 欧拉计划第十二题\ndate: 2017-11-24 21:38:40\ntags: Euler\ncategories: problems\n---\n\nHighly divisible triangular number\n\nThe sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:\n\n1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...\n\nLet us list the factors of the first seven triangle numbers:\n\n> **1**: 1\n> **3**: 1,3\n> **6**: 1,2,3,6\n> **10**: 1,2,5,10\n> **15**: 1,3,5,15\n> **21**: 1,3,7,21\n> **28**: 1,2,4,7,14,28\n\nWe can see that 28 is the first triangle number to have over five divisors.\n\nWhat is the value of the first triangle number to have over five hundred divisors?\n\n题意：定义三角形数为1到n之内所有数的和，求第一个有超过500个约数的三角形数是多少？\n\n分析：遍历求三角形数的约数和，直到大于500为止，打印出此时的三角形数\n\n```Python\nfrom itertools import count\nimport time\nt0 = time.clock()\nfor i in count(1):\n    countNum = 0\n    sum = 0\n    for num in range(1,i):\n        sum += num\n    sqrt = int(sum**0.5)\n    for j in range(2,sqrt+1):\n        if sum % j == 0:\n            countNum += 1\n    result = countNum*2+2\n    if result > 500:\n        print(sum)\n        print(time.clock()-t0)\n        break\n```\n\n答案是76576500","slug":"欧拉计划第十二题","published":1,"updated":"2018-03-01T17:20:48.204Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq6l005lbcusc0dp54ey","content":"<p>Highly divisible triangular number</p>\n<p>The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:</p>\n<p>1, 3, 6, 10, 15, 21, 28, 36, 45, 55, …</p>\n<p>Let us list the factors of the first seven triangle numbers:</p>\n<blockquote>\n<p><strong>1</strong>: 1<br><strong>3</strong>: 1,3<br><strong>6</strong>: 1,2,3,6<br><strong>10</strong>: 1,2,5,10<br><strong>15</strong>: 1,3,5,15<br><strong>21</strong>: 1,3,7,21<br><strong>28</strong>: 1,2,4,7,14,28</p>\n</blockquote>\n<p>We can see that 28 is the first triangle number to have over five divisors.</p>\n<p>What is the value of the first triangle number to have over five hundred divisors?</p>\n<p>题意：定义三角形数为1到n之内所有数的和，求第一个有超过500个约数的三角形数是多少？</p>\n<p>分析：遍历求三角形数的约数和，直到大于500为止，打印出此时的三角形数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> count</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">t0 = time.clock()</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> count(<span class=\"number\">1</span>):</span><br><span class=\"line\">    countNum = <span class=\"number\">0</span></span><br><span class=\"line\">    sum = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,i):</span><br><span class=\"line\">        sum += num</span><br><span class=\"line\">    sqrt = int(sum**<span class=\"number\">0.5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>,sqrt+<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> sum % j == <span class=\"number\">0</span>:</span><br><span class=\"line\">            countNum += <span class=\"number\">1</span></span><br><span class=\"line\">    result = countNum*<span class=\"number\">2</span>+<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> result &gt; <span class=\"number\">500</span>:</span><br><span class=\"line\">        print(sum)</span><br><span class=\"line\">        print(time.clock()-t0)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n<p>答案是76576500</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Highly divisible triangular number</p>\n<p>The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:</p>\n<p>1, 3, 6, 10, 15, 21, 28, 36, 45, 55, …</p>\n<p>Let us list the factors of the first seven triangle numbers:</p>\n<blockquote>\n<p><strong>1</strong>: 1<br><strong>3</strong>: 1,3<br><strong>6</strong>: 1,2,3,6<br><strong>10</strong>: 1,2,5,10<br><strong>15</strong>: 1,3,5,15<br><strong>21</strong>: 1,3,7,21<br><strong>28</strong>: 1,2,4,7,14,28</p>\n</blockquote>\n<p>We can see that 28 is the first triangle number to have over five divisors.</p>\n<p>What is the value of the first triangle number to have over five hundred divisors?</p>\n<p>题意：定义三角形数为1到n之内所有数的和，求第一个有超过500个约数的三角形数是多少？</p>\n<p>分析：遍历求三角形数的约数和，直到大于500为止，打印出此时的三角形数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> count</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\">t0 = time.clock()</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> count(<span class=\"number\">1</span>):</span><br><span class=\"line\">    countNum = <span class=\"number\">0</span></span><br><span class=\"line\">    sum = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,i):</span><br><span class=\"line\">        sum += num</span><br><span class=\"line\">    sqrt = int(sum**<span class=\"number\">0.5</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">2</span>,sqrt+<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> sum % j == <span class=\"number\">0</span>:</span><br><span class=\"line\">            countNum += <span class=\"number\">1</span></span><br><span class=\"line\">    result = countNum*<span class=\"number\">2</span>+<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> result &gt; <span class=\"number\">500</span>:</span><br><span class=\"line\">        print(sum)</span><br><span class=\"line\">        print(time.clock()-t0)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>\n<p>答案是76576500</p>\n"},{"title":"欧拉计划第四题","date":"2017-11-14T14:08:17.000Z","_content":"\nProblem 4\n\nA palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.\n\nFind the largest palindrome made from the product of two 3-digit numbers.\n\n题意：主要是求回文数，已知两位数乘积最大的回文数是9009，求三位数最大的回文数\n\n解答\n\n```Python\ndef ouler4():\n    list=[]\n    for i in range(999,99,-1):\n        for j in range(999,99,-1):\n            product = i*j\n            productlist = str(product)\n            if productlist[0]==productlist[-1] and productlist[1]==productlist[-2] and productlist[2]==productlist[-3]:\n                productInt = int(productlist)\n                list.append(productInt)\n                list.sort()\n    print(list[-1])\n    return list[-1]\nouler4()\n```\n\n答案是906609\n\n思路比较简单，感觉还有不少优化的地方。","source":"_posts/欧拉计划第四题.md","raw":"---\ntitle: 欧拉计划第四题\ndate: 2017-11-14 22:08:17\ntags: Euler\ncategories: problems\n---\n\nProblem 4\n\nA palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.\n\nFind the largest palindrome made from the product of two 3-digit numbers.\n\n题意：主要是求回文数，已知两位数乘积最大的回文数是9009，求三位数最大的回文数\n\n解答\n\n```Python\ndef ouler4():\n    list=[]\n    for i in range(999,99,-1):\n        for j in range(999,99,-1):\n            product = i*j\n            productlist = str(product)\n            if productlist[0]==productlist[-1] and productlist[1]==productlist[-2] and productlist[2]==productlist[-3]:\n                productInt = int(productlist)\n                list.append(productInt)\n                list.sort()\n    print(list[-1])\n    return list[-1]\nouler4()\n```\n\n答案是906609\n\n思路比较简单，感觉还有不少优化的地方。","slug":"欧拉计划第四题","published":1,"updated":"2018-03-01T17:20:48.207Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq6l005obcusobhw4t1l","content":"<p>Problem 4</p>\n<p>A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.</p>\n<p>Find the largest palindrome made from the product of two 3-digit numbers.</p>\n<p>题意：主要是求回文数，已知两位数乘积最大的回文数是9009，求三位数最大的回文数</p>\n<p>解答</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ouler4</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    list=[]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">999</span>,<span class=\"number\">99</span>,<span class=\"number\">-1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">999</span>,<span class=\"number\">99</span>,<span class=\"number\">-1</span>):</span><br><span class=\"line\">            product = i*j</span><br><span class=\"line\">            productlist = str(product)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> productlist[<span class=\"number\">0</span>]==productlist[<span class=\"number\">-1</span>] <span class=\"keyword\">and</span> productlist[<span class=\"number\">1</span>]==productlist[<span class=\"number\">-2</span>] <span class=\"keyword\">and</span> productlist[<span class=\"number\">2</span>]==productlist[<span class=\"number\">-3</span>]:</span><br><span class=\"line\">                productInt = int(productlist)</span><br><span class=\"line\">                list.append(productInt)</span><br><span class=\"line\">                list.sort()</span><br><span class=\"line\">    print(list[<span class=\"number\">-1</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list[<span class=\"number\">-1</span>]</span><br><span class=\"line\">ouler4()</span><br></pre></td></tr></table></figure>\n<p>答案是906609</p>\n<p>思路比较简单，感觉还有不少优化的地方。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Problem 4</p>\n<p>A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.</p>\n<p>Find the largest palindrome made from the product of two 3-digit numbers.</p>\n<p>题意：主要是求回文数，已知两位数乘积最大的回文数是9009，求三位数最大的回文数</p>\n<p>解答</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ouler4</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    list=[]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">999</span>,<span class=\"number\">99</span>,<span class=\"number\">-1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> range(<span class=\"number\">999</span>,<span class=\"number\">99</span>,<span class=\"number\">-1</span>):</span><br><span class=\"line\">            product = i*j</span><br><span class=\"line\">            productlist = str(product)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> productlist[<span class=\"number\">0</span>]==productlist[<span class=\"number\">-1</span>] <span class=\"keyword\">and</span> productlist[<span class=\"number\">1</span>]==productlist[<span class=\"number\">-2</span>] <span class=\"keyword\">and</span> productlist[<span class=\"number\">2</span>]==productlist[<span class=\"number\">-3</span>]:</span><br><span class=\"line\">                productInt = int(productlist)</span><br><span class=\"line\">                list.append(productInt)</span><br><span class=\"line\">                list.sort()</span><br><span class=\"line\">    print(list[<span class=\"number\">-1</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list[<span class=\"number\">-1</span>]</span><br><span class=\"line\">ouler4()</span><br></pre></td></tr></table></figure>\n<p>答案是906609</p>\n<p>思路比较简单，感觉还有不少优化的地方。</p>\n"},{"title":"正则表达式学习笔记","date":"2018-03-22T12:41:10.000Z","_content":"正则表达式(Regular Expression):主要用来匹配文本中某个模式的字符串\n\n常用规则如下：\n\n##### 一般规则:\n\n| 正则表达式       | 匹配字符                                     |\n| :---------- | :--------------------------------------- |\n| a           | 例如/a/匹配字符a                               |\n| \\?          | 匹配特殊字符?。特殊字符包括^, $, ? , ., /, \\, [, ], {, }, (, ), +, *. |\n| .           | 匹配任意字符，例如/a./匹配ab和ac                     |\n| ?           | 代表0或1个字符。/Mrs?\\.?/匹配\"Mr\"，\"Mrs\"，\"Mr.\"，\"Mrs.\" |\n| *           | 代表0或多个字符。/Hello*/匹配\"Hello\",\"HelloJack\"   |\n| \\d{3}       | 匹配3个数字比如456,\\d代表任意数字                     |\n| \\d{1,10}    | 匹配1-10个数字                                |\n| [a-zA-z0-9] | 匹配大小写字符以及数字                              |\n\n##### 完整版图片如下\n\n![](/images/regex.jpg)\n\n比如要检测输入的ip地址是否合规，可以用以下正则表达式来匹配\n\n```\n((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\n```\n\n最主要的是理解(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)的含义\n\n总的来说，正则表达式和Linux搜索文件中时用的通配符有点类似，不过它们俩的适用场景及具体用法还是不一样的以\\*为例，\n\npython和ruby正则表达式中星号(*)代表匹配它前面一个字符任意次（0或者任意次）\n\n比如abc* 能匹配 ab和abccc\n而python中的glob.glob和ruby里的Dir.glob中星号*代表匹配零个或多个字符\n\n简单来说，通配符主要用于对文件名的操作，比如python中的glob.glob;ruby中的Dir.glob；linux里的一些命令行操作，属于系统级别的使用，操作的单位是文件。\n正则表达式主要用于对文本内容进行操作，操作的单位是字符串。\n\n参考链接\n\n[正则表达式30分钟入门教程](http://www.jb51.net/tools/zhengze.html)\n\n[一步一步学Ruby(九):Ruby正则表达式（上）](http://www.cnblogs.com/cnblogsfans/archive/2009/02/02/1382745.html)\n\n[Python正则表达式指南](http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html)\n\n[\\*(.+?)\\* 这个正则表达式中的.+?什么意思](https://www.zhihu.com/question/26413687)\n\n[Ruby笔记–正则表达式](http://rubyer.me/blog/357/)\n\n[在线的Ruby正则表达式编辑器](http://www.rubular.com/)","source":"_posts/正则表达式学习笔记.md","raw":"---\ntitle: 正则表达式学习笔记\ndate: 2018-03-22 20:41:10\ntags: regex\ncategories: Ruby\n---\n正则表达式(Regular Expression):主要用来匹配文本中某个模式的字符串\n\n常用规则如下：\n\n##### 一般规则:\n\n| 正则表达式       | 匹配字符                                     |\n| :---------- | :--------------------------------------- |\n| a           | 例如/a/匹配字符a                               |\n| \\?          | 匹配特殊字符?。特殊字符包括^, $, ? , ., /, \\, [, ], {, }, (, ), +, *. |\n| .           | 匹配任意字符，例如/a./匹配ab和ac                     |\n| ?           | 代表0或1个字符。/Mrs?\\.?/匹配\"Mr\"，\"Mrs\"，\"Mr.\"，\"Mrs.\" |\n| *           | 代表0或多个字符。/Hello*/匹配\"Hello\",\"HelloJack\"   |\n| \\d{3}       | 匹配3个数字比如456,\\d代表任意数字                     |\n| \\d{1,10}    | 匹配1-10个数字                                |\n| [a-zA-z0-9] | 匹配大小写字符以及数字                              |\n\n##### 完整版图片如下\n\n![](/images/regex.jpg)\n\n比如要检测输入的ip地址是否合规，可以用以下正则表达式来匹配\n\n```\n((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\n```\n\n最主要的是理解(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)的含义\n\n总的来说，正则表达式和Linux搜索文件中时用的通配符有点类似，不过它们俩的适用场景及具体用法还是不一样的以\\*为例，\n\npython和ruby正则表达式中星号(*)代表匹配它前面一个字符任意次（0或者任意次）\n\n比如abc* 能匹配 ab和abccc\n而python中的glob.glob和ruby里的Dir.glob中星号*代表匹配零个或多个字符\n\n简单来说，通配符主要用于对文件名的操作，比如python中的glob.glob;ruby中的Dir.glob；linux里的一些命令行操作，属于系统级别的使用，操作的单位是文件。\n正则表达式主要用于对文本内容进行操作，操作的单位是字符串。\n\n参考链接\n\n[正则表达式30分钟入门教程](http://www.jb51.net/tools/zhengze.html)\n\n[一步一步学Ruby(九):Ruby正则表达式（上）](http://www.cnblogs.com/cnblogsfans/archive/2009/02/02/1382745.html)\n\n[Python正则表达式指南](http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html)\n\n[\\*(.+?)\\* 这个正则表达式中的.+?什么意思](https://www.zhihu.com/question/26413687)\n\n[Ruby笔记–正则表达式](http://rubyer.me/blog/357/)\n\n[在线的Ruby正则表达式编辑器](http://www.rubular.com/)","slug":"正则表达式学习笔记","published":1,"updated":"2018-03-28T16:09:12.848Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq6l005rbcuszsdvrvfq","content":"<p>正则表达式(Regular Expression):主要用来匹配文本中某个模式的字符串</p>\n<p>常用规则如下：</p>\n<h5 id=\"一般规则\"><a href=\"#一般规则\" class=\"headerlink\" title=\"一般规则:\"></a>一般规则:</h5><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">正则表达式</th>\n<th style=\"text-align:left\">匹配字符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">a</td>\n<td style=\"text-align:left\">例如/a/匹配字符a</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\?</td>\n<td style=\"text-align:left\">匹配特殊字符?。特殊字符包括^, $, ? , ., /, \\, [, ], {, }, (, ), +, *.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">.</td>\n<td style=\"text-align:left\">匹配任意字符，例如/a./匹配ab和ac</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:left\">代表0或1个字符。/Mrs?.?/匹配”Mr”，”Mrs”，”Mr.”，”Mrs.”</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*</td>\n<td style=\"text-align:left\">代表0或多个字符。/Hello*/匹配”Hello”,”HelloJack”</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\d{3}</td>\n<td style=\"text-align:left\">匹配3个数字比如456,\\d代表任意数字</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\d{1,10}</td>\n<td style=\"text-align:left\">匹配1-10个数字</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[a-zA-z0-9]</td>\n<td style=\"text-align:left\">匹配大小写字符以及数字</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"完整版图片如下\"><a href=\"#完整版图片如下\" class=\"headerlink\" title=\"完整版图片如下\"></a>完整版图片如下</h5><p><img src=\"/images/regex.jpg\" alt=\"\"></p>\n<p>比如要检测输入的ip地址是否合规，可以用以下正则表达式来匹配</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.)&#123;3&#125;(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)</span><br></pre></td></tr></table></figure>\n<p>最主要的是理解(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)的含义</p>\n<p>总的来说，正则表达式和Linux搜索文件中时用的通配符有点类似，不过它们俩的适用场景及具体用法还是不一样的以*为例，</p>\n<p>python和ruby正则表达式中星号(*)代表匹配它前面一个字符任意次（0或者任意次）</p>\n<p>比如abc<em> 能匹配 ab和abccc<br>而python中的glob.glob和ruby里的Dir.glob中星号</em>代表匹配零个或多个字符</p>\n<p>简单来说，通配符主要用于对文件名的操作，比如python中的glob.glob;ruby中的Dir.glob；linux里的一些命令行操作，属于系统级别的使用，操作的单位是文件。<br>正则表达式主要用于对文本内容进行操作，操作的单位是字符串。</p>\n<p>参考链接</p>\n<p><a href=\"http://www.jb51.net/tools/zhengze.html\" target=\"_blank\" rel=\"noopener\">正则表达式30分钟入门教程</a></p>\n<p><a href=\"http://www.cnblogs.com/cnblogsfans/archive/2009/02/02/1382745.html\" target=\"_blank\" rel=\"noopener\">一步一步学Ruby(九):Ruby正则表达式（上）</a></p>\n<p><a href=\"http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html\" target=\"_blank\" rel=\"noopener\">Python正则表达式指南</a></p>\n<p><a href=\"https://www.zhihu.com/question/26413687\" target=\"_blank\" rel=\"noopener\">*(.+?)* 这个正则表达式中的.+?什么意思</a></p>\n<p><a href=\"http://rubyer.me/blog/357/\" target=\"_blank\" rel=\"noopener\">Ruby笔记–正则表达式</a></p>\n<p><a href=\"http://www.rubular.com/\" target=\"_blank\" rel=\"noopener\">在线的Ruby正则表达式编辑器</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>正则表达式(Regular Expression):主要用来匹配文本中某个模式的字符串</p>\n<p>常用规则如下：</p>\n<h5 id=\"一般规则\"><a href=\"#一般规则\" class=\"headerlink\" title=\"一般规则:\"></a>一般规则:</h5><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">正则表达式</th>\n<th style=\"text-align:left\">匹配字符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">a</td>\n<td style=\"text-align:left\">例如/a/匹配字符a</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\?</td>\n<td style=\"text-align:left\">匹配特殊字符?。特殊字符包括^, $, ? , ., /, \\, [, ], {, }, (, ), +, *.</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">.</td>\n<td style=\"text-align:left\">匹配任意字符，例如/a./匹配ab和ac</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">?</td>\n<td style=\"text-align:left\">代表0或1个字符。/Mrs?.?/匹配”Mr”，”Mrs”，”Mr.”，”Mrs.”</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">*</td>\n<td style=\"text-align:left\">代表0或多个字符。/Hello*/匹配”Hello”,”HelloJack”</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\d{3}</td>\n<td style=\"text-align:left\">匹配3个数字比如456,\\d代表任意数字</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">\\d{1,10}</td>\n<td style=\"text-align:left\">匹配1-10个数字</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">[a-zA-z0-9]</td>\n<td style=\"text-align:left\">匹配大小写字符以及数字</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"完整版图片如下\"><a href=\"#完整版图片如下\" class=\"headerlink\" title=\"完整版图片如下\"></a>完整版图片如下</h5><p><img src=\"/images/regex.jpg\" alt=\"\"></p>\n<p>比如要检测输入的ip地址是否合规，可以用以下正则表达式来匹配</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.)&#123;3&#125;(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)</span><br></pre></td></tr></table></figure>\n<p>最主要的是理解(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)的含义</p>\n<p>总的来说，正则表达式和Linux搜索文件中时用的通配符有点类似，不过它们俩的适用场景及具体用法还是不一样的以*为例，</p>\n<p>python和ruby正则表达式中星号(*)代表匹配它前面一个字符任意次（0或者任意次）</p>\n<p>比如abc<em> 能匹配 ab和abccc<br>而python中的glob.glob和ruby里的Dir.glob中星号</em>代表匹配零个或多个字符</p>\n<p>简单来说，通配符主要用于对文件名的操作，比如python中的glob.glob;ruby中的Dir.glob；linux里的一些命令行操作，属于系统级别的使用，操作的单位是文件。<br>正则表达式主要用于对文本内容进行操作，操作的单位是字符串。</p>\n<p>参考链接</p>\n<p><a href=\"http://www.jb51.net/tools/zhengze.html\" target=\"_blank\" rel=\"noopener\">正则表达式30分钟入门教程</a></p>\n<p><a href=\"http://www.cnblogs.com/cnblogsfans/archive/2009/02/02/1382745.html\" target=\"_blank\" rel=\"noopener\">一步一步学Ruby(九):Ruby正则表达式（上）</a></p>\n<p><a href=\"http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html\" target=\"_blank\" rel=\"noopener\">Python正则表达式指南</a></p>\n<p><a href=\"https://www.zhihu.com/question/26413687\" target=\"_blank\" rel=\"noopener\">*(.+?)* 这个正则表达式中的.+?什么意思</a></p>\n<p><a href=\"http://rubyer.me/blog/357/\" target=\"_blank\" rel=\"noopener\">Ruby笔记–正则表达式</a></p>\n<p><a href=\"http://www.rubular.com/\" target=\"_blank\" rel=\"noopener\">在线的Ruby正则表达式编辑器</a></p>\n"},{"title":"眼睛湖","date":"2016-09-26T01:15:29.000Z","_content":"\n去学校池塘边看荷花，荷塘边上只我一个人，听着滴滴答答的小雨，心里十分宁静。\n\n待了一会发现荷花四周全被水泥围了起来，好像是被圈养在这，这样想着赏荷的心情已去了大半，\n\n看着满池的荷花也没了多少生机，心里的宁静也早已烟消云散了。回去的路上想起了鬼灯里恐怖的金鱼荷花，\n\n这样想着，不经意间走到了宿舍门口。\n","source":"_posts/雨天游眼睛湖.md","raw":"---\ntitle: 眼睛湖\ndate: 2016-09-26 09:15:29\ncategories: 杂记\n---\n\n去学校池塘边看荷花，荷塘边上只我一个人，听着滴滴答答的小雨，心里十分宁静。\n\n待了一会发现荷花四周全被水泥围了起来，好像是被圈养在这，这样想着赏荷的心情已去了大半，\n\n看着满池的荷花也没了多少生机，心里的宁静也早已烟消云散了。回去的路上想起了鬼灯里恐怖的金鱼荷花，\n\n这样想着，不经意间走到了宿舍门口。\n","slug":"雨天游眼睛湖","published":1,"updated":"2018-03-01T17:20:48.238Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzq6l005ubcusojhfo2n7","content":"<p>去学校池塘边看荷花，荷塘边上只我一个人，听着滴滴答答的小雨，心里十分宁静。</p>\n<p>待了一会发现荷花四周全被水泥围了起来，好像是被圈养在这，这样想着赏荷的心情已去了大半，</p>\n<p>看着满池的荷花也没了多少生机，心里的宁静也早已烟消云散了。回去的路上想起了鬼灯里恐怖的金鱼荷花，</p>\n<p>这样想着，不经意间走到了宿舍门口。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>去学校池塘边看荷花，荷塘边上只我一个人，听着滴滴答答的小雨，心里十分宁静。</p>\n<p>待了一会发现荷花四周全被水泥围了起来，好像是被圈养在这，这样想着赏荷的心情已去了大半，</p>\n<p>看着满池的荷花也没了多少生机，心里的宁静也早已烟消云散了。回去的路上想起了鬼灯里恐怖的金鱼荷花，</p>\n<p>这样想着，不经意间走到了宿舍门口。</p>\n"},{"title":"科学上网配置shadowsocks","date":"2017-12-19T15:35:12.000Z","_content":"\n1.Shadowsocks\n更新系统的软件源：\n\n```\nyum update\n```\n\n安装并更新包管理工具：\n\n```\n# CentOS yum源 中默认没有 pip，需要安装 扩展源EPEL\nyum -y install epel-release\n#安装pip并更新pip\nyum install python-pip\n\npip install --upgrade pip\n```\n\n通过pip安装Shadowsocks：\n\n```\npip install shadowsocks\n```\n\n编辑配置文件：\n\n```\nvi /etc/ss.json\n```\n\n内容如下,设置了两个代理端口和密码，都可访问：\n\n```\n{\n \"server\": \"::\",\n \"local_address\": \"127.0.0.1\",\n \"local_port\": 1080,\n \"port_password\": {\n       \"8080\": \"password\",\n       \"443\":\"password2\"\n },\n \"timeout\": 300,\n \"method\": \"aes-256-cfb\",\n \"fast_open\": false\n}\n```\n\n“server”: “::” 同时监听IPv4和IPv6；\n“port_passwd” 下是开放的端口和对应的密码，可以开放多个端口，之间用逗号隔开。格式应为：”端口”：”密码”，例如”8080”: “123456”；\n“method”为加密方式，可根据需要修改，默认也可以。\n防火墙开启相应的端口：\n\n```\nfirewall-cmd --permanent --zone=public --add-port=8080/tcp\n\nfirewall-cmd --reload\n```\n\n开机自启前需要先执行\n\n```\nchmod +x /etc/rc.local\n```\n\n添加开机启动：\n\n```\nvi /etc/rc.local\n```\n\n插入一行：\n\n```\nssserver -c /etc/ss.json -d start\n```\n\n\n\n2.使用Google BBR加速\n\n```\nwget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh\n\nchmod +x bbr.sh\n\n./bbr.sh\n```\n\n\n\n3.安装DenyHosts阻止SSH暴力攻击\n\n一键安装denyhosts：\n\n```\nwget http://soft.vpser.net/lnmp/lnmp1.4beta.tar.gz && tar zxf lnmp1.4beta.tar.gz && cd lnmp1.4/tools/ && ./denyhosts.sh \n```\n\n\n编辑denyhosts文件\n\n```\nnano /etc/denyhosts.conf\n```\n\n查看屏蔽ip\n\n```\nvi /etc/hosts.deny\n```\n\n\n\n4.查看shadowsocks连接用户数\n\n显示链接服务器的用户连接  \n\n```\nnetstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6'\n```\n\n\n查看一个SS端口的链接人数/设备数\n\n```\nnetstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6' |grep 173.199.118.8:344 |wc -l \n```\n\n查看一个SS端口的用户连接\n\n```\nnetstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6' |grep 173.199.118.8:344 \n```\n\n参考链接:\n\n[CentOS 7安装DenyHosts阻止SSH暴力攻击](http://blog.hlogc.com/20170318/centos-7-install-denyhosts-to-prevent-sshd-explore/)\n\n[一键安装最新内核并开启 BBR 脚本](https://teddysun.com/489.html)\n","source":"_posts/科学上网配置shadowsocks.md","raw":"---\ntitle: 科学上网配置shadowsocks\ndate: 2017-12-19 23:35:12\ntags: shadowsocks\ncategories: tools\n---\n\n1.Shadowsocks\n更新系统的软件源：\n\n```\nyum update\n```\n\n安装并更新包管理工具：\n\n```\n# CentOS yum源 中默认没有 pip，需要安装 扩展源EPEL\nyum -y install epel-release\n#安装pip并更新pip\nyum install python-pip\n\npip install --upgrade pip\n```\n\n通过pip安装Shadowsocks：\n\n```\npip install shadowsocks\n```\n\n编辑配置文件：\n\n```\nvi /etc/ss.json\n```\n\n内容如下,设置了两个代理端口和密码，都可访问：\n\n```\n{\n \"server\": \"::\",\n \"local_address\": \"127.0.0.1\",\n \"local_port\": 1080,\n \"port_password\": {\n       \"8080\": \"password\",\n       \"443\":\"password2\"\n },\n \"timeout\": 300,\n \"method\": \"aes-256-cfb\",\n \"fast_open\": false\n}\n```\n\n“server”: “::” 同时监听IPv4和IPv6；\n“port_passwd” 下是开放的端口和对应的密码，可以开放多个端口，之间用逗号隔开。格式应为：”端口”：”密码”，例如”8080”: “123456”；\n“method”为加密方式，可根据需要修改，默认也可以。\n防火墙开启相应的端口：\n\n```\nfirewall-cmd --permanent --zone=public --add-port=8080/tcp\n\nfirewall-cmd --reload\n```\n\n开机自启前需要先执行\n\n```\nchmod +x /etc/rc.local\n```\n\n添加开机启动：\n\n```\nvi /etc/rc.local\n```\n\n插入一行：\n\n```\nssserver -c /etc/ss.json -d start\n```\n\n\n\n2.使用Google BBR加速\n\n```\nwget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh\n\nchmod +x bbr.sh\n\n./bbr.sh\n```\n\n\n\n3.安装DenyHosts阻止SSH暴力攻击\n\n一键安装denyhosts：\n\n```\nwget http://soft.vpser.net/lnmp/lnmp1.4beta.tar.gz && tar zxf lnmp1.4beta.tar.gz && cd lnmp1.4/tools/ && ./denyhosts.sh \n```\n\n\n编辑denyhosts文件\n\n```\nnano /etc/denyhosts.conf\n```\n\n查看屏蔽ip\n\n```\nvi /etc/hosts.deny\n```\n\n\n\n4.查看shadowsocks连接用户数\n\n显示链接服务器的用户连接  \n\n```\nnetstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6'\n```\n\n\n查看一个SS端口的链接人数/设备数\n\n```\nnetstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6' |grep 173.199.118.8:344 |wc -l \n```\n\n查看一个SS端口的用户连接\n\n```\nnetstat -anp |grep 'ESTABLISHED' |grep 'python' |grep 'tcp6' |grep 173.199.118.8:344 \n```\n\n参考链接:\n\n[CentOS 7安装DenyHosts阻止SSH暴力攻击](http://blog.hlogc.com/20170318/centos-7-install-denyhosts-to-prevent-sshd-explore/)\n\n[一键安装最新内核并开启 BBR 脚本](https://teddysun.com/489.html)\n","slug":"科学上网配置shadowsocks","published":1,"updated":"2018-03-21T12:51:28.532Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjgrpzqjh0064bcus7badwbui","content":"<p>1.Shadowsocks<br>更新系统的软件源：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update</span><br></pre></td></tr></table></figure>\n<p>安装并更新包管理工具：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># CentOS yum源 中默认没有 pip，需要安装 扩展源EPEL</span><br><span class=\"line\">yum -y install epel-release</span><br><span class=\"line\">#安装pip并更新pip</span><br><span class=\"line\">yum install python-pip</span><br><span class=\"line\"></span><br><span class=\"line\">pip install --upgrade pip</span><br></pre></td></tr></table></figure>\n<p>通过pip安装Shadowsocks：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure>\n<p>编辑配置文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/ss.json</span><br></pre></td></tr></table></figure>\n<p>内容如下,设置了两个代理端口和密码，都可访问：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> &quot;server&quot;: &quot;::&quot;,</span><br><span class=\"line\"> &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class=\"line\"> &quot;local_port&quot;: 1080,</span><br><span class=\"line\"> &quot;port_password&quot;: &#123;</span><br><span class=\"line\">       &quot;8080&quot;: &quot;password&quot;,</span><br><span class=\"line\">       &quot;443&quot;:&quot;password2&quot;</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> &quot;timeout&quot;: 300,</span><br><span class=\"line\"> &quot;method&quot;: &quot;aes-256-cfb&quot;,</span><br><span class=\"line\"> &quot;fast_open&quot;: false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>“server”: “::” 同时监听IPv4和IPv6；<br>“port_passwd” 下是开放的端口和对应的密码，可以开放多个端口，之间用逗号隔开。格式应为：”端口”：”密码”，例如”8080”: “123456”；<br>“method”为加密方式，可根据需要修改，默认也可以。<br>防火墙开启相应的端口：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --permanent --zone=public --add-port=8080/tcp</span><br><span class=\"line\"></span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<p>开机自启前需要先执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /etc/rc.local</span><br></pre></td></tr></table></figure>\n<p>添加开机启动：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/rc.local</span><br></pre></td></tr></table></figure>\n<p>插入一行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -c /etc/ss.json -d start</span><br></pre></td></tr></table></figure>\n<p>2.使用Google BBR加速</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh</span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x bbr.sh</span><br><span class=\"line\"></span><br><span class=\"line\">./bbr.sh</span><br></pre></td></tr></table></figure>\n<p>3.安装DenyHosts阻止SSH暴力攻击</p>\n<p>一键安装denyhosts：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://soft.vpser.net/lnmp/lnmp1.4beta.tar.gz &amp;&amp; tar zxf lnmp1.4beta.tar.gz &amp;&amp; cd lnmp1.4/tools/ &amp;&amp; ./denyhosts.sh</span><br></pre></td></tr></table></figure>\n<p>编辑denyhosts文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /etc/denyhosts.conf</span><br></pre></td></tr></table></figure>\n<p>查看屏蔽ip</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/hosts.deny</span><br></pre></td></tr></table></figure>\n<p>4.查看shadowsocks连接用户数</p>\n<p>显示链接服务器的用户连接  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -anp |grep &apos;ESTABLISHED&apos; |grep &apos;python&apos; |grep &apos;tcp6&apos;</span><br></pre></td></tr></table></figure>\n<p>查看一个SS端口的链接人数/设备数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -anp |grep &apos;ESTABLISHED&apos; |grep &apos;python&apos; |grep &apos;tcp6&apos; |grep 173.199.118.8:344 |wc -l</span><br></pre></td></tr></table></figure>\n<p>查看一个SS端口的用户连接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -anp |grep &apos;ESTABLISHED&apos; |grep &apos;python&apos; |grep &apos;tcp6&apos; |grep 173.199.118.8:344</span><br></pre></td></tr></table></figure>\n<p>参考链接:</p>\n<p><a href=\"http://blog.hlogc.com/20170318/centos-7-install-denyhosts-to-prevent-sshd-explore/\" target=\"_blank\" rel=\"noopener\">CentOS 7安装DenyHosts阻止SSH暴力攻击</a></p>\n<p><a href=\"https://teddysun.com/489.html\" target=\"_blank\" rel=\"noopener\">一键安装最新内核并开启 BBR 脚本</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.Shadowsocks<br>更新系统的软件源：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum update</span><br></pre></td></tr></table></figure>\n<p>安装并更新包管理工具：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># CentOS yum源 中默认没有 pip，需要安装 扩展源EPEL</span><br><span class=\"line\">yum -y install epel-release</span><br><span class=\"line\">#安装pip并更新pip</span><br><span class=\"line\">yum install python-pip</span><br><span class=\"line\"></span><br><span class=\"line\">pip install --upgrade pip</span><br></pre></td></tr></table></figure>\n<p>通过pip安装Shadowsocks：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure>\n<p>编辑配置文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/ss.json</span><br></pre></td></tr></table></figure>\n<p>内容如下,设置了两个代理端口和密码，都可访问：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\"> &quot;server&quot;: &quot;::&quot;,</span><br><span class=\"line\"> &quot;local_address&quot;: &quot;127.0.0.1&quot;,</span><br><span class=\"line\"> &quot;local_port&quot;: 1080,</span><br><span class=\"line\"> &quot;port_password&quot;: &#123;</span><br><span class=\"line\">       &quot;8080&quot;: &quot;password&quot;,</span><br><span class=\"line\">       &quot;443&quot;:&quot;password2&quot;</span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> &quot;timeout&quot;: 300,</span><br><span class=\"line\"> &quot;method&quot;: &quot;aes-256-cfb&quot;,</span><br><span class=\"line\"> &quot;fast_open&quot;: false</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>“server”: “::” 同时监听IPv4和IPv6；<br>“port_passwd” 下是开放的端口和对应的密码，可以开放多个端口，之间用逗号隔开。格式应为：”端口”：”密码”，例如”8080”: “123456”；<br>“method”为加密方式，可根据需要修改，默认也可以。<br>防火墙开启相应的端口：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --permanent --zone=public --add-port=8080/tcp</span><br><span class=\"line\"></span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<p>开机自启前需要先执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x /etc/rc.local</span><br></pre></td></tr></table></figure>\n<p>添加开机启动：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/rc.local</span><br></pre></td></tr></table></figure>\n<p>插入一行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssserver -c /etc/ss.json -d start</span><br></pre></td></tr></table></figure>\n<p>2.使用Google BBR加速</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh</span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x bbr.sh</span><br><span class=\"line\"></span><br><span class=\"line\">./bbr.sh</span><br></pre></td></tr></table></figure>\n<p>3.安装DenyHosts阻止SSH暴力攻击</p>\n<p>一键安装denyhosts：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://soft.vpser.net/lnmp/lnmp1.4beta.tar.gz &amp;&amp; tar zxf lnmp1.4beta.tar.gz &amp;&amp; cd lnmp1.4/tools/ &amp;&amp; ./denyhosts.sh</span><br></pre></td></tr></table></figure>\n<p>编辑denyhosts文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /etc/denyhosts.conf</span><br></pre></td></tr></table></figure>\n<p>查看屏蔽ip</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/hosts.deny</span><br></pre></td></tr></table></figure>\n<p>4.查看shadowsocks连接用户数</p>\n<p>显示链接服务器的用户连接  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -anp |grep &apos;ESTABLISHED&apos; |grep &apos;python&apos; |grep &apos;tcp6&apos;</span><br></pre></td></tr></table></figure>\n<p>查看一个SS端口的链接人数/设备数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -anp |grep &apos;ESTABLISHED&apos; |grep &apos;python&apos; |grep &apos;tcp6&apos; |grep 173.199.118.8:344 |wc -l</span><br></pre></td></tr></table></figure>\n<p>查看一个SS端口的用户连接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -anp |grep &apos;ESTABLISHED&apos; |grep &apos;python&apos; |grep &apos;tcp6&apos; |grep 173.199.118.8:344</span><br></pre></td></tr></table></figure>\n<p>参考链接:</p>\n<p><a href=\"http://blog.hlogc.com/20170318/centos-7-install-denyhosts-to-prevent-sshd-explore/\" target=\"_blank\" rel=\"noopener\">CentOS 7安装DenyHosts阻止SSH暴力攻击</a></p>\n<p><a href=\"https://teddysun.com/489.html\" target=\"_blank\" rel=\"noopener\">一键安装最新内核并开启 BBR 脚本</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjgrpzq2t0001bcusy2gmd8fd","category_id":"cjgrpzq390004bcus580tykmh","_id":"cjgrpzq39000ebcusfo93shl2"},{"post_id":"cjgrpzq390003bcusvgyt0zst","category_id":"cjgrpzq39000abcusraehmgah","_id":"cjgrpzq3p000lbcusanis71ut"},{"post_id":"cjgrpzq390005bcus0dfnpnvl","category_id":"cjgrpzq39000gbcusvg906t8b","_id":"cjgrpzq3p000rbcuskr0qc3fs"},{"post_id":"cjgrpzq390006bcus04zymgqf","category_id":"cjgrpzq3p000mbcus963lcrpr","_id":"cjgrpzq3p000zbcusyhtony4a"},{"post_id":"cjgrpzq3p000pbcusf9zimh2y","category_id":"cjgrpzq39000gbcusvg906t8b","_id":"cjgrpzq3p0013bcus827isdgb"},{"post_id":"cjgrpzq39000dbcuszl2a9u9p","category_id":"cjgrpzq3p000mbcus963lcrpr","_id":"cjgrpzq3p0016bcus7r97smoj"},{"post_id":"cjgrpzq3p000wbcus0253zffh","category_id":"cjgrpzq3p000mbcus963lcrpr","_id":"cjgrpzq44001abcusl56qw1xj"},{"post_id":"cjgrpzq3p0010bcus8dzkib2f","category_id":"cjgrpzq39000gbcusvg906t8b","_id":"cjgrpzq44001ebcusqc629a0f"},{"post_id":"cjgrpzq3p000hbcuszwvkq4g1","category_id":"cjgrpzq3p000ybcus5lm8qj49","_id":"cjgrpzq44001hbcusrf4wom27"},{"post_id":"cjgrpzq440017bcus91sy29ri","category_id":"cjgrpzq3p000mbcus963lcrpr","_id":"cjgrpzq44001kbcusen75kaw6"},{"post_id":"cjgrpzq44001bbcuszwl4q8c4","category_id":"cjgrpzq3p000mbcus963lcrpr","_id":"cjgrpzq44001nbcus2jtb189g"},{"post_id":"cjgrpzq3p000jbcusj9gdfw40","category_id":"cjgrpzq3p000mbcus963lcrpr","_id":"cjgrpzq44001qbcus5fhlciqc"},{"post_id":"cjgrpzq44001fbcusjs3a910m","category_id":"cjgrpzq3p000mbcus963lcrpr","_id":"cjgrpzq44001tbcus0wze5p3e"},{"post_id":"cjgrpzq44001ibcusfwkb8j6l","category_id":"cjgrpzq3p000mbcus963lcrpr","_id":"cjgrpzq44001vbcush66u4rpy"},{"post_id":"cjgrpzq3p0014bcuse6iu81w8","category_id":"cjgrpzq44001gbcusq71tq0ky","_id":"cjgrpzq44001zbcus573jhtbs"},{"post_id":"cjgrpzq44001lbcusvp4hxs88","category_id":"cjgrpzq3p000mbcus963lcrpr","_id":"cjgrpzq440021bcuszmdqtokk"},{"post_id":"cjgrpzq44001obcusekl1bj2z","category_id":"cjgrpzq3p000mbcus963lcrpr","_id":"cjgrpzq4k0023bcusyrkw7wma"},{"post_id":"cjgrpzq44001rbcusd8eylswq","category_id":"cjgrpzq3p000mbcus963lcrpr","_id":"cjgrpzq4k0027bcusxjagspvn"},{"post_id":"cjgrpzq44001ubcusj5zoby8c","category_id":"cjgrpzq3p000mbcus963lcrpr","_id":"cjgrpzq4k0029bcuslmhxprxh"},{"post_id":"cjgrpzq44001wbcus91hxz88h","category_id":"cjgrpzq3p000mbcus963lcrpr","_id":"cjgrpzq4k002dbcusp0ghh3vz"},{"post_id":"cjgrpzq440020bcus1shoatwo","category_id":"cjgrpzq3p000mbcus963lcrpr","_id":"cjgrpzq4k002gbcuswfw75p91"},{"post_id":"cjgrpzq440022bcusv8xqa96d","category_id":"cjgrpzq3p000mbcus963lcrpr","_id":"cjgrpzq4k002ibcusmw09k9od"},{"post_id":"cjgrpzq4k0028bcus7g0is6mt","category_id":"cjgrpzq390004bcus580tykmh","_id":"cjgrpzq4k002lbcus8j6vdhjn"},{"post_id":"cjgrpzq4k002ebcusysbcxqw5","category_id":"cjgrpzq3p000mbcus963lcrpr","_id":"cjgrpzq4k002obcus926crndm"},{"post_id":"cjgrpzq4k002jbcusapyjac1e","category_id":"cjgrpzq4k002fbcusmaen7984","_id":"cjgrpzq4k002sbcus4t1pa2zh"},{"post_id":"cjgrpzq4k002abcusyq5g0rnn","category_id":"cjgrpzq4k002fbcusmaen7984","_id":"cjgrpzq4k002ubcus2nm50kpt"},{"post_id":"cjgrpzq4k002mbcussvi0iha7","category_id":"cjgrpzq4k002fbcusmaen7984","_id":"cjgrpzq4k002xbcuspml0xl7x"},{"post_id":"cjgrpzq4k002pbcusrni89fhi","category_id":"cjgrpzq44001gbcusq71tq0ky","_id":"cjgrpzq500030bcus568vmsmz"},{"post_id":"cjgrpzq4k002hbcusmenv8oov","category_id":"cjgrpzq4k002fbcusmaen7984","_id":"cjgrpzq500032bcus51uk2py5"},{"post_id":"cjgrpzq4k002rbcus7s5rgxst","category_id":"cjgrpzq4k002fbcusmaen7984","_id":"cjgrpzq500036bcusn3cpnq7i"},{"post_id":"cjgrpzq4k002vbcus5vckgu4f","category_id":"cjgrpzq39000gbcusvg906t8b","_id":"cjgrpzq500038bcusakia4jai"},{"post_id":"cjgrpzq4k002zbcuskpv4opm9","category_id":"cjgrpzq4k002fbcusmaen7984","_id":"cjgrpzq50003bbcus8azghntj"},{"post_id":"cjgrpzq500031bcusgp90mmhp","category_id":"cjgrpzq44001gbcusq71tq0ky","_id":"cjgrpzq50003ebcusvmtacg2j"},{"post_id":"cjgrpzq500034bcus4d6ao2op","category_id":"cjgrpzq39000gbcusvg906t8b","_id":"cjgrpzq50003hbcuszsbpegbr"},{"post_id":"cjgrpzq500037bcush4n3ruf1","category_id":"cjgrpzq39000gbcusvg906t8b","_id":"cjgrpzq50003kbcusy9zkkhrw"},{"post_id":"cjgrpzq50003abcus09g6jok8","category_id":"cjgrpzq44001gbcusq71tq0ky","_id":"cjgrpzq50003nbcus01rko9md"},{"post_id":"cjgrpzq50003jbcus4ifncrxn","category_id":"cjgrpzq3p000mbcus963lcrpr","_id":"cjgrpzq50003sbcusu1k8c4gj"},{"post_id":"cjgrpzq50003mbcust1feg3wr","category_id":"cjgrpzq44001gbcusq71tq0ky","_id":"cjgrpzq5f003vbcusaarnwlsu"},{"post_id":"cjgrpzq50003pbcusqznjrwv1","category_id":"cjgrpzq3p000mbcus963lcrpr","_id":"cjgrpzq5i003ybcuscvbqspra"},{"post_id":"cjgrpzq50003rbcus4k84uz3v","category_id":"cjgrpzq4k002fbcusmaen7984","_id":"cjgrpzq5j0041bcussdfucn4z"},{"post_id":"cjgrpzq5h003xbcus447a3koc","category_id":"cjgrpzq3p000mbcus963lcrpr","_id":"cjgrpzq5m0046bcus6jc6or95"},{"post_id":"cjgrpzq5j0040bcusdcpdh73l","category_id":"cjgrpzq4k002fbcusmaen7984","_id":"cjgrpzq5o0048bcus68w1as7a"},{"post_id":"cjgrpzq5k0043bcusm71opn9c","category_id":"cjgrpzq3p000mbcus963lcrpr","_id":"cjgrpzq5q004abcuswi7ur64s"},{"post_id":"cjgrpzq5m0045bcuspvgcmixz","category_id":"cjgrpzq3p000mbcus963lcrpr","_id":"cjgrpzq5q004cbcusys73nelk"},{"post_id":"cjgrpzq5n0047bcuskxbd3zce","category_id":"cjgrpzq3p000mbcus963lcrpr","_id":"cjgrpzq5q004fbcusj23hgx4m"},{"post_id":"cjgrpzq5q004bbcusozfltzqc","category_id":"cjgrpzq39000abcusraehmgah","_id":"cjgrpzq5q004jbcusjxyk4xg9"},{"post_id":"cjgrpzq5q004ibcusd2xs4emy","category_id":"cjgrpzq4k002fbcusmaen7984","_id":"cjgrpzq5q004pbcusqrndzy5r"},{"post_id":"cjgrpzq5q004mbcus1vfs1hmo","category_id":"cjgrpzq44001gbcusq71tq0ky","_id":"cjgrpzq65004tbcusuegb1ck7"},{"post_id":"cjgrpzq5q004qbcusgzvzveu6","category_id":"cjgrpzq390004bcus580tykmh","_id":"cjgrpzq65004xbcusfslte8pd"},{"post_id":"cjgrpzq5q004lbcushle9hfoc","category_id":"cjgrpzq5q004nbcus78i33b6a","_id":"cjgrpzq65004zbcusaf3zujmz"},{"post_id":"cjgrpzq65004sbcusgts8unya","category_id":"cjgrpzq390004bcus580tykmh","_id":"cjgrpzq650053bcus3dhjqjdy"},{"post_id":"cjgrpzq65004vbcus940gbg5j","category_id":"cjgrpzq390004bcus580tykmh","_id":"cjgrpzq650056bcuszhe2d599"},{"post_id":"cjgrpzq65004wbcusyjate617","category_id":"cjgrpzq390004bcus580tykmh","_id":"cjgrpzq65005abcusqud2v9f3"},{"post_id":"cjgrpzq65004ybcusq8qo0n95","category_id":"cjgrpzq390004bcus580tykmh","_id":"cjgrpzq65005dbcus7y2vkmpx"},{"post_id":"cjgrpzq650052bcus1klvm2mn","category_id":"cjgrpzq390004bcus580tykmh","_id":"cjgrpzq65005gbcust7tbyyob"},{"post_id":"cjgrpzq650055bcusb5sq14uo","category_id":"cjgrpzq390004bcus580tykmh","_id":"cjgrpzq65005jbcusybyip0t7"},{"post_id":"cjgrpzq650059bcus2wjib5wy","category_id":"cjgrpzq390004bcus580tykmh","_id":"cjgrpzq6l005mbcusaux0bi9z"},{"post_id":"cjgrpzq65005cbcusmf9orbsa","category_id":"cjgrpzq390004bcus580tykmh","_id":"cjgrpzq6l005pbcusugtyfgxs"},{"post_id":"cjgrpzq65005fbcuso7tt31s7","category_id":"cjgrpzq390004bcus580tykmh","_id":"cjgrpzq6l005sbcusmxpfczn2"},{"post_id":"cjgrpzq65005ibcushoq9rw3z","category_id":"cjgrpzq390004bcus580tykmh","_id":"cjgrpzq6l005vbcus330st6i1"},{"post_id":"cjgrpzq6l005lbcusc0dp54ey","category_id":"cjgrpzq390004bcus580tykmh","_id":"cjgrpzq6l005xbcus1lgkxtvx"},{"post_id":"cjgrpzq6l005obcusobhw4t1l","category_id":"cjgrpzq390004bcus580tykmh","_id":"cjgrpzq6l005zbcustieum4jp"},{"post_id":"cjgrpzq6l005rbcuszsdvrvfq","category_id":"cjgrpzq4k002fbcusmaen7984","_id":"cjgrpzq6l0061bcusb6j408zw"},{"post_id":"cjgrpzq6l005ubcusojhfo2n7","category_id":"cjgrpzq5q004nbcus78i33b6a","_id":"cjgrpzq6l0063bcusr993inuk"},{"post_id":"cjgrpzqjh0064bcus7badwbui","category_id":"cjgrpzq44001gbcusq71tq0ky","_id":"cjgrpzqjj0066bcustzn0x7mn"}],"PostTag":[{"post_id":"cjgrpzq2t0000bcusknx4h3ea","tag_id":"cjgrpzq390002bcus263sekxx","_id":"cjgrpzq390008bcusdu08phtz"},{"post_id":"cjgrpzq2t0001bcusy2gmd8fd","tag_id":"cjgrpzq390007bcusiso3xayd","_id":"cjgrpzq39000fbcushlxslvs1"},{"post_id":"cjgrpzq39000dbcuszl2a9u9p","tag_id":"cjgrpzq390002bcus263sekxx","_id":"cjgrpzq3p000ibcusqho9u3mp"},{"post_id":"cjgrpzq390009bcusw83khvkl","tag_id":"cjgrpzq39000cbcus9yoe43z4","_id":"cjgrpzq3p000nbcusfcpnuk6d"},{"post_id":"cjgrpzq3p000obcusfa6561rv","tag_id":"cjgrpzq390002bcus263sekxx","_id":"cjgrpzq3p000sbcus092ug4q6"},{"post_id":"cjgrpzq3p000obcusfa6561rv","tag_id":"cjgrpzq39000cbcus9yoe43z4","_id":"cjgrpzq3p000vbcusqr7c5p2x"},{"post_id":"cjgrpzq39000bbcuso916gtpq","tag_id":"cjgrpzq39000cbcus9yoe43z4","_id":"cjgrpzq3p000xbcusk2r5y608"},{"post_id":"cjgrpzq3p000pbcusf9zimh2y","tag_id":"cjgrpzq39000cbcus9yoe43z4","_id":"cjgrpzq3p0012bcusf2dk30yb"},{"post_id":"cjgrpzq3p000ubcus9def9l41","tag_id":"cjgrpzq39000cbcus9yoe43z4","_id":"cjgrpzq3p0015bcusw2s0uh2r"},{"post_id":"cjgrpzq3p000hbcuszwvkq4g1","tag_id":"cjgrpzq3p000qbcusme0f1jnj","_id":"cjgrpzq440019bcusijn5gybe"},{"post_id":"cjgrpzq3p000wbcus0253zffh","tag_id":"cjgrpzq3p0011bcus8ycvj4ru","_id":"cjgrpzq44001dbcus5owiq7il"},{"post_id":"cjgrpzq3p0010bcus8dzkib2f","tag_id":"cjgrpzq44001cbcusyfuk5w03","_id":"cjgrpzq44001mbcusu9k94vml"},{"post_id":"cjgrpzq44001bbcuszwl4q8c4","tag_id":"cjgrpzq44001jbcusu0yrgmn7","_id":"cjgrpzq44001sbcustghzvri9"},{"post_id":"cjgrpzq44001lbcusvp4hxs88","tag_id":"cjgrpzq44001pbcus1gfbtbzt","_id":"cjgrpzq44001ybcuslieeqqzj"},{"post_id":"cjgrpzq44001ubcusj5zoby8c","tag_id":"cjgrpzq44001xbcusu49wg2fr","_id":"cjgrpzq4k0026bcus7rwggmxj"},{"post_id":"cjgrpzq440020bcus1shoatwo","tag_id":"cjgrpzq44001xbcusu49wg2fr","_id":"cjgrpzq4k002cbcusj8zlwpj0"},{"post_id":"cjgrpzq4k0028bcus7g0is6mt","tag_id":"cjgrpzq4k002bbcusajj4jvq4","_id":"cjgrpzq4k002kbcus5riopejh"},{"post_id":"cjgrpzq4k002mbcussvi0iha7","tag_id":"cjgrpzq4k002qbcusozdzlxqm","_id":"cjgrpzq4k002ybcusvo3ehasd"},{"post_id":"cjgrpzq4k002pbcusrni89fhi","tag_id":"cjgrpzq4k002wbcusp721ujy5","_id":"cjgrpzq500035bcuslenlq2n3"},{"post_id":"cjgrpzq4k002tbcusvyxebmbu","tag_id":"cjgrpzq500033bcusbjzlk5vy","_id":"cjgrpzq50003cbcuskthzldyf"},{"post_id":"cjgrpzq4k002vbcus5vckgu4f","tag_id":"cjgrpzq500039bcush7q6agxk","_id":"cjgrpzq50003ibcusytdjb4qh"},{"post_id":"cjgrpzq4k002vbcus5vckgu4f","tag_id":"cjgrpzq39000cbcus9yoe43z4","_id":"cjgrpzq50003lbcusyiks4kr1"},{"post_id":"cjgrpzq50003dbcuszhkwz2ln","tag_id":"cjgrpzq390002bcus263sekxx","_id":"cjgrpzq50003obcusbr0imtvm"},{"post_id":"cjgrpzq50003gbcusyfny8zqk","tag_id":"cjgrpzq39000cbcus9yoe43z4","_id":"cjgrpzq50003qbcusc228tiyj"},{"post_id":"cjgrpzq50003abcus09g6jok8","tag_id":"cjgrpzq50003fbcuscrlxlsrv","_id":"cjgrpzq50003tbcusxhl6x7p9"},{"post_id":"cjgrpzq50003mbcust1feg3wr","tag_id":"cjgrpzq4k002wbcusp721ujy5","_id":"cjgrpzq5h003wbcusohewbogl"},{"post_id":"cjgrpzq50003pbcusqznjrwv1","tag_id":"cjgrpzq390002bcus263sekxx","_id":"cjgrpzq5i003zbcus3xwjvng8"},{"post_id":"cjgrpzq50003rbcus4k84uz3v","tag_id":"cjgrpzq4k002qbcusozdzlxqm","_id":"cjgrpzq5k0042bcusajpkiu8n"},{"post_id":"cjgrpzq50003ubcushzknwokd","tag_id":"cjgrpzq39000cbcus9yoe43z4","_id":"cjgrpzq5l0044bcus8pp7kq7r"},{"post_id":"cjgrpzq5q004ebcusexghm6dk","tag_id":"cjgrpzq39000cbcus9yoe43z4","_id":"cjgrpzq5q004hbcusravbgkrt"},{"post_id":"cjgrpzq5p0049bcus6e9eiug7","tag_id":"cjgrpzq5q004dbcusmxfqb650","_id":"cjgrpzq5q004kbcuslhdd4inf"},{"post_id":"cjgrpzq5q004obcusmqdm0yon","tag_id":"cjgrpzq500033bcusbjzlk5vy","_id":"cjgrpzq65004rbcusktv3xti1"},{"post_id":"cjgrpzq65004wbcusyjate617","tag_id":"cjgrpzq65004ubcusk2yg6lkw","_id":"cjgrpzq650051bcus9e7dtygp"},{"post_id":"cjgrpzq5q004qbcusgzvzveu6","tag_id":"cjgrpzq65004ubcusk2yg6lkw","_id":"cjgrpzq650054bcus9aod5kly"},{"post_id":"cjgrpzq65004ybcusq8qo0n95","tag_id":"cjgrpzq65004ubcusk2yg6lkw","_id":"cjgrpzq650058bcusna827039"},{"post_id":"cjgrpzq650052bcus1klvm2mn","tag_id":"cjgrpzq65004ubcusk2yg6lkw","_id":"cjgrpzq65005bbcus5ii7pp1o"},{"post_id":"cjgrpzq65004sbcusgts8unya","tag_id":"cjgrpzq65004ubcusk2yg6lkw","_id":"cjgrpzq65005ebcusjjmmo3ex"},{"post_id":"cjgrpzq650055bcusb5sq14uo","tag_id":"cjgrpzq65004ubcusk2yg6lkw","_id":"cjgrpzq65005hbcusjia2zbol"},{"post_id":"cjgrpzq650059bcus2wjib5wy","tag_id":"cjgrpzq65004ubcusk2yg6lkw","_id":"cjgrpzq6l005kbcusn99b92tm"},{"post_id":"cjgrpzq65004vbcus940gbg5j","tag_id":"cjgrpzq65004ubcusk2yg6lkw","_id":"cjgrpzq6l005nbcus9xe4o687"},{"post_id":"cjgrpzq65005cbcusmf9orbsa","tag_id":"cjgrpzq65004ubcusk2yg6lkw","_id":"cjgrpzq6l005qbcus0vbg3vi2"},{"post_id":"cjgrpzq65005fbcuso7tt31s7","tag_id":"cjgrpzq65004ubcusk2yg6lkw","_id":"cjgrpzq6l005tbcusp8wd923c"},{"post_id":"cjgrpzq65005ibcushoq9rw3z","tag_id":"cjgrpzq65004ubcusk2yg6lkw","_id":"cjgrpzq6l005wbcusncswdpqi"},{"post_id":"cjgrpzq6l005lbcusc0dp54ey","tag_id":"cjgrpzq65004ubcusk2yg6lkw","_id":"cjgrpzq6l005ybcus9wfkgfuk"},{"post_id":"cjgrpzq6l005obcusobhw4t1l","tag_id":"cjgrpzq65004ubcusk2yg6lkw","_id":"cjgrpzq6l0060bcuss84b7yx6"},{"post_id":"cjgrpzq6l005rbcuszsdvrvfq","tag_id":"cjgrpzq4k002qbcusozdzlxqm","_id":"cjgrpzq6l0062bcus0nx4obfp"},{"post_id":"cjgrpzqjh0064bcus7badwbui","tag_id":"cjgrpzq4k002wbcusp721ujy5","_id":"cjgrpzqjj0065bcus403vqv9r"}],"Tag":[{"name":"Django","_id":"cjgrpzq390002bcus263sekxx"},{"name":"Leetcode","_id":"cjgrpzq390007bcusiso3xayd"},{"name":"Linux","_id":"cjgrpzq39000cbcus9yoe43z4"},{"name":"html","_id":"cjgrpzq3p000qbcusme0f1jnj"},{"name":"problems","_id":"cjgrpzq3p0011bcus8ycvj4ru"},{"name":"NEO4J","_id":"cjgrpzq44001cbcusyfuk5w03"},{"name":"tools","_id":"cjgrpzq44001jbcusu0yrgmn7"},{"name":"args","_id":"cjgrpzq44001pbcus1gfbtbzt"},{"name":"Decorator","_id":"cjgrpzq44001xbcusu49wg2fr"},{"name":"Fibonacci","_id":"cjgrpzq4k002bbcusajj4jvq4"},{"name":"regex","_id":"cjgrpzq4k002qbcusozdzlxqm"},{"name":"shadowsocks","_id":"cjgrpzq4k002wbcusp721ujy5"},{"name":"hexo","_id":"cjgrpzq500033bcusbjzlk5vy"},{"name":"MySQL","_id":"cjgrpzq500039bcush7q6agxk"},{"name":"netSpeedMonitor","_id":"cjgrpzq50003fbcuscrlxlsrv"},{"name":"I/O","_id":"cjgrpzq5q004dbcusmxfqb650"},{"name":"Euler","_id":"cjgrpzq65004ubcusk2yg6lkw"}]}}